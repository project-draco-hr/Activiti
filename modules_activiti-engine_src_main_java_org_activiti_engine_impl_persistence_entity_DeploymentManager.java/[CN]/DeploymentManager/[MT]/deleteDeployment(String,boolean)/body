{
  List<ProcessDefinition> processDefinitions=getDbSqlSession().createProcessDefinitionQuery().deploymentId(deploymentId).list();
  List<Model> models=getDbSqlSession().createModelQueryImpl().deploymentId(deploymentId).list();
  for (  Model model : models) {
    ModelEntity modelEntity=(ModelEntity)model;
    modelEntity.setDeploymentId(null);
    getModelManager().updateModel(modelEntity);
  }
  if (cascade) {
    for (    ProcessDefinition processDefinition : processDefinitions) {
      String processDefinitionId=processDefinition.getId();
      getProcessInstanceManager().deleteProcessInstancesByProcessDefinition(processDefinitionId,"deleted deployment",cascade);
    }
  }
  for (  ProcessDefinition processDefinition : processDefinitions) {
    String processDefinitionId=processDefinition.getId();
    getIdentityLinkManager().deleteIdentityLinksByProcDef(processDefinitionId);
  }
  getProcessDefinitionManager().deleteProcessDefinitionsByDeploymentId(deploymentId);
  for (  ProcessDefinition processDefinition : processDefinitions) {
    String processDefinitionId=processDefinition.getId();
    Context.getProcessEngineConfiguration().getDeploymentCache().removeProcessDefinition(processDefinitionId);
    List<Job> timerStartJobs=Context.getCommandContext().getJobManager().findJobsByConfiguration(TimerStartEventJobHandler.TYPE,processDefinition.getKey());
    for (    Job job : timerStartJobs) {
      ((JobEntity)job).delete();
    }
    List<EventSubscriptionEntity> findEventSubscriptionsByConfiguration=Context.getCommandContext().getEventSubscriptionManager().findEventSubscriptionsByConfiguration(MessageEventHandler.EVENT_HANDLER_TYPE,processDefinition.getId());
    for (    EventSubscriptionEntity eventSubscriptionEntity : findEventSubscriptionsByConfiguration) {
      eventSubscriptionEntity.delete();
    }
  }
  getResourceManager().deleteResourcesByDeploymentId(deploymentId);
  getDbSqlSession().delete("deleteDeployment",deploymentId);
}
