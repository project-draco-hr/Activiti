{
  Object newItemId=null;
  if (itemId == null) {
    newItemId=addItem();
  }
 else {
    newItemId=addItemAfter(itemId);
  }
  Item newItem=getItem(newItemId);
  newItem.getItemProperty(ID_PROPERTY_NAME).setValue(propertyName == null ? DEFAULT_PROPERTY_NAME : propertyName);
  ComboBox typeComboBox=new ComboBox("",Arrays.asList("text","number","date"));
  typeComboBox.setNullSelectionAllowed(false);
  if (propertyType == null) {
    typeComboBox.setValue(typeComboBox.getItemIds().iterator().next());
  }
 else {
    typeComboBox.setValue(propertyType);
  }
  newItem.getItemProperty(ID_PROPERTY_TYPE).setValue(typeComboBox);
  CheckBox requiredCheckBox=new CheckBox();
  requiredCheckBox.setValue(required == null ? false : required);
  newItem.getItemProperty(ID_PROPERTY_REQUIRED).setValue(requiredCheckBox);
  HorizontalLayout actionButtons=new HorizontalLayout();
  Button deleteRowButton=new Button("-");
  deleteRowButton.setData(newItemId);
  deleteRowButton.addListener(new DeletePropertyClickListener(this));
  actionButtons.addComponent(deleteRowButton);
  Button addRowButton=new Button("+");
  addRowButton.setData(newItemId);
  addRowButton.addListener(new AddPropertyClickListener(this));
  actionButtons.addComponent(addRowButton);
  newItem.getItemProperty(ID_PROPERTY_ACTIONS).setValue(actionButtons);
}
