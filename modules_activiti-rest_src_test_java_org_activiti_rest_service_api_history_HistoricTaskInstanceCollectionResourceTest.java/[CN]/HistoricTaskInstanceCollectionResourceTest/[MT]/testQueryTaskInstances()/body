{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  Calendar created=Calendar.getInstance();
  created.set(Calendar.YEAR,2001);
  created.set(Calendar.MILLISECOND,0);
  ClockUtil.setCurrentTime(created.getTime());
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  ClockUtil.reset();
  Task task1=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task1.getId());
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"local","test");
  taskService.setOwner(task.getId(),"test");
  taskService.setDueDate(task.getId(),new GregorianCalendar(2013,0,1).getTime());
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task task2=taskService.createTaskQuery().processInstanceId(processInstance2.getId()).singleResult();
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_TASK_INSTANCES);
  assertResultsPresentInDataResponse(url,3,task.getId(),task2.getId());
  assertResultsPresentInDataResponse(url + "?processInstanceId=" + processInstance.getId(),2,task.getId());
  assertResultsPresentInDataResponse(url + "?processInstanceId=" + processInstance2.getId(),1,task2.getId());
  assertResultsPresentInDataResponse(url + "?taskAssignee=kermit",2,task2.getId());
  assertResultsPresentInDataResponse(url + "?taskAssigneeLike=" + encode("%mit"),2,task2.getId());
  assertResultsPresentInDataResponse(url + "?taskAssignee=fozzie",1,task.getId());
  assertResultsPresentInDataResponse(url + "?taskOwner=test",1,task.getId());
  assertResultsPresentInDataResponse(url + "?taskOwnerLike=" + encode("t%"),1,task.getId());
  assertResultsPresentInDataResponse(url + "?taskInvolvedUser=test",1,task.getId());
  assertResultsPresentInDataResponse(url + "?dueDateAfter=" + dateFormat.format(new GregorianCalendar(2010,0,1).getTime()),1,task.getId());
  assertResultsPresentInDataResponse(url + "?dueDateAfter=" + dateFormat.format(new GregorianCalendar(2013,4,1).getTime()),0);
  assertResultsPresentInDataResponse(url + "?dueDateBefore=" + dateFormat.format(new GregorianCalendar(2010,0,1).getTime()),0);
  assertResultsPresentInDataResponse(url + "?dueDateBefore=" + dateFormat.format(new GregorianCalendar(2013,4,1).getTime()),1,task.getId());
  assertResultsPresentInDataResponse(url + "?taskCreatedOn=" + dateFormat.format(created.getTime()),1,task1.getId());
  created.set(Calendar.YEAR,2002);
  assertResultsPresentInDataResponse(url + "?taskCreatedBefore=" + dateFormat.format(created.getTime()),1,task1.getId());
  created.set(Calendar.YEAR,2000);
  assertResultsPresentInDataResponse(url + "?taskCreatedAfter=" + dateFormat.format(created.getTime()),3,task1.getId(),task2.getId());
}
