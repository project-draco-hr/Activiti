{
  if (generateReportData) {
    Thread thread=new Thread(new Runnable(){
      public void run(){
        Random random=new Random();
        Date now=new Date();
        ClockUtil.setCurrentTime(now);
        for (int i=0; i < 50; i++) {
          if (random.nextBoolean()) {
            processEngine.getRuntimeService().startProcessInstanceByKey("fixSystemFailure");
          }
          if (random.nextBoolean()) {
            processEngine.getIdentityService().setAuthenticatedUserId("kermit");
            Map<String,Object> variables=new HashMap<String,Object>();
            variables.put("customerName","testCustomer");
            variables.put("details","Looks very interesting!");
            variables.put("notEnoughInformation",false);
            processEngine.getRuntimeService().startProcessInstanceByKey("reviewSaledLead",variables);
          }
          if (random.nextBoolean()) {
            processEngine.getRuntimeService().startProcessInstanceByKey("escalationExample");
          }
        }
        List<Job> jobs=processEngine.getManagementService().createJobQuery().list();
        for (int i=0; i < jobs.size() / 2; i++) {
          processEngine.getManagementService().executeJob(jobs.get(i).getId());
        }
        List<Task> tasks=processEngine.getTaskService().createTaskQuery().list();
        while (tasks.size() > 0) {
          for (          Task task : tasks) {
            String assignee=random.nextBoolean() ? "kermit" : "fozzie";
            if (task.getAssignee() == null) {
              processEngine.getTaskService().claim(task.getId(),assignee);
            }
            processEngine.getTaskService().complete(task.getId());
            if (random.nextInt(100) < 20) {
              now=new Date(now.getTime() - ((24 * 60 * 60* 1000) - (60 * 60 * 1000)));
              ClockUtil.setCurrentTime(now);
            }
          }
          tasks=processEngine.getTaskService().createTaskQuery().list();
        }
        ClockUtil.reset();
        LOGGER.info("Demo report data generated");
      }
    }
);
    thread.start();
  }
}
