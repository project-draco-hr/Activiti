{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");
  Task task=taskService.createTaskQuery().singleResult();
  ObjectNode requestNode=objectMapper.createObjectNode();
  String message="test";
  requestNode.put("message",message);
  requestNode.put("saveProcessInstanceId",true);
  HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COMMENT_COLLECTION,task.getId()));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  List<Comment> commentsOnTask=taskService.getTaskComments(task.getId());
  assertNotNull(commentsOnTask);
  assertEquals(1,commentsOnTask.size());
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("processInstanceId").asText());
  assertEquals(task.getId(),responseNode.get("taskId").asText());
  assertEquals(message,responseNode.get("message").asText());
  assertNotNull(responseNode.get("time").asText());
  assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COMMENT,task.getId(),commentsOnTask.get(0).getId())));
  assertTrue(responseNode.get("processInstanceUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,processInstance.getId(),commentsOnTask.get(0).getId())));
}
