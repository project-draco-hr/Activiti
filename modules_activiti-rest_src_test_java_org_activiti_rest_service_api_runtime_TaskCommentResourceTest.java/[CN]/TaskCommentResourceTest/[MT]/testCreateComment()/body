{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("message","This is a comment...");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COMMENT_COLLECTION,task.getId()));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
    List<Comment> commentsOnTask=taskService.getTaskComments(task.getId());
    assertNotNull(commentsOnTask);
    assertEquals(1,commentsOnTask.size());
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("kermit",responseNode.get("author").textValue());
    assertEquals("This is a comment...",responseNode.get("message").textValue());
    assertEquals(commentsOnTask.get(0).getId(),responseNode.get("id").textValue());
    assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COMMENT,task.getId(),commentsOnTask.get(0).getId())));
    assertEquals(task.getId(),responseNode.get("taskId").asText());
    assertTrue(responseNode.get("processInstanceUrl").isNull());
    assertTrue(responseNode.get("processInstanceId").isNull());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
