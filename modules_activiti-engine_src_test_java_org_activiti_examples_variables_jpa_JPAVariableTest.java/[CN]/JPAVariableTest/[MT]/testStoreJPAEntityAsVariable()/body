{
  setupJPAEntities();
  Map<String,Object> variables=new HashMap<String,Object>();
  variables.put("simpleEntityFieldAccess",simpleEntityFieldAccess);
  variables.put("simpleEntityPropertyAccess",simpleEntityPropertyAccess);
  variables.put("subclassFieldAccess",subclassFieldAccess);
  variables.put("subclassPropertyAccess",subclassPropertyAccess);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("JPAVariableProcess",variables);
  Object fieldAccessResult=runtimeService.getVariable(processInstance.getId(),"simpleEntityFieldAccess");
  Assert.assertTrue(fieldAccessResult instanceof FieldAccessJPAEntity);
  Assert.assertEquals(1L,((FieldAccessJPAEntity)fieldAccessResult).getId().longValue());
  Assert.assertEquals("value1",((FieldAccessJPAEntity)fieldAccessResult).getValue());
  Object propertyAccessResult=runtimeService.getVariable(processInstance.getId(),"simpleEntityPropertyAccess");
  Assert.assertTrue(propertyAccessResult instanceof PropertyAccessJPAEntity);
  Assert.assertEquals(1L,((PropertyAccessJPAEntity)propertyAccessResult).getId().longValue());
  Assert.assertEquals("value2",((PropertyAccessJPAEntity)propertyAccessResult).getValue());
  Object subclassFieldResult=runtimeService.getVariable(processInstance.getId(),"subclassFieldAccess");
  Assert.assertTrue(subclassFieldResult instanceof SubclassFieldAccessJPAEntity);
  Assert.assertEquals(1L,((SubclassFieldAccessJPAEntity)subclassFieldResult).getId().longValue());
  Assert.assertEquals("value3",((SubclassFieldAccessJPAEntity)subclassFieldResult).getValue());
  Object subclassPropertyResult=runtimeService.getVariable(processInstance.getId(),"subclassPropertyAccess");
  Assert.assertTrue(subclassPropertyResult instanceof SubclassPropertyAccessJPAEntity);
  Assert.assertEquals(1L,((SubclassPropertyAccessJPAEntity)subclassPropertyResult).getId().longValue());
  Assert.assertEquals("value4",((SubclassPropertyAccessJPAEntity)subclassPropertyResult).getValue());
  runtimeService.deleteProcessInstance(processInstance.getId(),"test");
  variables=new HashMap<String,Object>();
  variables.put("byteIdJPAEntity",byteIdJPAEntity);
  variables.put("shortIdJPAEntity",shortIdJPAEntity);
  variables.put("integerIdJPAEntity",integerIdJPAEntity);
  variables.put("longIdJPAEntity",longIdJPAEntity);
  variables.put("floatIdJPAEntity",floatIdJPAEntity);
  variables.put("doubleIdJPAEntity",doubleIdJPAEntity);
  variables.put("charIdJPAEntity",charIdJPAEntity);
  variables.put("stringIdJPAEntity",stringIdJPAEntity);
  variables.put("dateIdJPAEntity",dateIdJPAEntity);
  variables.put("sqlDateIdJPAEntity",sqlDateIdJPAEntity);
  variables.put("bigDecimalIdJPAEntity",bigDecimalIdJPAEntity);
  variables.put("bigIntegerIdJPAEntity",bigIntegerIdJPAEntity);
  processInstance=runtimeService.startProcessInstanceByKey("JPAVariableProcess",variables);
  Object byteIdResult=runtimeService.getVariable(processInstance.getId(),"byteIdJPAEntity");
  assertTrue(byteIdResult instanceof ByteIdJPAEntity);
  assertEquals(byteIdJPAEntity.getByteId(),((ByteIdJPAEntity)byteIdResult).getByteId());
  Object shortIdResult=runtimeService.getVariable(processInstance.getId(),"shortIdJPAEntity");
  assertTrue(shortIdResult instanceof ShortIdJPAEntity);
  assertEquals(shortIdJPAEntity.getShortId(),((ShortIdJPAEntity)shortIdResult).getShortId());
  Object integerIdResult=runtimeService.getVariable(processInstance.getId(),"integerIdJPAEntity");
  assertTrue(integerIdResult instanceof IntegerIdJPAEntity);
  assertEquals(integerIdJPAEntity.getIntId(),((IntegerIdJPAEntity)integerIdResult).getIntId());
  Object longIdResult=runtimeService.getVariable(processInstance.getId(),"longIdJPAEntity");
  assertTrue(longIdResult instanceof LongIdJPAEntity);
  assertEquals(longIdJPAEntity.getLongId(),((LongIdJPAEntity)longIdResult).getLongId());
  Object floatIdResult=runtimeService.getVariable(processInstance.getId(),"floatIdJPAEntity");
  assertTrue(floatIdResult instanceof FloatIdJPAEntity);
  assertEquals(floatIdJPAEntity.getFloatId(),((FloatIdJPAEntity)floatIdResult).getFloatId());
  Object doubleIdResult=runtimeService.getVariable(processInstance.getId(),"doubleIdJPAEntity");
  assertTrue(doubleIdResult instanceof DoubleIdJPAEntity);
  assertEquals(doubleIdJPAEntity.getDoubleId(),((DoubleIdJPAEntity)doubleIdResult).getDoubleId());
  Object charIdResult=runtimeService.getVariable(processInstance.getId(),"charIdJPAEntity");
  assertTrue(charIdResult instanceof CharIdJPAEntity);
  assertEquals(charIdJPAEntity.getCharId(),((CharIdJPAEntity)charIdResult).getCharId());
  Object stringIdResult=runtimeService.getVariable(processInstance.getId(),"stringIdJPAEntity");
  assertTrue(stringIdResult instanceof StringIdJPAEntity);
  assertEquals(stringIdJPAEntity.getStringId(),((StringIdJPAEntity)stringIdResult).getStringId());
  Object dateIdResult=runtimeService.getVariable(processInstance.getId(),"dateIdJPAEntity");
  assertTrue(dateIdResult instanceof DateIdJPAEntity);
  assertEquals(dateIdJPAEntity.getDateId(),((DateIdJPAEntity)dateIdResult).getDateId());
  Object sqlDateIdResult=runtimeService.getVariable(processInstance.getId(),"sqlDateIdJPAEntity");
  assertTrue(sqlDateIdResult instanceof SQLDateIdJPAEntity);
  assertEquals(sqlDateIdJPAEntity.getDateId(),((SQLDateIdJPAEntity)sqlDateIdResult).getDateId());
  Object bigDecimalIdResult=runtimeService.getVariable(processInstance.getId(),"bigDecimalIdJPAEntity");
  assertTrue(bigDecimalIdResult instanceof BigDecimalIdJPAEntity);
  assertEquals(bigDecimalIdJPAEntity.getBigDecimalId(),((BigDecimalIdJPAEntity)bigDecimalIdResult).getBigDecimalId());
  Object bigIntegerIdResult=runtimeService.getVariable(processInstance.getId(),"bigIntegerIdJPAEntity");
  assertTrue(bigIntegerIdResult instanceof BigIntegerIdJPAEntity);
  assertEquals(bigIntegerIdJPAEntity.getBigIntegerId(),((BigIntegerIdJPAEntity)bigIntegerIdResult).getBigIntegerId());
}
