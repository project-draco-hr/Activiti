{
  log.fine("scanning mail for user " + userId);
  Store store=null;
  Folder toDoFolder=null;
  Folder toDoInActivitiFolder=null;
  try {
    Session session=Session.getDefaultInstance(new Properties());
    store=session.getStore(imapProtocol);
    log.fine("connecting to " + imapHost + " over "+ imapProtocol+ " for user "+ imapUsername);
    store.connect(imapHost,imapUsername,imapPassword);
    toDoFolder=store.getFolder(toDoFolderName);
    toDoFolder.open(Folder.READ_WRITE);
    toDoInActivitiFolder=store.getFolder(toDoInActivitiFolderName);
    toDoInActivitiFolder.open(Folder.READ_WRITE);
    Message[] messages=toDoFolder.getMessages();
    log.fine("getting messages from myToDoFolder");
    DbSqlSession dbSqlSession=commandContext.getDbSqlSession();
    for (    Message message : messages) {
      log.fine("transforming mail into activiti task: " + message.getSubject());
      MailTransformer mailTransformer=new MailTransformer(message);
      String taskDescription=mailTransformer.getHtml();
      taskDescription=taskDescription.replaceAll("\\<.*?\\>","");
      taskDescription=taskDescription.replaceAll("\\s"," ");
      taskDescription=taskDescription.trim();
      if (taskDescription.length() > 120) {
        taskDescription=taskDescription.substring(0,117) + "...";
      }
      TaskEntity task=new TaskEntity();
      task.setAssignee(userId);
      task.setName(message.getSubject());
      task.setDescription(taskDescription);
      dbSqlSession.insert(task);
      String taskId=task.getId();
      for (      String recipientEmailAddress : mailTransformer.getRecipients()) {
        User recipient=new UserQueryImpl(commandContext).userEmail(recipientEmailAddress).singleResult();
        if (recipient != null) {
          new AddIdentityLinkCmd(taskId,recipient.getId(),null,"Recipient").execute(commandContext);
        }
      }
      List<AttachmentEntity> attachments=mailTransformer.getAttachments();
      for (      AttachmentEntity attachment : attachments) {
        ByteArrayEntity content=attachment.getContent();
        dbSqlSession.insert(content);
        attachment.setContentId(content.getId());
        attachment.setTaskId(taskId);
        dbSqlSession.insert(attachment);
      }
      Message[] messagesToCopy=new Message[]{message};
      toDoFolder.copyMessages(messagesToCopy,toDoInActivitiFolder);
      message.setFlag(Flags.Flag.DELETED,true);
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ActivitiException("couldn't scan mail for user " + userId + ": "+ e.getMessage(),e);
  }
 finally {
    if (toDoInActivitiFolder != null) {
      try {
        toDoInActivitiFolder.close(false);
      }
 catch (      MessagingException e) {
        e.printStackTrace();
      }
    }
    if (toDoFolder != null) {
      try {
        toDoFolder.close(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (store != null) {
      try {
        store.close();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}
