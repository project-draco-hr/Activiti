{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");
  Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  HashMap<String,Object> variables=new HashMap<String,Object>();
  variables.put("stringVar","Abcdef");
  variables.put("intVar",12345);
  variables.put("booleanVar",true);
  taskService.setVariablesLocal(processTask.getId(),variables);
  runtimeService.startProcessInstanceByKey("oneTaskProcess");
  ObjectNode requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("taskVariables",variableArray);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_QUERY);
  variableNode.put("name","stringVar");
  variableNode.put("value","Abcdef");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12345);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","abCDEF");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("value","Abcdef");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("value","abcdef");
  variableNode.put("operation","notEquals");
  try {
    assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
    fail("Exception expected");
  }
 catch (  ResourceException expected) {
    assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
    assertEquals("Value-only query (without a variable-name) is only supported when using 'equals' operation.",expected.getStatus().getDescription());
  }
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","abcdef");
  variableNode.put("operation","operationX");
  try {
    assertResultsPresentInDataResponse(url,requestNode,processTask.getId());
    fail("Exception expected");
  }
 catch (  ResourceException expected) {
    assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
    assertEquals("Unsupported variable query operation: operationX",expected.getStatus().getDescription());
  }
}
