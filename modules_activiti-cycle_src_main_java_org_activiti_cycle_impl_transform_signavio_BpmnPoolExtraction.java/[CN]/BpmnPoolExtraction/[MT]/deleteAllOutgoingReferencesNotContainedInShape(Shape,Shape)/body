{
  if (childShape == null) {
    childShape=sourceShape;
  }
  if (childShape.getChildShapes().isEmpty()) {
    return;
  }
  for (  Shape child : childShape.getChildShapes()) {
    ArrayList<Shape> outgoings=child.getOutgoings();
    ArrayList<Shape> removeOutgoings=new ArrayList<Shape>();
    if (!outgoings.isEmpty()) {
      for (      Shape outgoing : outgoings) {
        Shape target=outgoing.getTarget();
        if (!(shapeIsContainedIn(target,sourceShape))) {
          removeOutgoings.add(outgoing);
        }
      }
      outgoings.removeAll(removeOutgoings);
      child.setOutgoings(outgoings);
    }
 else {
      deleteAllOutgoingReferencesNotContainedInShape(sourceShape,child);
    }
  }
}
