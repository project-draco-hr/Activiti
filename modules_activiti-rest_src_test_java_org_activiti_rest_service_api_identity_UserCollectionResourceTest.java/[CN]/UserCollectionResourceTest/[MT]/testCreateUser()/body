{
  try {
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("id","testuser");
    requestNode.put("firstName","Frederik");
    requestNode.put("lastName","Heremans");
    requestNode.put("password","test");
    requestNode.put("email","no-reply@activiti.org");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_USER_COLLECTION,"testuser"));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("testuser",responseNode.get("id").textValue());
    assertEquals("Frederik",responseNode.get("firstName").textValue());
    assertEquals("Heremans",responseNode.get("lastName").textValue());
    assertEquals("no-reply@activiti.org",responseNode.get("email").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_USER,"testuser")));
    assertNotNull(identityService.createUserQuery().userId("testuser").singleResult());
  }
  finally {
    try {
      identityService.deleteUser("testuser");
    }
 catch (    Throwable t) {
    }
  }
}
