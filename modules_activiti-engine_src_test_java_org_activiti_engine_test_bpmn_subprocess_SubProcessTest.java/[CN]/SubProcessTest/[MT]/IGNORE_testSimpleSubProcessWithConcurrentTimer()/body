{
  Date startTime=new Date();
  ProcessInstance pi=runtimeService.startProcessInstanceByKey("simpleSubProcessWithConcurrentTimer");
  TaskQuery taskQuery=taskService.createTaskQuery().processInstanceId(pi.getId()).orderByTaskName().asc();
  Task subProcessTask=taskQuery.singleResult();
  assertEquals("Task in subprocess",subProcessTask.getName());
  Job job=managementService.createJobQuery().singleResult();
  managementService.executeJob(job.getId());
  List<Task> tasksAfterTimer=taskQuery.list();
  assertEquals(2,tasksAfterTimer.size());
  Task taskAfterTimer1=tasksAfterTimer.get(0);
  Task taskAfterTimer2=tasksAfterTimer.get(1);
  assertEquals("Task after timer 1",taskAfterTimer1.getName());
  assertEquals("Task after timer 2",taskAfterTimer2.getName());
  taskService.complete(taskAfterTimer1.getId());
  taskService.complete(taskAfterTimer2.getId());
  assertProcessEnded(pi.getId());
}
