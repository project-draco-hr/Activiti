{
  try {
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("name","existingVariable");
    requestNode.put("value","simple string value");
    requestNode.put("scope","local");
    requestNode.put("type","string");
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,"unexisting"));
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_NOT_FOUND,expected.getStatus());
      assertEquals("task unexisting doesn't exist",expected.getStatus().getDescription());
    }
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.setVariable(task.getId(),"existingVariable","Value 1");
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_CONFLICT,expected.getStatus());
      assertEquals("Variable 'existingVariable' is already present on task '" + task.getId() + "'.",expected.getStatus().getDescription());
    }
    requestNode.put("name","myVariable");
    requestNode.put("value","simple string value");
    requestNode.put("scope","global");
    requestNode.put("type","string");
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
      assertEquals("Cannot set global variable 'myVariable' on task '" + task.getId() + "', task is not part of process.",expected.getStatus().getDescription());
    }
    requestNode=objectMapper.createObjectNode();
    requestNode.put("value","simple string value");
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
      assertEquals("Variable name is required",expected.getStatus().getDescription());
    }
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
