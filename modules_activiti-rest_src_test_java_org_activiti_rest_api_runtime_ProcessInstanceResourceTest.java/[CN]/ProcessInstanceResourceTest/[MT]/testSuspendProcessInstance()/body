{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("processOne","myBusinessKey");
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("action","suspend");
  ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId()));
  Representation response=client.put(requestNode);
  assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
  assertEquals(1,runtimeService.createProcessInstanceQuery().suspended().processInstanceId(processInstance.getId()).count());
  JsonNode responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").getTextValue());
  assertTrue(responseNode.get("suspended").getBooleanValue());
  try {
    client.put(requestNode);
    fail("Expected exception");
  }
 catch (  ResourceException expected) {
    assertEquals(Status.CLIENT_ERROR_CONFLICT,expected.getStatus());
    assertEquals("Process instance with id '" + processInstance.getId() + "' is already suspended.",expected.getStatus().getDescription());
  }
}
