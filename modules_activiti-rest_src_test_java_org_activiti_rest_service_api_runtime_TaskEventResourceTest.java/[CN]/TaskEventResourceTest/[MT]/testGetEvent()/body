{
  try {
    Calendar now=Calendar.getInstance();
    now.set(Calendar.MILLISECOND,0);
    processEngineConfiguration.getClock().setCurrentTime(now.getTime());
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.addUserIdentityLink(task.getId(),"gonzo","someType");
    Event event=taskService.getTaskEvents(task.getId()).get(0);
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_EVENT,task.getId(),event.getId()));
    Representation response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals(event.getId(),responseNode.get("id").getTextValue());
    assertEquals(event.getAction(),responseNode.get("action").getTextValue());
    assertEquals(event.getUserId(),responseNode.get("userId").getTextValue());
    assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_EVENT,task.getId(),event.getId())));
    assertTrue(responseNode.get("taskUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId())));
    assertEquals(now.getTime(),getDateFromISOString(responseNode.get("time").getTextValue()));
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
