{
  ProcessEngineImpl processEngine=(ProcessEngineImpl)new ProcessEngineBuilder().configureFromPropertiesResource("org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.CREATE_DROP).buildProcessEngine();
  PersistenceSessionFactory persistenceSessionFactory=processEngine.getPersistenceSessionFactory();
  SqlSessionFactory sqlSessionFactory=((IbatisPersistenceSessionFactory)persistenceSessionFactory).getSqlSessionFactory();
  SqlSession sqlSession=sqlSessionFactory.openSession();
  boolean success=false;
  try {
    Map<String,Object> parameters=new HashMap<String,Object>();
    parameters.put("name","schema.version");
    parameters.put("value","25.7");
    parameters.put("revision",new Integer(1));
    parameters.put("newRevision",new Integer(2));
    sqlSession.update("updateProperty",parameters);
    success=true;
  }
 catch (  Exception e) {
    throw new ActivitiException("couldn't update db schema version",e);
  }
 finally {
    if (success) {
      sqlSession.commit(true);
    }
 else {
      sqlSession.rollback(true);
    }
    sqlSession.close();
  }
  exception.expect(ActivitiWrongDbException.class);
  exception.expect(new TypeSafeMatcher<ActivitiWrongDbException>(){
    @Override public boolean matchesSafely(    ActivitiWrongDbException e){
      return e.getMessage().contains("version mismatch") && "25.7".equals(e.getDbVersion()) && ProcessEngine.VERSION == e.getLibraryVersion();
    }
    public void describeTo(    Description description){
      description.appendText("'version mismatch' with dbVersion=25.7 and libraryVersion=").appendValue(ProcessEngine.VERSION);
    }
  }
);
  new ProcessEngineBuilder().configureFromPropertiesResource("org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.CHECK_VERSION).buildProcessEngine();
  processEngine.close();
}
