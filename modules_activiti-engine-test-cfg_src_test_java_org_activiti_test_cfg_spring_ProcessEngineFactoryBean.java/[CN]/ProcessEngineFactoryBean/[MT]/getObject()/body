{
  Assert.state(databaseName != null,"A database name must be provided (e.g. 'h2')");
  ProcessEngineConfiguration configuration=new ProcessEngineConfiguration();
  configuration.setDbSchemaStrategy(dbSchemaStrategy);
  configuration.setJobExecutorAutoActivate(jobExecutorAutoActivate);
  configuration.setProcessEngineName(processEngineName);
  IdGenerator idGenerator=configuration.getIdGenerator();
  PersistenceSessionFactory persistenceSessionFactory=new IbatisPersistenceSessionFactory(configuration.getVariableTypes(),idGenerator,databaseName,dataSource,transactionManager == null);
  configuration.setPersistenceSessionFactory(persistenceSessionFactory);
  if (transactionManager != null) {
    DefaultCommandExecutor commandExecutor=(DefaultCommandExecutor)configuration.getCommandExecutor();
    commandExecutor.addCommandInterceptor(new CommandInterceptor(){
      public <T>T invoke(      final CommandExecutor next,      final Command<T> command){
        @SuppressWarnings("unchecked") T result=(T)new TransactionTemplate(transactionManager).execute(new TransactionCallback(){
          public Object doInTransaction(          TransactionStatus status){
            return next.execute(command);
          }
        }
);
        return result;
      }
    }
);
  }
  processEngine=configuration.buildProcessEngine();
  return processEngine;
}
