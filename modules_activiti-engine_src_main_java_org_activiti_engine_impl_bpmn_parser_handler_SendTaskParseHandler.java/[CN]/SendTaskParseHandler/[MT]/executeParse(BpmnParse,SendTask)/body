{
  ActivityImpl activity=createActivityOnCurrentScope(bpmnParse,sendTask,BpmnXMLConstants.ELEMENT_TASK_SEND);
  activity.setAsync(sendTask.isAsynchronous());
  activity.setExclusive(!sendTask.isNotExclusive());
  if (StringUtils.isNotEmpty(sendTask.getType())) {
    if (sendTask.getType().equalsIgnoreCase("mail")) {
      validateFieldDeclarationsForEmail(bpmnParse,sendTask,sendTask.getFieldExtensions());
      activity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createMailActivityBehavior(sendTask));
    }
 else     if (sendTask.getType().equalsIgnoreCase("mule")) {
      activity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(sendTask,bpmnParse.getBpmnModel()));
    }
 else {
      bpmnParse.getBpmnModel().addProblem("Invalid usage of type attribute: '" + sendTask.getType() + "'.",sendTask);
    }
  }
 else   if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(sendTask.getImplementationType()) && StringUtils.isNotEmpty(sendTask.getOperationRef())) {
    if (!bpmnParse.getOperations().containsKey(sendTask.getOperationRef())) {
      bpmnParse.getBpmnModel().addProblem(sendTask.getOperationRef() + " does not exist",sendTask);
    }
 else {
      WebServiceActivityBehavior webServiceActivityBehavior=bpmnParse.getActivityBehaviorFactory().createWebServiceActivityBehavior(sendTask);
      Operation operation=bpmnParse.getOperations().get(sendTask.getOperationRef());
      webServiceActivityBehavior.setOperation(operation);
      if (sendTask.getIoSpecification() != null) {
        IOSpecification ioSpecification=bpmnParse.createIOSpecification(sendTask.getIoSpecification());
        webServiceActivityBehavior.setIoSpecification(ioSpecification);
      }
      for (      DataAssociation dataAssociationElement : sendTask.getDataInputAssociations()) {
        AbstractDataAssociation dataAssociation=bpmnParse.createDataInputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataInputAssociation(dataAssociation);
      }
      for (      DataAssociation dataAssociationElement : sendTask.getDataOutputAssociations()) {
        AbstractDataAssociation dataAssociation=bpmnParse.createDataOutputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataOutputAssociation(dataAssociation);
      }
      activity.setActivityBehavior(webServiceActivityBehavior);
    }
  }
 else {
    bpmnParse.getBpmnModel().addProblem("One of the attributes 'type' or 'operation' is mandatory on sendTask.",sendTask);
  }
}
