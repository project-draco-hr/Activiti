{
  final Resource[] resources=new Resource[]{resourceMock1,resourceMock2,resourceMock3,resourceMock4,resourceMock5};
  when(fileMock1.getParentFile()).thenReturn(parentFile1Mock);
  when(fileMock2.getParentFile()).thenReturn(parentFile1Mock);
  when(fileMock3.getParentFile()).thenReturn(parentFile1Mock);
  when(fileMock4.getParentFile()).thenReturn(parentFile1Mock);
  when(fileMock5.getParentFile()).thenReturn(parentFile1Mock);
  classUnderTest.deployResources(deploymentNameHint,resources,repositoryServiceMock);
  verify(repositoryServiceMock,times(1)).createDeployment();
  verify(deploymentBuilderMock,times(1)).enableDuplicateFiltering();
  verify(deploymentBuilderMock,times(1)).name(deploymentNameHint + "." + parentFilename1);
  verify(deploymentBuilderMock,times(1)).addInputStream(eq(resourceName1),isA(InputStream.class));
  verify(deploymentBuilderMock,times(1)).addInputStream(eq(resourceName2),isA(InputStream.class));
  verify(deploymentBuilderMock,times(3)).addZipInputStream(isA(ZipInputStream.class));
  verify(deploymentBuilderMock,times(1)).deploy();
}
