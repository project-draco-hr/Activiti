{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    TestSerializableVariable serializable=new TestSerializableVariable();
    serializable.setSomeField("some value");
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutputStream output=new ObjectOutputStream(buffer);
    output.writeObject(serializable);
    output.close();
    InputStream binaryContent=new ByteArrayInputStream(buffer.toByteArray());
    Map<String,String> additionalFields=new HashMap<String,String>();
    additionalFields.put("name","serializableVariable");
    additionalFields.put("type","serializable");
    additionalFields.put("scope","local");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
    httpPost.setEntity(HttpMultipartHelper.getMultiPartEntity("value","application/x-java-serialized-object",binaryContent,additionalFields));
    CloseableHttpResponse response=executeBinaryRequest(httpPost,HttpStatus.SC_CREATED);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals("serializableVariable",responseNode.get("name").asText());
    assertTrue(responseNode.get("value").isNull());
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("serializable",responseNode.get("type").asText());
    assertNotNull(responseNode.get("valueUrl").isNull());
    assertTrue(responseNode.get("valueUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE_DATA,task.getId(),"serializableVariable")));
    Object variableValue=taskService.getVariableLocal(task.getId(),"serializableVariable");
    assertNotNull(variableValue);
    assertTrue(variableValue instanceof TestSerializableVariable);
    assertEquals("some value",((TestSerializableVariable)variableValue).getSomeField());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
