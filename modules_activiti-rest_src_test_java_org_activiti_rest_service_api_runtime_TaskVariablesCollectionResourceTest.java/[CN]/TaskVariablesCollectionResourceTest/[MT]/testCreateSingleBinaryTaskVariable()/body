{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    InputStream binaryContent=new ByteArrayInputStream("This is binary content".getBytes());
    Map<String,String> additionalFields=new HashMap<String,String>();
    additionalFields.put("name","binaryVariable");
    additionalFields.put("type","binary");
    additionalFields.put("scope","local");
    Representation uploadRepresentation=new HttpMultipartRepresentation("value",binaryContent,additionalFields);
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
    Representation response=client.post(uploadRepresentation);
    assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("binaryVariable",responseNode.get("name").asText());
    assertTrue(responseNode.get("value").isNull());
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("binary",responseNode.get("type").asText());
    assertNotNull(responseNode.get("valueUrl").isNull());
    assertTrue(responseNode.get("valueUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE_DATA,task.getId(),"binaryVariable")));
    Object variableValue=taskService.getVariableLocal(task.getId(),"binaryVariable");
    assertNotNull(variableValue);
    assertTrue(variableValue instanceof byte[]);
    assertEquals("This is binary content",new String((byte[])variableValue));
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
