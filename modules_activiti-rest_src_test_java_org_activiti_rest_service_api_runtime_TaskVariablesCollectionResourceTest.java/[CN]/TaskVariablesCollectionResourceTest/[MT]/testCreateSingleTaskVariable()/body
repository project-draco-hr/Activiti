{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  ArrayNode requestNode=objectMapper.createArrayNode();
  ObjectNode variableNode=requestNode.addObject();
  variableNode.put("name","myVariable");
  variableNode.put("value","simple string value");
  variableNode.put("scope","local");
  variableNode.put("type","string");
  HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent()).get(0);
  assertNotNull(responseNode);
  assertEquals("myVariable",responseNode.get("name").asText());
  assertEquals("simple string value",responseNode.get("value").asText());
  assertEquals("local",responseNode.get("scope").asText());
  assertEquals("string",responseNode.get("type").asText());
  assertNull(responseNode.get("valueUrl"));
  assertTrue(taskService.hasVariableLocal(task.getId(),"myVariable"));
  assertEquals("simple string value",taskService.getVariableLocal(task.getId(),"myVariable"));
  variableNode.put("name","myVariable");
  variableNode.put("value","Another simple string value");
  variableNode.put("scope","global");
  variableNode.put("type","string");
  httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  responseNode=objectMapper.readTree(response.getEntity().getContent()).get(0);
  assertNotNull(responseNode);
  assertEquals("myVariable",responseNode.get("name").asText());
  assertEquals("Another simple string value",responseNode.get("value").asText());
  assertEquals("global",responseNode.get("scope").asText());
  assertEquals("string",responseNode.get("type").asText());
  assertNull(responseNode.get("valueUrl"));
  assertTrue(runtimeService.hasVariable(task.getExecutionId(),"myVariable"));
  assertEquals("Another simple string value",runtimeService.getVariableLocal(task.getExecutionId(),"myVariable"));
  variableNode.removeAll();
  variableNode.put("name","scopelessVariable");
  variableNode.put("value","simple string value");
  variableNode.put("type","string");
  httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLES_COLLECTION,task.getId()));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  responseNode=objectMapper.readTree(response.getEntity().getContent()).get(0);
  assertNotNull(responseNode);
  assertEquals("scopelessVariable",responseNode.get("name").asText());
  assertEquals("simple string value",responseNode.get("value").asText());
  assertEquals("local",responseNode.get("scope").asText());
  assertEquals("string",responseNode.get("type").asText());
  assertNull(responseNode.get("valueUrl"));
  assertTrue(taskService.hasVariableLocal(task.getId(),"scopelessVariable"));
  assertEquals("simple string value",taskService.getVariableLocal(task.getId(),"scopelessVariable"));
}
