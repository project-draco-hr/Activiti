{
  ExecutionEntity execution=eventSubscription.getExecution();
  ActivityImpl activity=eventSubscription.getActivity();
  if (activity == null) {
    throw new ActivitiException("Error while sending signal for event subscription '" + eventSubscription.getId() + "': "+ "no activity associated with event subscription");
  }
  if (payload instanceof Map) {
    @SuppressWarnings("unchecked") Map<String,Object> processVariables=(Map<String,Object>)payload;
    execution.setVariables(processVariables);
  }
  ActivityBehavior activityBehavior=activity.getActivityBehavior();
  if (activityBehavior instanceof BoundaryEventActivityBehavior || activityBehavior instanceof EventSubProcessStartEventActivityBehavior) {
    try {
      activityBehavior.execute(execution);
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new ActivitiException("exception while sending signal for event subscription '" + eventSubscription + "':"+ e.getMessage(),e);
    }
  }
 else {
    if (!activity.equals(execution.getActivity())) {
      execution.setActivity(activity);
    }
    execution.signal("signal",null);
  }
}
