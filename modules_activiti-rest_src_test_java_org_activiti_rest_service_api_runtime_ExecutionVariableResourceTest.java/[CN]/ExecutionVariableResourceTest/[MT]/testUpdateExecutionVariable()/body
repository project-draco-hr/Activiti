{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("processOne",Collections.singletonMap("overlappingVariable",(Object)"processValue"));
  runtimeService.setVariableLocal(processInstance.getId(),"myVar","processValue");
  Execution childExecution=runtimeService.createExecutionQuery().parentId(processInstance.getId()).singleResult();
  assertNotNull(childExecution);
  runtimeService.setVariableLocal(childExecution.getId(),"myVar","childValue");
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("name","myVar");
  requestNode.put("value","updatedValue");
  requestNode.put("type","string");
  HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_VARIABLE,childExecution.getId(),"myVar"));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  CloseableHttpResponse response=executeRequest(httpPut,HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals("updatedValue",responseNode.get("value").asText());
  assertEquals("local",responseNode.get("scope").asText());
  assertEquals("processValue",runtimeService.getVariable(processInstance.getId(),"myVar"));
  assertEquals("updatedValue",runtimeService.getVariableLocal(childExecution.getId(),"myVar"));
  requestNode=objectMapper.createObjectNode();
  requestNode.put("name","myVar");
  requestNode.put("value","updatedValueGlobal");
  requestNode.put("type","string");
  requestNode.put("scope","global");
  httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_VARIABLE,childExecution.getId(),"myVar"));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeRequest(httpPut,HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals("updatedValueGlobal",responseNode.get("value").asText());
  assertEquals("global",responseNode.get("scope").asText());
  assertEquals("updatedValueGlobal",runtimeService.getVariable(processInstance.getId(),"myVar"));
  assertEquals("updatedValue",runtimeService.getVariableLocal(childExecution.getId(),"myVar"));
  requestNode.put("name","unexistingVariable");
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeRequest(httpPut,HttpStatus.SC_BAD_REQUEST);
  closeResponse(response);
  httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_VARIABLE,childExecution.getId(),"unexistingVariable"));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeRequest(httpPut,HttpStatus.SC_NOT_FOUND);
  closeResponse(response);
}
