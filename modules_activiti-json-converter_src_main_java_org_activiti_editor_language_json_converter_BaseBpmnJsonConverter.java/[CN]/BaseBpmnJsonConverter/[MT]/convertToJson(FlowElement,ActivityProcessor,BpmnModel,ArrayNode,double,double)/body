{
  this.model=model;
  this.processor=processor;
  this.subProcessX=subProcessX;
  this.subProcessY=subProcessY;
  this.shapesArrayNode=shapesArrayNode;
  GraphicInfo graphicInfo=model.getGraphicInfo(flowElement.getId());
  String stencilId=null;
  if (flowElement instanceof ServiceTask) {
    ServiceTask serviceTask=(ServiceTask)flowElement;
    if ("mail".equalsIgnoreCase(serviceTask.getType())) {
      stencilId=STENCIL_TASK_MAIL;
    }
 else {
      stencilId=getStencilId(flowElement);
    }
  }
 else {
    stencilId=getStencilId(flowElement);
  }
  flowElementNode=BpmnJsonConverterUtil.createChildShape(flowElement.getId(),stencilId,graphicInfo.x - subProcessX + graphicInfo.width,graphicInfo.y - subProcessY + graphicInfo.height,graphicInfo.x - subProcessX,graphicInfo.y - subProcessY);
  shapesArrayNode.add(flowElementNode);
  ObjectNode propertiesNode=objectMapper.createObjectNode();
  propertiesNode.put(PROPERTY_OVERRIDE_ID,flowElement.getId());
  if (StringUtils.isNotEmpty(flowElement.getName())) {
    propertiesNode.put(PROPERTY_NAME,flowElement.getName());
  }
  if (StringUtils.isNotEmpty(flowElement.getDocumentation())) {
    propertiesNode.put(PROPERTY_DOCUMENTATION,flowElement.getDocumentation());
  }
  convertElementToJson(propertiesNode,flowElement);
  flowElementNode.put(EDITOR_SHAPE_PROPERTIES,propertiesNode);
  ArrayNode outgoingArrayNode=objectMapper.createArrayNode();
  if (flowElement instanceof FlowNode) {
    FlowNode flowNode=(FlowNode)flowElement;
    for (    SequenceFlow sequenceFlow : flowNode.getOutgoingFlows()) {
      outgoingArrayNode.add(BpmnJsonConverterUtil.createResourceNode(sequenceFlow.getId()));
    }
  }
  if (flowElement instanceof Activity) {
    Activity activity=(Activity)flowElement;
    for (    BoundaryEvent boundaryEvent : activity.getBoundaryEvents()) {
      outgoingArrayNode.add(BpmnJsonConverterUtil.createResourceNode(boundaryEvent.getId()));
    }
    if (activity.isAsynchronous()) {
      propertiesNode.put(PROPERTY_ASYNCHRONOUS,PROPERTY_VALUE_YES);
    }
    if (activity.isNotExclusive()) {
      propertiesNode.put(PROPERTY_EXCLUSIVE,PROPERTY_VALUE_NO);
    }
    if (activity.getLoopCharacteristics() != null) {
      MultiInstanceLoopCharacteristics loopDef=activity.getLoopCharacteristics();
      if (StringUtils.isNotEmpty(loopDef.getLoopCardinality()) || StringUtils.isNotEmpty(loopDef.getInputDataItem()) || StringUtils.isNotEmpty(loopDef.getCompletionCondition())) {
        if (loopDef.isSequential() == false) {
          propertiesNode.put(PROPERTY_MULTIINSTANCE_SEQUENTIAL,PROPERTY_VALUE_NO);
        }
        if (StringUtils.isNotEmpty(loopDef.getLoopCardinality())) {
          propertiesNode.put(PROPERTY_MULTIINSTANCE_CARDINALITY,loopDef.getLoopCardinality());
        }
        if (StringUtils.isNotEmpty(loopDef.getInputDataItem())) {
          propertiesNode.put(PROPERTY_MULTIINSTANCE_COLLECTION,loopDef.getInputDataItem());
        }
        if (StringUtils.isNotEmpty(loopDef.getElementVariable())) {
          propertiesNode.put(PROPERTY_MULTIINSTANCE_VARIABLE,loopDef.getElementVariable());
        }
        if (StringUtils.isNotEmpty(loopDef.getCompletionCondition())) {
          propertiesNode.put(PROPERTY_MULTIINSTANCE_CONDITION,loopDef.getCompletionCondition());
        }
      }
    }
    if (activity instanceof UserTask) {
      addListeners(((UserTask)activity).getTaskListeners(),false,propertiesNode);
    }
 else {
      addListeners(activity.getExecutionListeners(),true,propertiesNode);
    }
  }
  flowElementNode.put("outgoing",outgoingArrayNode);
}
