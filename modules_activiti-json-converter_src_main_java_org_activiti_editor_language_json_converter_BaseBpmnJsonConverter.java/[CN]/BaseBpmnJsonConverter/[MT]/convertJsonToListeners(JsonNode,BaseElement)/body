{
  JsonNode listenersNode=null;
  String propertyName=null;
  String eventType=null;
  String listenerClass=null;
  String listenerExpression=null;
  String listenerDelegateExpression=null;
  String listenerFields=null;
  String listenerFieldName=null;
  String listenerFieldValue=null;
  String listenerFieldExpression=null;
  JsonNode listenerFieldsNode=null;
  JsonNode listenerFieldsArrayNode=null;
  if (element instanceof UserTask) {
    propertyName=PROPERTY_TASK_LISTENERS;
    eventType=PROPERTY_TASK_LISTENER_EVENT;
    listenerClass=PROPERTY_TASK_LISTENER_CLASS;
    listenerExpression=PROPERTY_TASK_LISTENER_EXPRESSION;
    listenerDelegateExpression=PROPERTY_TASK_LISTENER_DELEGATEEXPRESSION;
    listenerFields=PROPERTY_TASK_LISTENER_FIELDS;
    listenerFieldName=PROPERTY_TASK_LISTENER_FIELD_NAME;
    listenerFieldValue=PROPERTY_TASK_LISTENER_FIELD_VALUE;
    listenerFieldExpression=PROPERTY_TASK_LISTENER_EXPRESSION;
  }
 else {
    propertyName=PROPERTY_EXECUTION_LISTENERS;
    eventType=PROPERTY_EXECUTION_LISTENER_EVENT;
    listenerClass=PROPERTY_EXECUTION_LISTENER_CLASS;
    listenerExpression=PROPERTY_EXECUTION_LISTENER_EXPRESSION;
    listenerDelegateExpression=PROPERTY_EXECUTION_LISTENER_DELEGATEEXPRESSION;
    listenerFields=PROPERTY_EXECUTION_LISTENER_FIELDS;
    listenerFieldName=PROPERTY_EXECUTION_LISTENER_FIELD_NAME;
    listenerFieldValue=PROPERTY_EXECUTION_LISTENER_FIELD_VALUE;
    listenerFieldExpression=PROPERTY_EXECUTION_LISTENER_EXPRESSION;
  }
  listenersNode=getProperty(propertyName,objectNode);
  if (listenersNode != null) {
    if (listenersNode.isValueNode() && StringUtils.isNotEmpty(listenersNode.asText())) {
      try {
        listenersNode=objectMapper.readTree(listenersNode.asText());
      }
 catch (      Exception e) {
        LOGGER.info("Listeners node can not be read",e);
      }
    }
    JsonNode itemsArrayNode=listenersNode.get(EDITOR_PROPERTIES_GENERAL_ITEMS);
    if (itemsArrayNode != null) {
      for (      JsonNode itemNode : itemsArrayNode) {
        JsonNode typeNode=itemNode.get(eventType);
        if (typeNode != null && StringUtils.isNotEmpty(typeNode.asText())) {
          ActivitiListener listener=new ActivitiListener();
          listener.setEvent(typeNode.asText());
          if (StringUtils.isNotEmpty(getValueAsString(listenerClass,itemNode))) {
            listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_CLASS);
            listener.setImplementation(getValueAsString(listenerClass,itemNode));
          }
 else           if (StringUtils.isNotEmpty(getValueAsString(listenerExpression,itemNode))) {
            listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION);
            listener.setImplementation(getValueAsString(listenerExpression,itemNode));
          }
 else           if (StringUtils.isNotEmpty(getValueAsString(listenerDelegateExpression,itemNode))) {
            listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION);
            listener.setImplementation(getValueAsString(listenerDelegateExpression,itemNode));
          }
          listenerFieldsNode=itemNode.get(listenerFields);
          if (listenerFieldsNode != null && StringUtils.isNotEmpty(listenerFieldsNode.asText()) && !("undefined".equals(listenerFieldsNode.asText()))) {
            if (listenerFieldsNode.isValueNode()) {
              try {
                listenerFieldsNode=objectMapper.readTree(listenerFieldsNode.asText());
              }
 catch (              Exception e) {
                LOGGER.info("Listener fields node can not be read",e);
              }
            }
          }
          if (listenerFieldsNode != null) {
            listenerFieldsArrayNode=listenerFieldsNode.get(EDITOR_PROPERTIES_GENERAL_ITEMS);
            List<FieldExtension> fields=new ArrayList<FieldExtension>();
            if (listenerFieldsArrayNode != null) {
              for (              JsonNode fieldNode : listenerFieldsArrayNode) {
                JsonNode fieldNameNode=fieldNode.get(listenerFieldName);
                if (fieldNameNode != null && StringUtils.isNotEmpty(fieldNameNode.asText())) {
                  FieldExtension field=new FieldExtension();
                  field.setFieldName(fieldNameNode.asText());
                  field.setStringValue(getValueAsString(listenerFieldValue,fieldNode));
                  field.setExpression(getValueAsString(listenerFieldExpression,fieldNode));
                  fields.add(field);
                }
              }
            }
            listener.setFieldExtensions(fields);
          }
          if (element instanceof Process) {
            ((Process)element).getExecutionListeners().add(listener);
          }
 else           if (element instanceof SequenceFlow) {
            ((SequenceFlow)element).getExecutionListeners().add(listener);
          }
 else           if (element instanceof UserTask) {
            ((UserTask)element).getTaskListeners().add(listener);
          }
 else           if (element instanceof Activity) {
            ((Activity)element).getExecutionListeners().add(listener);
          }
        }
      }
    }
  }
}
