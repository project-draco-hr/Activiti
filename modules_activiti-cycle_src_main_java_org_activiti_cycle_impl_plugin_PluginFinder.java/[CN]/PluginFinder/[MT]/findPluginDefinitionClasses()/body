{
  List<Class<? extends ActivitiCyclePluginDefinition>> result=new ArrayList<Class<? extends ActivitiCyclePluginDefinition>>();
  try {
    AnnotationDB db=new AnnotationDB();
    URL[] urls=null;
    if (servletContext == null) {
      urls=ClasspathUrlFinder.findClassPaths();
      logger.log(Level.INFO,"Activiti Cycle Plugin finder uses normal classpath");
    }
 else {
      urls=WarUrlFinder.findWebInfLibClasspaths(servletContext);
    }
    db.scanArchives(urls);
    Set<String> connectors=db.getAnnotationIndex().get(ActivitiCyclePlugin.class.getName());
    if (connectors == null) {
      logger.log(Level.WARNING,"Couldn't find any Cycle Plugin in the (used " + (servletContext == null ? "normal classpath" : "servlet context classpath") + "), use default plugins");
      result.add(SignavioPluginDefinition.class);
      result.add(FileSystemPluginDefinition.class);
      result.add(DemoConnectorPluginDefinition.class);
    }
 else {
      for (      String pluginClass : connectors) {
        Class<?> cyclePluginClass=this.getClass().getClassLoader().loadClass(pluginClass);
        if (ActivitiCyclePluginDefinition.class.isAssignableFrom(cyclePluginClass)) {
          logger.log(Level.INFO,"Found Activiti Cycle plugin class: " + cyclePluginClass.getName());
          result.add((Class<? extends ActivitiCyclePluginDefinition>)cyclePluginClass);
        }
 else {
          logger.log(Level.SEVERE,"Found plugin class with " + ActivitiCyclePlugin.class.getSimpleName() + " annotation but without implementing the "+ ActivitiCyclePluginDefinition.class.getSimpleName()+ " interface");
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return result;
}
