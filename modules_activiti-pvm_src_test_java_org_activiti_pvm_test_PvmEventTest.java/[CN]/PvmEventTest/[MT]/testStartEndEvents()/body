{
  EventCollector eventCollector=new EventCollector();
  PvmProcessDefinition processDefinition=new ProcessDefinitionBuilder("events").eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).createActivity("start").initial().behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).startTransition("end").eventListener(eventCollector).endTransition().endActivity().createActivity("end").behavior(new End()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).endActivity().buildProcessDefinition();
  PvmProcessInstance processInstance=processDefinition.createProcessInstance();
  processInstance.start();
  List<String> expectedEvents=new ArrayList<String>();
  expectedEvents.add("start on ProcessDefinition(events)");
  expectedEvents.add("end on Activity(start)");
  expectedEvents.add("take on (start)-->(end)");
  expectedEvents.add("start on Activity(end)");
  expectedEvents.add("end on ProcessDefinition(events)");
  assertEquals(expectedEvents,eventCollector.events);
}
