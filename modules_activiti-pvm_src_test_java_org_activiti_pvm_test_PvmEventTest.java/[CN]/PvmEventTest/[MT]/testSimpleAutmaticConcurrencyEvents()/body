{
  EventCollector eventCollector=new EventCollector();
  PvmProcessDefinition processDefinition=new ProcessDefinitionBuilder().createActivity("start").initial().behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("fork").endActivity().createActivity("fork").behavior(new ParallelGateway()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("c1").transition("c2").endActivity().createActivity("c1").behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("join").endActivity().createActivity("c2").behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("join").endActivity().createActivity("join").behavior(new ParallelGateway()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("end").endActivity().createActivity("end").behavior(new End()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).endActivity().buildProcessDefinition();
  PvmProcessInstance processInstance=processDefinition.createProcessInstance();
  processInstance.start();
  List<String> expectedEvents=new ArrayList<String>();
  expectedEvents.add("end on Activity(start)");
  expectedEvents.add("start on Activity(fork)");
  expectedEvents.add("end on Activity(fork)");
  expectedEvents.add("start on Activity(c1)");
  expectedEvents.add("end on Activity(c1)");
  expectedEvents.add("start on Activity(join)");
  expectedEvents.add("end on Activity(fork)");
  expectedEvents.add("start on Activity(c2)");
  expectedEvents.add("end on Activity(c2)");
  expectedEvents.add("start on Activity(join)");
  expectedEvents.add("end on Activity(join)");
  expectedEvents.add("start on Activity(end)");
  assertEquals(expectedEvents,eventCollector.events);
}
