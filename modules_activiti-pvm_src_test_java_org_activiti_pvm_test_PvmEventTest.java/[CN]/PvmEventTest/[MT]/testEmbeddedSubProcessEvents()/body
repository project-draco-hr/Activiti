{
  EventCollector eventCollector=new EventCollector();
  PvmProcessDefinition processDefinition=new ProcessDefinitionBuilder().createActivity("start").initial().behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("embeddedsubprocess").endActivity().createActivity("embeddedsubprocess").scope().behavior(new EmbeddedSubProcess()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).createActivity("startInside").behavior(new Automatic()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).transition("endInside").endActivity().createActivity("endInside").behavior(new End()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).endActivity().transition("end").endActivity().createActivity("end").behavior(new WaitState()).eventListener(EventListener.EVENTNAME_START,eventCollector).eventListener(EventListener.EVENTNAME_END,eventCollector).endActivity().buildProcessDefinition();
  PvmProcessInstance processInstance=processDefinition.createProcessInstance();
  processInstance.start();
  for (  String event : eventCollector.events) {
    System.err.println(event);
  }
  List<String> expectedEvents=new ArrayList<String>();
  expectedEvents.add("end on Activity(start)");
  expectedEvents.add("start on Activity(embeddedsubprocess)");
  expectedEvents.add("end on Activity(startInside)");
  expectedEvents.add("start on Activity(endInside)");
  expectedEvents.add("end on Activity(embeddedsubprocess)");
  expectedEvents.add("start on Activity(end)");
  assertEquals(expectedEvents,eventCollector.events);
}
