{
  Map<String,Object> vars=new HashMap<String,Object>();
  vars.put("doubleVar",12345.6789);
  ProcessInstance processInstance1=runtimeService.startProcessInstanceByKey("oneTaskProcess",vars);
  vars=new HashMap<String,Object>();
  vars.put("doubleVar",12345.6789);
  vars.put("doubleVar2",9876.54321);
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",vars);
  vars=new HashMap<String,Object>();
  vars.put("doubleVar",55555.5555);
  ProcessInstance processInstance3=runtimeService.startProcessInstanceByKey("oneTaskProcess",vars);
  ProcessInstanceQuery query=runtimeService.createProcessInstanceQuery().variableValue("doubleVar",12345.6789);
  List<ProcessInstance> processInstances=query.list();
  Assert.assertNotNull(processInstances);
  Assert.assertEquals(2,processInstances.size());
  query=runtimeService.createProcessInstanceQuery().variableValue("doubleVar",12345.6789).variableValue("doubleVar2",9876.54321);
  ProcessInstance resultInstance=query.singleResult();
  Assert.assertNotNull(resultInstance);
  Assert.assertEquals(processInstance2.getId(),resultInstance.getId());
  resultInstance=runtimeService.createProcessInstanceQuery().variableValue("doubleVar",9999.99).singleResult();
  Assert.assertNull(resultInstance);
  resultInstance=runtimeService.createProcessInstanceQuery().variableValueNot("doubleVar",12345.6789).singleResult();
  Assert.assertNotNull(resultInstance);
  Assert.assertEquals(processInstance3.getId(),resultInstance.getId());
  resultInstance=runtimeService.createProcessInstanceQuery().variableValueGreaterThan("doubleVar",44444.4444).singleResult();
  Assert.assertNotNull(resultInstance);
  Assert.assertEquals(processInstance3.getId(),resultInstance.getId());
  Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().variableValueGreaterThan("doubleVar",55555.5555).count());
  Assert.assertEquals(3,runtimeService.createProcessInstanceQuery().variableValueGreaterThan("doubleVar",1.234).count());
  resultInstance=runtimeService.createProcessInstanceQuery().variableValueGreaterThanOrEqual("doubleVar",44444.4444).singleResult();
  Assert.assertNotNull(resultInstance);
  Assert.assertEquals(processInstance3.getId(),resultInstance.getId());
  resultInstance=runtimeService.createProcessInstanceQuery().variableValueGreaterThanOrEqual("doubleVar",55555.5555).singleResult();
  Assert.assertNotNull(resultInstance);
  Assert.assertEquals(processInstance3.getId(),resultInstance.getId());
  Assert.assertEquals(3,runtimeService.createProcessInstanceQuery().variableValueGreaterThanOrEqual("doubleVar",1.234).count());
  processInstances=runtimeService.createProcessInstanceQuery().variableValueLessThan("doubleVar",55555.5555).list();
  Assert.assertEquals(2,processInstances.size());
  List<String> expecedIds=Arrays.asList(processInstance1.getId(),processInstance2.getId());
  List<String> ids=new ArrayList<String>(Arrays.asList(processInstances.get(0).getId(),processInstances.get(1).getId()));
  ids.removeAll(expecedIds);
  assertTrue(ids.isEmpty());
  Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().variableValueLessThan("doubleVar",12345.6789).count());
  Assert.assertEquals(3,runtimeService.createProcessInstanceQuery().variableValueLessThan("doubleVar",66666.6666).count());
  processInstances=runtimeService.createProcessInstanceQuery().variableValueLessThanOrEqual("doubleVar",55555.5555).list();
  Assert.assertEquals(3,processInstances.size());
  Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().variableValueLessThanOrEqual("doubleVar",12344.6789).count());
  runtimeService.deleteProcessInstance(processInstance1.getId(),"test");
  runtimeService.deleteProcessInstance(processInstance2.getId(),"test");
  runtimeService.deleteProcessInstance(processInstance3.getId(),"test");
}
