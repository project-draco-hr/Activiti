{
  final FileResource stream=new FileResource(new File(""),ExplorerApp.get()){
    private static final long serialVersionUID=1L;
    @Override public DownloadStream getStream(){
      DownloadStream ds=null;
      try {
        byte[] bpmnBytes=null;
        String filename=null;
        if (SimpleTableEditorConstants.TABLE_EDITOR_CATEGORY.equals(modelData.getCategory())) {
          WorkflowDefinition workflowDefinition=ExplorerApp.get().getSimpleWorkflowJsonConverter().readWorkflowDefinition(repositoryService.getModelEditorSource(modelData.getId()));
          filename=workflowDefinition.getName();
          WorkflowDefinitionConversion conversion=ExplorerApp.get().getWorkflowDefinitionConversionFactory().createWorkflowDefinitionConversion(workflowDefinition);
          bpmnBytes=conversion.getbpm20Xml().getBytes("utf-8");
        }
 else {
          JsonNode editorNode=new ObjectMapper().readTree(repositoryService.getModelEditorSource(modelData.getId()));
          BpmnJsonConverter jsonConverter=new BpmnJsonConverter();
          BpmnModel model=jsonConverter.convertToBpmnModel(editorNode);
          filename=model.getMainProcess().getId() + ".bpmn20.xml";
          bpmnBytes=new BpmnXMLConverter().convertToXML(model);
        }
        ByteArrayInputStream in=new ByteArrayInputStream(bpmnBytes);
        ds=new DownloadStream(in,"application/xml",filename);
        ds.setParameter("Content-Disposition","attachment; filename=" + filename);
      }
 catch (      Exception e) {
        LOGGER.error("failed to export model to BPMN XML",e);
        ExplorerApp.get().getNotificationManager().showErrorNotification(Messages.PROCESS_TOXML_FAILED,e);
      }
      return ds;
    }
  }
;
  stream.setCacheTime(0);
  ExplorerApp.get().getMainWindow().open(stream);
}
