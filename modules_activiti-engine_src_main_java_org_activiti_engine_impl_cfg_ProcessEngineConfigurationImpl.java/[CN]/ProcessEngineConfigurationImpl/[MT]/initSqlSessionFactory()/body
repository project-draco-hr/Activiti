{
  if (sqlSessionFactory == null) {
    InputStream inputStream=null;
    try {
      inputStream=getMyBatisXmlConfigurationSteam();
      Environment environment=new Environment("default",transactionFactory,dataSource);
      Reader reader=new InputStreamReader(inputStream);
      Properties properties=new Properties();
      properties.put("prefix",databaseTablePrefix);
      if (databaseType != null) {
        properties.put("limitBefore",DbSqlSessionFactory.databaseSpecificLimitBeforeStatements.get(databaseType));
        properties.put("limitAfter",DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
        properties.put("limitBetween",DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
        properties.put("limitOuterJoinBetween",DbSqlSessionFactory.databaseOuterJoinLimitBetweenStatements.get(databaseType));
        properties.put("orderBy",DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
        properties.put("limitBeforeNativeQuery",ObjectUtils.toString(DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType)));
      }
      Configuration configuration=initMybatisConfiguration(environment,reader,properties);
      sqlSessionFactory=new DefaultSqlSessionFactory(configuration);
    }
 catch (    Exception e) {
      throw new ActivitiException("Error while building ibatis SqlSessionFactory: " + e.getMessage(),e);
    }
 finally {
      IoUtil.closeSilently(inputStream);
    }
  }
}
