{
  List<BpmnParseHandler> bpmnParserHandlers=new ArrayList<BpmnParseHandler>();
  bpmnParserHandlers.add(new BoundaryEventParseHandler());
  bpmnParserHandlers.add(new BusinessRuleParseHandler());
  bpmnParserHandlers.add(new CallActivityParseHandler());
  bpmnParserHandlers.add(new CancelEventDefinitionParseHandler());
  bpmnParserHandlers.add(new CompensateEventDefinitionParseHandler());
  bpmnParserHandlers.add(new EndEventParseHandler());
  bpmnParserHandlers.add(new ErrorEventDefinitionParseHandler());
  bpmnParserHandlers.add(new EventBasedGatewayParseHandler());
  bpmnParserHandlers.add(new ExclusiveGatewayParseHandler());
  bpmnParserHandlers.add(new InclusiveGatewayParseHandler());
  bpmnParserHandlers.add(new IntermediateCatchEventParseHandler());
  bpmnParserHandlers.add(new IntermediateThrowEventParseHandler());
  bpmnParserHandlers.add(new ManualTaskParseHandler());
  bpmnParserHandlers.add(new MessageEventDefinitionParseHandler());
  bpmnParserHandlers.add(new ParallelGatewayParseHandler());
  bpmnParserHandlers.add(new ProcessParseHandler());
  bpmnParserHandlers.add(new ReceiveTaskParseHandler());
  bpmnParserHandlers.add(new ScriptTaskParseHandler());
  bpmnParserHandlers.add(new SendTaskParseHandler());
  bpmnParserHandlers.add(new SequenceFlowParseHandler());
  bpmnParserHandlers.add(new ServiceTaskParseHandler());
  bpmnParserHandlers.add(new SignalEventDefinitionParseHandler());
  bpmnParserHandlers.add(new StartEventParseHandler());
  bpmnParserHandlers.add(new SubProcessParseHandler());
  bpmnParserHandlers.add(new TaskParseHandler());
  bpmnParserHandlers.add(new TimerEventDefinitionParseHandler());
  bpmnParserHandlers.add(new TransactionParseHandler());
  bpmnParserHandlers.add(new UserTaskParseHandler());
  if (customDefaultBpmnParseHandlers != null) {
    Map<Class<?>,BpmnParseHandler> customParseHandlerMap=new HashMap<Class<?>,BpmnParseHandler>();
    for (    BpmnParseHandler bpmnParseHandler : customDefaultBpmnParseHandlers) {
      for (      Class<?> handledType : bpmnParseHandler.getHandledTypes()) {
        customParseHandlerMap.put(handledType,bpmnParseHandler);
      }
    }
    for (int i=0; i < bpmnParserHandlers.size(); i++) {
      BpmnParseHandler defaultBpmnParseHandler=bpmnParserHandlers.get(i);
      if (defaultBpmnParseHandler.getHandledTypes().size() != 1) {
        StringBuilder supportedTypes=new StringBuilder();
        for (        Class<?> type : defaultBpmnParseHandler.getHandledTypes()) {
          supportedTypes.append(" " + type.getCanonicalName() + " ");
        }
        throw new ActivitiException("The default BPMN parse handlers should only support one type, but " + defaultBpmnParseHandler.getClass() + " supports "+ supportedTypes.toString()+ ". This is likely a programmatic error");
      }
 else {
        Class<?> handledType=defaultBpmnParseHandler.getHandledTypes().iterator().next();
        if (customParseHandlerMap.containsKey(handledType)) {
          BpmnParseHandler newBpmnParseHandler=customParseHandlerMap.get(handledType);
          log.info("Replacing default BpmnParseHandler " + defaultBpmnParseHandler.getClass().getName() + " with "+ newBpmnParseHandler.getClass().getName());
          bpmnParserHandlers.set(i,newBpmnParseHandler);
        }
      }
    }
  }
  for (  BpmnParseHandler handler : getDefaultHistoryParseHandlers()) {
    bpmnParserHandlers.add(handler);
  }
  return bpmnParserHandlers;
}
