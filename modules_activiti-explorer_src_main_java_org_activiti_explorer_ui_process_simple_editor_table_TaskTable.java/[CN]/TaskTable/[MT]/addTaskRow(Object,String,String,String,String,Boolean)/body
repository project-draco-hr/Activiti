{
  Object newItemId=null;
  if (previousTaskItemId == null) {
    newItemId=addItem();
  }
 else {
    newItemId=addItemAfter(previousTaskItemId);
  }
  Item newItem=getItem(newItemId);
  newItem.getItemProperty(ID_NAME).setValue(taskName == null ? "my task" : taskName);
  ComboBox assigneeComboBox=new ComboBox();
  assigneeComboBox.setNullSelectionAllowed(true);
  if (taskAssignee == null) {
    assigneeComboBox.setValue(null);
  }
 else {
    assigneeComboBox.setValue(taskAssignee);
  }
  for (  User user : ProcessEngines.getDefaultProcessEngine().getIdentityService().createUserQuery().orderByUserFirstName().asc().list()) {
    assigneeComboBox.addItem(user.getId());
    assigneeComboBox.setItemCaption(user.getId(),user.getFirstName() + " " + user.getLastName());
  }
  newItem.getItemProperty(ID_ASSIGNEE).setValue(assigneeComboBox);
  ComboBox groupComboBox=new ComboBox();
  groupComboBox.setNullSelectionAllowed(true);
  for (  Group group : ProcessEngines.getDefaultProcessEngine().getIdentityService().createGroupQuery().orderByGroupName().asc().list()) {
    groupComboBox.addItem(group.getId());
    groupComboBox.setItemCaption(group.getId(),group.getName());
  }
  if (taskGroups != null) {
    groupComboBox.select(taskGroups);
  }
  newItem.getItemProperty(ID_GROUPS).setValue(groupComboBox);
  TextField descriptionTextField=new TextField();
  descriptionTextField.setColumns(16);
  descriptionTextField.setRows(1);
  if (taskDescription != null) {
    descriptionTextField.setValue(taskDescription);
  }
  newItem.getItemProperty(ID_DESCRIPTION).setValue(descriptionTextField);
  CheckBox startWithPreviousCheckBox=new CheckBox(i18nManager.getMessage(Messages.PROCESS_EDITOR_TASK_START_WITH_PREVIOUS));
  startWithPreviousCheckBox.setValue(startWithPrevious == null ? false : startWithPrevious);
  newItem.getItemProperty(ID_START_WITH_PREVIOUS).setValue(startWithPreviousCheckBox);
  newItem.getItemProperty(ID_ACTIONS).setValue(generateActionButtons(newItemId));
  return newItemId;
}
