{
  ProcessInstance pi=null;
  try {
    pi=runtimeService.startProcessInstanceByKey("oneTaskProcess");
    identityService.setAuthenticatedUserId("kermit");
    Comment comment=taskService.addComment(null,pi.getId(),"This is a comment...");
    identityService.setAuthenticatedUserId(null);
    CloseableHttpResponse response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT_COLLECTION,pi.getId())),HttpStatus.SC_OK);
    assertEquals(HttpStatus.SC_OK,response.getStatusLine().getStatusCode());
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertTrue(responseNode.isArray());
    assertEquals(1,responseNode.size());
    ObjectNode commentNode=(ObjectNode)responseNode.get(0);
    assertEquals("kermit",commentNode.get("author").textValue());
    assertEquals("This is a comment...",commentNode.get("message").textValue());
    assertEquals(comment.getId(),commentNode.get("id").textValue());
    assertTrue(commentNode.get("processInstanceUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,pi.getId(),comment.getId())));
    assertEquals(pi.getProcessInstanceId(),commentNode.get("processInstanceId").asText());
    assertTrue(commentNode.get("taskUrl").isNull());
    assertTrue(commentNode.get("taskId").isNull());
    closeResponse(executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COMMENT_COLLECTION,"unexistingtask")),HttpStatus.SC_NOT_FOUND));
  }
  finally {
    if (pi != null) {
      List<Comment> comments=taskService.getProcessInstanceComments(pi.getId());
      for (      Comment c : comments) {
        taskService.deleteComment(c.getId());
      }
    }
  }
}
