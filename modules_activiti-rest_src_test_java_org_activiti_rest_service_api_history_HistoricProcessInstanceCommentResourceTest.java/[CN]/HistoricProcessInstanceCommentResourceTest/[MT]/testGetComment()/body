{
  ProcessInstance pi=null;
  try {
    pi=runtimeService.startProcessInstanceByKey("oneTaskProcess");
    identityService.setAuthenticatedUserId("kermit");
    Comment comment=taskService.addComment(null,pi.getId(),"This is a comment...");
    identityService.setAuthenticatedUserId(null);
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,pi.getId(),comment.getId()));
    Representation response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("kermit",responseNode.get("author").getTextValue());
    assertEquals("This is a comment...",responseNode.get("message").getTextValue());
    assertEquals(comment.getId(),responseNode.get("id").getTextValue());
    assertTrue(responseNode.get("url").getTextValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,pi.getId(),comment.getId())));
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,"unexistinginstance","123"));
    try {
      client.get();
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_NOT_FOUND,expected.getStatus());
      assertEquals("Could not find a process instance with id 'unexistinginstance'.",expected.getStatus().getDescription());
    }
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT,pi.getId(),"unexistingcomment"));
    try {
      client.get();
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_NOT_FOUND,expected.getStatus());
      assertEquals("Process instance '" + pi.getId() + "' doesn't have a comment with id 'unexistingcomment'.",expected.getStatus().getDescription());
    }
  }
  finally {
    if (pi != null) {
      List<Comment> comments=taskService.getProcessInstanceComments(pi.getId());
      for (      Comment c : comments) {
        taskService.deleteComment(c.getId());
      }
    }
  }
}
