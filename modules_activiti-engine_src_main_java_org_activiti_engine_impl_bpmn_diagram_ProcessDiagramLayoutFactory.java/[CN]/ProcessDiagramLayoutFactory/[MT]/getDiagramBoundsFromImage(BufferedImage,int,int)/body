{
  int width=image.getWidth();
  int height=image.getHeight();
  Map<Integer,Boolean> rowIsWhite=new TreeMap<Integer,Boolean>();
  Map<Integer,Boolean> columnIsWhite=new TreeMap<Integer,Boolean>();
  for (int row=0; row < height; row++) {
    if (!rowIsWhite.containsKey(row)) {
      rowIsWhite.put(row,true);
    }
    if (row <= offsetTop || row > image.getHeight() - offsetBottom) {
      rowIsWhite.put(row,true);
    }
 else {
      for (int column=0; column < width; column++) {
        if (!columnIsWhite.containsKey(column)) {
          columnIsWhite.put(column,true);
        }
        int pixel=image.getRGB(column,row);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=(pixel >> 0) & 0xff;
        if (!(alpha == 0 || (red >= GREY_THRESHOLD && green >= GREY_THRESHOLD && blue >= GREY_THRESHOLD))) {
          rowIsWhite.put(row,false);
          columnIsWhite.put(column,false);
        }
      }
    }
  }
  int marginTop=0;
  for (int row=0; row < height; row++) {
    if (rowIsWhite.get(row)) {
      ++marginTop;
    }
 else {
      break;
    }
  }
  int marginLeft=0;
  for (int column=0; column < width; column++) {
    if (columnIsWhite.get(column)) {
      ++marginLeft;
    }
 else {
      break;
    }
  }
  int marginRight=0;
  for (int column=width - 1; column >= 0; column--) {
    if (columnIsWhite.get(column)) {
      ++marginRight;
    }
 else {
      break;
    }
  }
  int marginBottom=0;
  for (int row=height - 1; row >= 0; row--) {
    if (rowIsWhite.get(row)) {
      ++marginBottom;
    }
 else {
      break;
    }
  }
  DiagramNode diagramBoundsImage=new DiagramNode();
  diagramBoundsImage.setX((double)marginLeft);
  diagramBoundsImage.setY((double)marginTop);
  diagramBoundsImage.setWidth((double)(width - marginRight - marginLeft));
  diagramBoundsImage.setHeight((double)(height - marginBottom - marginTop));
  return diagramBoundsImage;
}
