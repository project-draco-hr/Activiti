{
  List<RepositoryConnector> resultList=new ArrayList<RepositoryConnector>();
  List<RepositoryConnectorConfiguration> configurations=configurationService.getConnectorConfigurations();
  Map<String,List<RepositoryConnectorConfiguration>> configurationMap=new HashMap<String,List<RepositoryConnectorConfiguration>>();
  for (  RepositoryConnectorConfiguration repositoryConnectorConfiguration : configurations) {
    List<RepositoryConnectorConfiguration> configurationListForThisInstanceId=configurationMap.get(repositoryConnectorConfiguration.getConnectorId());
    if (configurationListForThisInstanceId == null) {
      configurationListForThisInstanceId=new ArrayList<RepositoryConnectorConfiguration>();
      configurationMap.put(repositoryConnectorConfiguration.getConnectorId(),configurationListForThisInstanceId);
    }
    configurationListForThisInstanceId.add(repositoryConnectorConfiguration);
  }
  validateConfiguration(configurationMap);
  for (  Entry<String,List<RepositoryConnectorConfiguration>> entry : configurationMap.entrySet()) {
    String connectorId=entry.getKey();
    String pluginId=entry.getValue().get(0).getPluginId();
    RepositoryConnector connector;
    try {
      connector=(RepositoryConnector)CycleComponentFactory.getCycleComponentInstance(pluginId);
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not initialize connector for pluginId '" + pluginId + "': "+ e.getMessage(),e);
    }
    connector.setId(connectorId);
    connector.setName(entry.getValue().get(0).getInstanceName());
    connector.startConfiguration();
    for (    RepositoryConnectorConfiguration repositoryConnectorConfiguration : entry.getValue()) {
      connector.addConfiguration(repositoryConnectorConfiguration.getConfigurationValues());
    }
    connector.configurationFinished();
    resultList.add(connector);
  }
  return resultList;
}
