{
  ISVNClientAdapter clientAdapter=getSvnClientAdapter();
  List<RepositoryNode> nodeList=new ArrayList<RepositoryNode>();
  try {
    File dirtyFolder=isDirty(id);
    if (dirtyFolder != null) {
      File[] list=dirtyFolder.listFiles();
      for (      File file : list) {
        if (file.isHidden()) {
          continue;
        }
        ISVNInfo entry=clientAdapter.getInfo(file);
        String nodeId=ConnectorPathUtils.buildId(id,file.getName());
        if (entry != null) {
          RepositoryNode node=initRepositoryNode(entry,nodeId);
          if (node != null) {
            nodeList.add(node);
          }
        }
      }
    }
 else {
      ISVNDirEntry[] dirEntries=clientAdapter.getList(buildSVNURL(id),SVNRevision.HEAD,false);
      for (      ISVNDirEntry isvnDirEntry : dirEntries) {
        String nodeId=ConnectorPathUtils.buildId(id,isvnDirEntry.getPath());
        RepositoryNode node=initRepositoryNode(isvnDirEntry,nodeId);
        if (node != null) {
          nodeList.add(node);
        }
      }
    }
  }
 catch (  Exception e) {
    log.log(Level.WARNING,"cannot get children of " + id,e);
    throw new RepositoryNodeNotFoundException(getConfiguration().getName(),RepositoryFolder.class,id,e);
  }
  RepositoryNodeCollection result=new RepositoryNodeCollectionImpl(nodeList);
  return result;
}
