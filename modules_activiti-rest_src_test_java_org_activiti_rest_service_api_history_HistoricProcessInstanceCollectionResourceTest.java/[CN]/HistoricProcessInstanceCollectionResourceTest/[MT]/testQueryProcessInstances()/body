{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task.getId());
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess");
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCES);
  assertResultsPresentInDataResponse(url + "?finished=true",processInstance.getId());
  assertResultsPresentInDataResponse(url + "?finished=false",processInstance2.getId());
  assertResultsPresentInDataResponse(url + "?processDefinitionId=" + processInstance.getProcessDefinitionId(),processInstance.getId(),processInstance2.getId());
  assertResultsPresentInDataResponse(url + "?processDefinitionId=" + processInstance.getProcessDefinitionId()+ "&finished=true",processInstance.getId());
  assertResultsPresentInDataResponse(url + "?processDefinitionKey=oneTaskProcess",processInstance.getId(),processInstance2.getId());
  ClientResource client=getAuthenticatedClient(url + "?processDefinitionKey=oneTaskProcess&sort=startTime");
  Representation response=client.get();
  assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
  JsonNode dataNode=objectMapper.readTree(response.getStream()).get("data");
  assertEquals(2,dataNode.size());
  assertEquals(processInstance.getId(),dataNode.get(0).get("id").asText());
  assertEquals(processInstance2.getId(),dataNode.get(1).get("id").asText());
}
