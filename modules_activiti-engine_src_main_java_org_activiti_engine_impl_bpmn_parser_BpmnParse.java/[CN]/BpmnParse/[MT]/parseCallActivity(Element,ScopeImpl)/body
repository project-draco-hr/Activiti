{
  ActivityImpl activity=parseAndCreateActivityOnScopeElement(callActivityElement,scope);
  String calledElement=callActivityElement.attribute("calledElement");
  if (calledElement == null) {
    addError("Missing attribute 'calledElement'",callActivityElement);
  }
  CallActivityBehaviour callActivityBehaviour=new CallActivityBehaviour(calledElement);
  Element extentionsElement=callActivityElement.element("extensionElements");
  if (extentionsElement != null) {
    for (    Element listenerElement : extentionsElement.elementsNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"in")) {
      String source=listenerElement.attribute("source");
      String target=listenerElement.attribute("target");
      callActivityBehaviour.addDataInputAssociation(new SimpleDataInputAssociation(source,target));
    }
    for (    Element listenerElement : extentionsElement.elementsNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"out")) {
      String source=listenerElement.attribute("source");
      String target=listenerElement.attribute("target");
      callActivityBehaviour.addDataOutputAssociation(new MessageImplicitDataOutputAssociation(target,source));
    }
  }
  activity.setScope(true);
  activity.setActivityBehavior(callActivityBehaviour);
  parseExecutionListenersOnScope(callActivityElement,activity);
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseCallActivity(callActivityElement,scope,activity);
  }
}
