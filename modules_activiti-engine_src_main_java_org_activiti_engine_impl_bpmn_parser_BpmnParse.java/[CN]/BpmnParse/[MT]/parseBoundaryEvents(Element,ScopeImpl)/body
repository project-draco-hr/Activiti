{
  for (  Element boundaryEventElement : parentElement.elements("boundaryEvent")) {
    String attachedToRef=boundaryEventElement.attribute("attachedToRef");
    if (attachedToRef == null || attachedToRef.equals("")) {
      addError("AttachedToRef is required when using a timerEventDefinition",boundaryEventElement);
    }
    String id=boundaryEventElement.attribute("id");
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Parsing boundary event " + id);
    }
    ActivityImpl parentActivity=scopeElement.findActivity(attachedToRef);
    if (parentActivity == null) {
      addError("Invalid reference in boundary event. Make sure that the referenced activity is " + "defined in the same scope as the boundary event",boundaryEventElement);
    }
    ActivityImpl nestedActivity=createActivityOnScope(boundaryEventElement,parentActivity);
    String cancelActivity=boundaryEventElement.attribute("cancelActivity","true");
    boolean interrupting=cancelActivity.equals("true") ? true : false;
    BoundaryEventActivityBehavior behavior=new BoundaryEventActivityBehavior(interrupting);
    nestedActivity.setActivityBehavior(behavior);
    Element timerEventDefinition=boundaryEventElement.element("timerEventDefinition");
    Element errorEventDefinition=boundaryEventElement.element("errorEventDefinition");
    if (timerEventDefinition != null) {
      parseBoundaryTimerEventDefinition(timerEventDefinition,interrupting,nestedActivity);
    }
 else     if (errorEventDefinition != null) {
      interrupting=true;
      parseBoundaryErrorEventDefinition(errorEventDefinition,interrupting,parentActivity,nestedActivity);
    }
 else {
      addError("Unsupported boundary event type",boundaryEventElement);
    }
  }
}
