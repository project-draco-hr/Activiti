{
  for (  Element boundaryEventElement : parentElement.elements("boundaryEvent")) {
    String attachedToRef=boundaryEventElement.attribute("attachedToRef");
    if (attachedToRef == null || attachedToRef.equals("")) {
      throw new ActivitiException("AttachedToRef is required when using a timerEventDefinition");
    }
    String id=boundaryEventElement.attribute("id");
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine("Parsing boundary event " + id);
    }
    ActivityImpl parentActivity=scopeElement.findActivity(attachedToRef);
    if (parentActivity == null) {
      throw new ActivitiException("Invalid reference in boundary event: " + attachedToRef + " Make sure that the referenced activity is defined in the same scope as the boundary event");
    }
    ActivityImpl nestedActivity=parentActivity.createActivity(id);
    nestedActivity.setProperty("name",boundaryEventElement.attribute("name"));
    String cancelActivity=boundaryEventElement.attribute("cancelActivity","true");
    boolean interrupting=cancelActivity.equals("true") ? true : false;
    Element timerEventDefinition=boundaryEventElement.element("timerEventDefinition");
    if (timerEventDefinition != null) {
      parseBoundaryTimerEventDefinition(timerEventDefinition,interrupting,nestedActivity);
    }
 else {
      throw new ActivitiException("Unsupported boundary event type");
    }
  }
}
