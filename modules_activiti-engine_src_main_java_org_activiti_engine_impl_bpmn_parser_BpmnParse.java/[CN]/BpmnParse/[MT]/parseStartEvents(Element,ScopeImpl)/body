{
  List<Element> startEventElements=parentElement.elements("startEvent");
  if (startEventElements.size() > 1) {
    addError("Multiple start events are currently unsupported",parentElement);
  }
 else   if (startEventElements.size() > 0) {
    Element startEventElement=startEventElements.get(0);
    ActivityImpl startEventActivity=parseAndCreateActivityOnScopeElement(startEventElement,scope);
    if (scope instanceof ProcessDefinitionEntity) {
      ProcessDefinitionEntity processDefinition=(ProcessDefinitionEntity)scope;
      if (processDefinition.getInitial() != null) {
        addError("multiple startEvents in a process definition are not yet supported",startEventElement);
      }
      processDefinition.setInitial(startEventActivity);
      StartFormHandler startFormHandler;
      String startFormHandlerClassName=startEventElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"formHandlerClass");
      if (startFormHandlerClassName != null) {
        startFormHandler=(StartFormHandler)ReflectUtil.instantiate(startFormHandlerClassName);
      }
 else {
        startFormHandler=new DefaultStartFormHandler();
      }
      startFormHandler.parseConfiguration(startEventElement,deployment,processDefinition,this);
      processDefinition.setStartFormHandler(startFormHandler);
      String initiatorVariableName=startEventElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"initiator");
      if (initiatorVariableName != null) {
        processDefinition.setProperty(PROPERTYNAME_INITIATOR_VARIABLE_NAME,initiatorVariableName);
      }
    }
 else {
      scope.setProperty(PROPERTYNAME_INITIAL,startEventActivity);
    }
    startEventActivity.setActivityBehavior(new NoneStartEventActivityBehavior());
    for (    BpmnParseListener parseListener : parseListeners) {
      parseListener.parseStartEvent(startEventElement,scope,startEventActivity);
    }
  }
}
