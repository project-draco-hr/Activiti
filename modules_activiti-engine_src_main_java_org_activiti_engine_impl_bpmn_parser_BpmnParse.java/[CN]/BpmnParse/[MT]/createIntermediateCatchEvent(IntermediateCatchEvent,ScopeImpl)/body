{
  ActivityImpl nestedActivity=null;
  EventDefinition eventDefinition=null;
  if (event.getEventDefinitions().size() > 0) {
    eventDefinition=event.getEventDefinitions().get(0);
  }
  if (eventDefinition == null) {
    bpmnModel.addProblem("No event definition for intermediate catch event " + event.getId(),event.getId());
    nestedActivity=createActivityOnScope(event,ELEMENT_EVENT_CATCH,scopeElement);
  }
 else {
    boolean isAfterEventBasedGateway=false;
    String eventBasedGatewayId=null;
    for (    SequenceFlow sequenceFlow : event.getIncomingFlows()) {
      FlowElement sourceElement=bpmnModel.getFlowElement(sequenceFlow.getSourceRef());
      if (sourceElement instanceof EventGateway) {
        isAfterEventBasedGateway=true;
        eventBasedGatewayId=sourceElement.getId();
        break;
      }
    }
    if (isAfterEventBasedGateway) {
      ActivityImpl gatewayActivity=scopeElement.findActivity(eventBasedGatewayId);
      nestedActivity=createActivityOnScope(event,ELEMENT_EVENT_CATCH,gatewayActivity);
    }
 else {
      nestedActivity=createActivityOnScope(event,ELEMENT_EVENT_CATCH,scopeElement);
    }
    nestedActivity.setActivityBehavior(activityBehaviorFactory.createIntermediateCatchEventActivityBehavior(event));
    if (eventDefinition instanceof TimerEventDefinition) {
      createIntermediateTimerEventDefinition((TimerEventDefinition)eventDefinition,nestedActivity,isAfterEventBasedGateway);
    }
 else     if (eventDefinition instanceof SignalEventDefinition) {
      createIntermediateSignalEventDefinition((SignalEventDefinition)eventDefinition,nestedActivity,isAfterEventBasedGateway);
    }
 else     if (eventDefinition instanceof MessageEventDefinition) {
      createIntermediateMessageEventDefinition((MessageEventDefinition)eventDefinition,nestedActivity,isAfterEventBasedGateway);
    }
 else {
      bpmnModel.addProblem("Unsupported intermediate catch event type.",event.getId());
    }
  }
  createExecutionListenersOnScope(event.getExecutionListeners(),nestedActivity);
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseIntermediateCatchEvent(event,scopeElement,nestedActivity);
  }
  return nestedActivity;
}
