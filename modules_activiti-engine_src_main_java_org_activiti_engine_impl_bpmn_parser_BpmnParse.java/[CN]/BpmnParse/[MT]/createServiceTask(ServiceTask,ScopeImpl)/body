{
  ActivityImpl activity=createActivityOnScope(serviceTask,ELEMENT_TASK_SERVICE,scope);
  activity.setAsync(serviceTask.isAsynchronous());
  activity.setExclusive(!serviceTask.isNotExclusive());
  if (StringUtils.isNotEmpty(serviceTask.getType())) {
    if (serviceTask.getType().equalsIgnoreCase("mail")) {
      validateFieldDeclarationsForEmail(serviceTask.getId(),serviceTask.getFieldExtensions());
      activity.setActivityBehavior(activityBehaviorFactory.createMailActivityBehavior(serviceTask));
    }
 else     if (serviceTask.getType().equalsIgnoreCase("mule")) {
      activity.setActivityBehavior(activityBehaviorFactory.createMuleActivityBehavior(serviceTask,bpmnModel));
    }
 else     if (serviceTask.getType().equalsIgnoreCase("shell")) {
      validateFieldDeclarationsForShell(serviceTask.getId(),serviceTask.getFieldExtensions());
      activity.setActivityBehavior(activityBehaviorFactory.createShellActivityBehavior(serviceTask));
    }
 else {
      bpmnModel.addProblem("Invalid usage of type attribute: '" + serviceTask.getType() + "'.",serviceTask.getId());
    }
  }
 else   if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(serviceTask.getImplementationType())) {
    activity.setActivityBehavior(activityBehaviorFactory.createClassDelegateServiceTask(serviceTask));
  }
 else   if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {
    activity.setActivityBehavior(activityBehaviorFactory.createServiceTaskDelegateExpressionActivityBehavior(serviceTask));
  }
 else   if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {
    activity.setActivityBehavior(activityBehaviorFactory.createServiceTaskExpressionActivityBehavior(serviceTask));
  }
 else   if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && StringUtils.isNotEmpty(serviceTask.getOperationRef())) {
    if (!this.operations.containsKey(serviceTask.getOperationRef())) {
      bpmnModel.addProblem(serviceTask.getOperationRef() + " does not exist",serviceTask.getId());
    }
 else {
      WebServiceActivityBehavior webServiceActivityBehavior=activityBehaviorFactory.createWebServiceActivityBehavior(serviceTask);
      webServiceActivityBehavior.setOperation(this.operations.get(serviceTask.getOperationRef()));
      if (serviceTask.getIoSpecification() != null) {
        IOSpecification ioSpecification=this.createIOSpecification(serviceTask.getIoSpecification());
        webServiceActivityBehavior.setIoSpecification(ioSpecification);
      }
      for (      DataAssociation dataAssociationElement : serviceTask.getDataInputAssociations()) {
        AbstractDataAssociation dataAssociation=this.createDataInputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataInputAssociation(dataAssociation);
      }
      for (      DataAssociation dataAssociationElement : serviceTask.getDataOutputAssociations()) {
        AbstractDataAssociation dataAssociation=this.createDataOutputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataOutputAssociation(dataAssociation);
      }
      activity.setActivityBehavior(webServiceActivityBehavior);
    }
  }
 else {
    bpmnModel.addProblem("One of the attributes 'class', 'delegateExpression', 'type', 'operation', or 'expression' is mandatory on serviceTask.",serviceTask.getId());
  }
  createExecutionListenersOnScope(serviceTask.getExecutionListeners(),activity);
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseServiceTask(serviceTask,scope,activity);
  }
  return activity;
}
