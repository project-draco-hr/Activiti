{
  ActivityImpl activity=parseAndCreateActivityOnScopeElement(serviceTaskElement,scope);
  String type=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"type");
  String className=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"class");
  String expression=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"expression");
  String resultVariableName=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"resultVariableName");
  String implementation=serviceTaskElement.attribute("implementation");
  String operationRef=serviceTaskElement.attribute("operationRef");
  List<FieldDeclaration> fieldDeclarations=parseFieldDeclarationsOnServiceTask(serviceTaskElement);
  if (type != null) {
    if (type.equalsIgnoreCase("mail")) {
      parseEmailServiceTask(activity,serviceTaskElement,fieldDeclarations);
    }
 else {
      addError("Invalid usage of type attribute: '" + type + "'",serviceTaskElement);
    }
  }
 else   if (className != null && className.trim().length() > 0) {
    if (resultVariableName != null) {
      addError("'resultVariableName' not supported for service tasks using 'class'",serviceTaskElement);
    }
    activity.setActivityBehavior(new ServiceTaskDelegateActivityBehaviour(className,fieldDeclarations));
  }
 else   if (expression != null && expression.trim().length() > 0) {
    activity.setActivityBehavior(new ServiceTaskExpressionActivityBehavior(expressionManager.createExpression(expression),resultVariableName));
  }
 else   if (implementation != null && operationRef != null && implementation.equalsIgnoreCase("##WebService")) {
    if (!this.operations.containsKey(operationRef)) {
      addError(operationRef + " does not exist",serviceTaskElement);
    }
 else {
      Operation operation=this.operations.get(operationRef);
      activity.setActivityBehavior(new WebServiceActivityBehavior(operation));
    }
  }
 else {
    addError("'class', 'type', or 'expression' attribute is mandatory on serviceTask",serviceTaskElement);
  }
  parseEventListenersOnScope(serviceTaskElement,activity);
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseServiceTask(serviceTaskElement,scope,activity);
  }
}
