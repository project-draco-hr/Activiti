{
  ActivityImpl activity=parseAndCreateActivityOnScopeElement(serviceTaskElement,scope);
  String type=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"type");
  String className=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"class");
  String methodExpr=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"method-expr");
  String valueExpr=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"value-expr");
  String resultVariableName=serviceTaskElement.attributeNS(BpmnParser.BPMN_EXTENSIONS_NS,"result-variable-name");
  String implementation=serviceTaskElement.attribute("implementation");
  String operationRef=serviceTaskElement.attribute("operationRef");
  List<FieldDeclaration> fieldDeclarations=parseFieldDeclarations(serviceTaskElement);
  if (type != null) {
    if (type.equalsIgnoreCase("mail")) {
      parseEmailServiceTask(activity,serviceTaskElement,fieldDeclarations);
    }
 else {
      addError("Invalid usage of type attribute: '" + type + "'",serviceTaskElement);
    }
  }
 else   if (className != null && className.trim().length() > 0) {
    if (resultVariableName != null) {
      addError("'result-variable-name' not supported for service tasks using 'class'",serviceTaskElement);
    }
    activity.setActivityBehavior(new ServiceTaskDelegateActivityBehaviour(expressionManager.createValueExpression(className),fieldDeclarations));
  }
 else   if (methodExpr != null && methodExpr.trim().length() > 0) {
    activity.setActivityBehavior(new ServiceTaskMethodExpressionActivityBehavior(expressionManager.createMethodExpression(methodExpr),resultVariableName));
  }
 else   if (valueExpr != null && valueExpr.trim().length() > 0) {
    activity.setActivityBehavior(new ServiceTaskValueExpressionActivityBehavior(expressionManager.createValueExpression(valueExpr),resultVariableName));
  }
 else   if (implementation != null && operationRef != null && implementation.equalsIgnoreCase("##WebService")) {
    if (!this.operations.containsKey(operationRef)) {
      addError(operationRef + " does not exist",serviceTaskElement);
    }
 else {
      Operation operation=this.operations.get(operationRef);
      activity.setActivityBehavior(new WebServiceActivityBehavior(operation));
    }
  }
 else {
    addError("'class', 'method-expr' or 'value-expr' attribute is mandatory on serviceTask",serviceTaskElement);
  }
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseServiceTask(serviceTaskElement,scope,activity);
  }
}
