{
  ActivityImpl activity=parseAndCreateActivityOnScopeElement(serviceTaskElement,scope);
  String type=serviceTaskElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"type");
  String className=serviceTaskElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"class");
  String expression=serviceTaskElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"expression");
  String resultVariableName=serviceTaskElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"resultVariableName");
  String implementation=serviceTaskElement.attribute("implementation");
  String operationRef=this.resolveName(serviceTaskElement.attribute("operationRef"));
  List<FieldDeclaration> fieldDeclarations=parseFieldDeclarationsOnServiceTask(serviceTaskElement);
  if (type != null) {
    if (type.equalsIgnoreCase("mail")) {
      parseEmailServiceTask(activity,serviceTaskElement,fieldDeclarations);
    }
 else {
      addError("Invalid usage of type attribute: '" + type + "'",serviceTaskElement);
    }
  }
 else   if (className != null && className.trim().length() > 0) {
    if (resultVariableName != null) {
      addError("'resultVariableName' not supported for service tasks using 'class'",serviceTaskElement);
    }
    Object delegateInstance=instantiateDelegate(className,fieldDeclarations);
    if (delegateInstance instanceof ActivityBehavior) {
      activity.setActivityBehavior((ActivityBehavior)delegateInstance);
    }
 else     if (delegateInstance instanceof JavaDelegation) {
      activity.setActivityBehavior(new JavaDelegationDelegate((JavaDelegation)delegateInstance));
    }
 else {
      addError(delegateInstance.getClass().getName() + " doesn't implement " + JavaDelegation.class.getName()+ " nor "+ ActivityBehavior.class.getName(),serviceTaskElement);
    }
  }
 else   if (expression != null && expression.trim().length() > 0) {
    activity.setActivityBehavior(new ServiceTaskExpressionActivityBehavior(expressionManager.createExpression(expression),resultVariableName));
  }
 else   if (implementation != null && operationRef != null && implementation.equalsIgnoreCase("##WebService")) {
    if (!this.operations.containsKey(operationRef)) {
      addError(operationRef + " does not exist",serviceTaskElement);
    }
 else {
      Operation operation=this.operations.get(operationRef);
      WebServiceActivityBehavior webServiceActivityBehavior=new WebServiceActivityBehavior(operation);
      Element ioSpecificationElement=serviceTaskElement.element("ioSpecification");
      if (ioSpecificationElement != null) {
        IOSpecification ioSpecification=this.parseIOSpecification(ioSpecificationElement);
        webServiceActivityBehavior.setIoSpecification(ioSpecification);
      }
      for (      Element dataAssociationElement : serviceTaskElement.elements("dataInputAssociation")) {
        DataInputAssociation dataAssociation=this.parseDataInputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataInputAssociation(dataAssociation);
      }
      for (      Element dataAssociationElement : serviceTaskElement.elements("dataOutputAssociation")) {
        DataOutputAssociation dataAssociation=this.parseDataOutputAssociation(dataAssociationElement);
        webServiceActivityBehavior.addDataOutputAssociation(dataAssociation);
      }
      activity.setActivityBehavior(webServiceActivityBehavior);
    }
  }
 else {
    addError("'class', 'type', or 'expression' attribute is mandatory on serviceTask",serviceTaskElement);
  }
  parseExecutionListenersOnScope(serviceTaskElement,activity);
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseServiceTask(serviceTaskElement,scope,activity);
  }
}
