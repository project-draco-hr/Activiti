{
  ActivityImpl nestedActivityImpl=createActivityOnScope(intermediateEventElement,scopeElement);
  ActivityBehavior activityBehavior=null;
  Element signalEventDefinitionElement=intermediateEventElement.element("signalEventDefinition");
  Element compensateEventDefinitionElement=intermediateEventElement.element("compensateEventDefinition");
  boolean otherUnsupportedThrowingIntermediateEvent=(intermediateEventElement.element("escalationEventDefinition") != null) || (intermediateEventElement.element("messageEventDefinition") != null) || (intermediateEventElement.element("linkEventDefinition") != null);
  if (signalEventDefinitionElement != null) {
    nestedActivityImpl.setProperty("type","intermediateSignalThrow");
    EventSubscriptionDeclaration signalDefinition=parseSignalEventDefinition(signalEventDefinitionElement);
    activityBehavior=new IntermediateThrowSignalEventActivityBehavior(signalDefinition);
  }
 else   if (compensateEventDefinitionElement != null) {
    CompensateEventDefinition compensateEventDefinition=parseCompensateEventDefinition(compensateEventDefinitionElement,scopeElement);
    activityBehavior=new IntermediateThrowCompensationEventActivityBehavior(compensateEventDefinition);
  }
 else   if (otherUnsupportedThrowingIntermediateEvent) {
    addError("Unsupported intermediate throw event type",intermediateEventElement);
  }
 else {
    activityBehavior=new IntermediateThrowNoneEventActivityBehavior();
  }
  for (  BpmnParseListener parseListener : parseListeners) {
    parseListener.parseIntermediateThrowEvent(intermediateEventElement,scopeElement,nestedActivityImpl);
  }
  nestedActivityImpl.setActivityBehavior(activityBehavior);
  parseExecutionListenersOnScope(intermediateEventElement,nestedActivityImpl);
  return nestedActivityImpl;
}
