{
  Object triggeredByEvent=scope.getProperty("triggeredByEvent");
  boolean isTriggeredByEvent=triggeredByEvent != null && ((Boolean)triggeredByEvent == true);
  Element errorEventDefinition=startEventElement.element("errorEventDefinition");
  Element messageEventDefinition=startEventElement.element("messageEventDefinition");
  Element signalEventDefinition=startEventElement.element("signalEventDefinition");
  if (isTriggeredByEvent) {
    EventSubProcessStartEventActivityBehavior activityBehavior=new EventSubProcessStartEventActivityBehavior(startEventActivity.getId());
    startEventActivity.setActivityBehavior(activityBehavior);
    String isInterrupting=startEventElement.attribute("isInterrupting");
    if (isInterrupting != null && (isInterrupting.equals("false") || isInterrupting.equals("FALSE"))) {
      activityBehavior.setInterrupting(false);
    }
    ScopeImpl catchingScope=((ActivityImpl)scope).getParent();
    if (errorEventDefinition != null) {
      if (!activityBehavior.isInterrupting()) {
        addError("error start event of event subprocess must be interrupting",startEventElement);
      }
      if (scope.getProperty(PROPERTYNAME_INITIAL) == null) {
        scope.setProperty(PROPERTYNAME_INITIAL,startEventActivity);
        parseErrorStartEventDefinition(errorEventDefinition,startEventActivity,catchingScope);
      }
 else {
        addError("multiple start events not supported for subprocess",startEventElement);
      }
    }
 else     if (messageEventDefinition != null) {
      EventSubscriptionDeclaration eventSubscriptionDeclaration=parseMessageEventDefinition(messageEventDefinition);
      eventSubscriptionDeclaration.setActivityId(startEventActivity.getId());
      eventSubscriptionDeclaration.setStartEvent(false);
      addEventSubscriptionDeclaration(eventSubscriptionDeclaration,catchingScope,messageEventDefinition);
    }
 else     if (signalEventDefinition != null) {
      EventSubscriptionDeclaration eventSubscriptionDeclaration=parseSignalEventDefinition(signalEventDefinition);
      eventSubscriptionDeclaration.setActivityId(startEventActivity.getId());
      eventSubscriptionDeclaration.setStartEvent(false);
      addEventSubscriptionDeclaration(eventSubscriptionDeclaration,catchingScope,signalEventDefinition);
    }
 else {
      addError("start event of event subprocess must be of type 'error', 'message' or 'signal'",startEventElement);
    }
  }
 else {
    if (errorEventDefinition != null) {
      addError("errorEventDefinition only allowed on start event if subprocess is an event subprocess",errorEventDefinition);
    }
    if (messageEventDefinition != null) {
      addError("messageEventDefinition only allowed on start event if subprocess is an event subprocess",messageEventDefinition);
    }
    if (signalEventDefinition != null) {
      addError("signalEventDefintion only allowed on start event if subprocess is an event subprocess",messageEventDefinition);
    }
    if (scope.getProperty(PROPERTYNAME_INITIAL) == null) {
      scope.setProperty(PROPERTYNAME_INITIAL,startEventActivity);
      startEventActivity.setActivityBehavior(new NoneStartEventActivityBehavior());
    }
 else {
      addError("multiple start events not supported for subprocess",startEventElement);
    }
  }
}
