{
  TaskQueryRequest request=new TaskQueryRequest();
  if (requestParams.containsKey("name")) {
    request.setName(requestParams.get("name"));
  }
  if (requestParams.containsKey("nameLike")) {
    request.setNameLike(requestParams.get("nameLike"));
  }
  if (requestParams.containsKey("description")) {
    request.setDescription(requestParams.get("description"));
  }
  if (requestParams.containsKey("descriptionLike")) {
    request.setDescriptionLike(requestParams.get("descriptionLike"));
  }
  if (requestParams.containsKey("priority")) {
    request.setPriority(Integer.valueOf(requestParams.get("priority")));
  }
  if (requestParams.containsKey("minimumPriority")) {
    request.setMinimumPriority(Integer.valueOf(requestParams.get("minimumPriority")));
  }
  if (requestParams.containsKey("maximumPriority")) {
    request.setMaximumPriority(Integer.valueOf(requestParams.get("maximumPriority")));
  }
  if (requestParams.containsKey("assignee")) {
    request.setAssignee(requestParams.get("assignee"));
  }
  if (requestParams.containsKey("assigneeLike")) {
    request.setAssigneeLike(requestParams.get("assigneeLike"));
  }
  if (requestParams.containsKey("owner")) {
    request.setOwner(requestParams.get("owner"));
  }
  if (requestParams.containsKey("unassigned")) {
    request.setUnassigned(Boolean.valueOf(requestParams.get("unassigned")));
  }
  if (requestParams.containsKey("delegationState")) {
    request.setDelegationState(requestParams.get("delegationState"));
  }
  if (requestParams.containsKey("candidateUser")) {
    request.setCandidateUser(requestParams.get("candidateUser"));
  }
  if (requestParams.containsKey("involvedUser")) {
    request.setInvolvedUser(requestParams.get("involvedUser"));
  }
  if (requestParams.containsKey("candidateGroup")) {
    request.setCandidateGroup(requestParams.get("candidateGroup"));
  }
  if (requestParams.containsKey("candidateGroups")) {
    String[] candidateGroups=requestParams.get("candidateGroups").split(",");
    List<String> groups=new ArrayList<String>(candidateGroups.length);
    for (    String candidateGroup : candidateGroups) {
      groups.add(candidateGroup);
    }
    request.setCandidateGroupIn(groups);
  }
  if (requestParams.containsKey("processDefinitionKey")) {
    request.setProcessDefinitionKey(requestParams.get("processDefinitionKey"));
  }
  if (requestParams.containsKey("processDefinitionKeyLike")) {
    request.setProcessDefinitionKeyLike(requestParams.get("processDefinitionKeyLike"));
  }
  if (requestParams.containsKey("processDefinitionName")) {
    request.setProcessDefinitionName(requestParams.get("processDefinitionName"));
  }
  if (requestParams.containsKey("processDefinitionNameLike")) {
    request.setProcessDefinitionNameLike(requestParams.get("processDefinitionNameLike"));
  }
  if (requestParams.containsKey("processInstanceId")) {
    request.setProcessInstanceId(requestParams.get("processInstanceId"));
  }
  if (requestParams.containsKey("processInstanceBusinessKey")) {
    request.setProcessInstanceBusinessKey(requestParams.get("processInstanceBusinessKey"));
  }
  if (requestParams.containsKey("executionId")) {
    request.setExecutionId(requestParams.get("executionId"));
  }
  if (requestParams.containsKey("createdOn")) {
    request.setCreatedOn(RequestUtil.getDate(requestParams,"createdOn"));
  }
  if (requestParams.containsKey("createdBefore")) {
    request.setCreatedBefore(RequestUtil.getDate(requestParams,"createdBefore"));
  }
  if (requestParams.containsKey("createdAfter")) {
    request.setCreatedAfter(RequestUtil.getDate(requestParams,"createdAfter"));
  }
  if (requestParams.containsKey("excludeSubTasks")) {
    request.setExcludeSubTasks(Boolean.valueOf(requestParams.get("excludeSubTasks")));
  }
  if (requestParams.containsKey("taskDefinitionKey")) {
    request.setTaskDefinitionKey(requestParams.get("taskDefinitionKey"));
  }
  if (requestParams.containsKey("taskDefinitionKeyLike")) {
    request.setTaskDefinitionKeyLike(requestParams.get("taskDefinitionKeyLike"));
  }
  if (requestParams.containsKey("dueDate")) {
    request.setDueDate(RequestUtil.getDate(requestParams,"dueDate"));
  }
  if (requestParams.containsKey("dueBefore")) {
    request.setDueBefore(RequestUtil.getDate(requestParams,"dueBefore"));
  }
  if (requestParams.containsKey("dueAfter")) {
    request.setDueAfter(RequestUtil.getDate(requestParams,"dueAfter"));
  }
  if (requestParams.containsKey("active")) {
    request.setActive(Boolean.valueOf(requestParams.get("active")));
  }
  if (requestParams.containsKey("includeTaskLocalVariables")) {
    request.setIncludeTaskLocalVariables(Boolean.valueOf(requestParams.get("includeTaskLocalVariables")));
  }
  if (requestParams.containsKey("includeProcessVariables")) {
    request.setIncludeProcessVariables(Boolean.valueOf(requestParams.get("includeProcessVariables")));
  }
  if (requestParams.containsKey("tenantId")) {
    request.setTenantId(requestParams.get("tenantId"));
  }
  if (requestParams.containsKey("tenantIdLike")) {
    request.setTenantIdLike(requestParams.get("tenantIdLike"));
  }
  if (requestParams.containsKey("withoutTenantId") && Boolean.valueOf(requestParams.get("withoutTenantId"))) {
    request.setWithoutTenantId(Boolean.TRUE);
  }
  if (requestParams.containsKey("candidateOrAssigned")) {
    request.setCandidateOrAssigned(requestParams.get("candidateOrAssigned"));
  }
  return getTasksFromQueryRequest(request,requestParams);
}
