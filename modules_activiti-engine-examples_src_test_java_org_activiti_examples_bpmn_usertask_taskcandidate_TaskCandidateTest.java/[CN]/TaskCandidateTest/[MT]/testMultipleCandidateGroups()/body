{
  ProcessInstance processInstance=deployer.getProcessService().startProcessInstanceByKey("multipleCandidatesGroup");
  deployer.assertProcessEnded(processInstance.getId());
  TaskService taskService=deployer.getTaskService();
  List<Task> tasks=taskService.findAssignedTasks(KERMIT);
  assertTrue(tasks.isEmpty());
  tasks=taskService.findAssignedTasks(GONZO);
  assertTrue(tasks.isEmpty());
  assertEquals(1,taskService.findUnassignedTasks(KERMIT).size());
  assertEquals(1,taskService.findUnassignedTasks(GONZO).size());
  assertEquals(1,taskService.createTaskQuery().candidateGroup("management").count());
  assertEquals(1,taskService.createTaskQuery().candidateGroup("accountancy").count());
  assertEquals(0,taskService.createTaskQuery().candidateGroup("sales").count());
  tasks=taskService.findUnassignedTasks(GONZO);
  Task task=tasks.get(0);
  assertEquals("Approve expenses",task.getName());
  taskService.claim(task.getId(),GONZO);
  assertTrue(taskService.findUnassignedTasks(KERMIT).isEmpty());
  assertTrue(taskService.findUnassignedTasks(GONZO).isEmpty());
  assertEquals(0,taskService.createTaskQuery().candidateGroup("management").count());
  assertEquals(1,taskService.findAssignedTasks(GONZO).size());
  assertTrue(taskService.findAssignedTasks(KERMIT).isEmpty());
  taskService.complete(task.getId());
}
