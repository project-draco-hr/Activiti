{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.setVariableLocal(task.getId(),"localTaskVariable","localValue");
    HttpResponse response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"localTaskVariable")),HttpStatus.SC_OK);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("localValue",responseNode.get("value").asText());
    assertEquals("localTaskVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("sharedVariable",(Object)"processValue"));
    Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    taskService.setVariableLocal(processTask.getId(),"sharedVariable","taskValue");
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable")),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("taskValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=local"),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("taskValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=global"),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("global",responseNode.get("scope").asText());
    assertEquals("processValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=illegal"),HttpStatus.SC_BAD_REQUEST);
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,"unexisting","sharedVariable")),HttpStatus.SC_NOT_FOUND);
    response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"unexistingVariable")),HttpStatus.SC_NOT_FOUND);
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      if (task.getExecutionId() == null) {
        taskService.deleteTask(task.getId(),true);
      }
    }
  }
}
