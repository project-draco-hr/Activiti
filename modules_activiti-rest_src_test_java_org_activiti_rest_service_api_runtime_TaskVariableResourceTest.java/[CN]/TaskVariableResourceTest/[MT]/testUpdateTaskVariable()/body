{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("overlappingVariable",(Object)"processValue"));
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"overlappingVariable","taskValue");
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("name","overlappingVariable");
  requestNode.put("value","updatedLocalValue");
  requestNode.put("type","string");
  HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"overlappingVariable"));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals("updatedLocalValue",responseNode.get("value").asText());
  assertEquals("local",responseNode.get("scope").asText());
  assertEquals("updatedLocalValue",taskService.getVariableLocal(task.getId(),"overlappingVariable"));
  assertEquals("processValue",runtimeService.getVariable(task.getExecutionId(),"overlappingVariable"));
  requestNode=objectMapper.createObjectNode();
  requestNode.put("name","overlappingVariable");
  requestNode.put("value","updatedLocalValueOnceAgain");
  requestNode.put("type","string");
  requestNode.put("scope","local");
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals("updatedLocalValueOnceAgain",responseNode.get("value").asText());
  assertEquals("local",responseNode.get("scope").asText());
  assertEquals("updatedLocalValueOnceAgain",taskService.getVariableLocal(task.getId(),"overlappingVariable"));
  assertEquals("processValue",runtimeService.getVariable(task.getExecutionId(),"overlappingVariable"));
  requestNode=objectMapper.createObjectNode();
  requestNode.put("name","overlappingVariable");
  requestNode.put("value","updatedInGlobalScope");
  requestNode.put("type","string");
  requestNode.put("scope","global");
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals("updatedInGlobalScope",responseNode.get("value").asText());
  assertEquals("global",responseNode.get("scope").asText());
  assertEquals("updatedLocalValueOnceAgain",taskService.getVariableLocal(task.getId(),"overlappingVariable"));
  assertEquals("updatedInGlobalScope",runtimeService.getVariable(task.getExecutionId(),"overlappingVariable"));
  requestNode.put("name","unexistingVariable");
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPut,HttpStatus.SC_BAD_REQUEST);
  requestNode.put("name","unexistingVariable");
  httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"unexistingVariable"));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPut,HttpStatus.SC_NOT_FOUND);
}
