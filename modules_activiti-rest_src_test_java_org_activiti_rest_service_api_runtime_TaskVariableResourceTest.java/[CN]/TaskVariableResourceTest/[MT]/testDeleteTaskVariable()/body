{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("overlappingVariable",(Object)"processValue"));
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"overlappingVariable","taskValue");
  taskService.setVariableLocal(task.getId(),"anotherTaskVariable","taskValue");
  HttpDelete httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"overlappingVariable"));
  closeResponse(executeRequest(httpDelete,HttpStatus.SC_NO_CONTENT));
  assertFalse(taskService.hasVariableLocal(task.getId(),"overlappingVariable"));
  assertTrue(taskService.hasVariable(task.getId(),"overlappingVariable"));
  httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"anotherTaskVariable") + "?scope=local");
  closeResponse(executeRequest(httpDelete,HttpStatus.SC_NO_CONTENT));
  assertFalse(taskService.hasVariableLocal(task.getId(),"anotherTaskVariable"));
  assertTrue(taskService.hasVariable(task.getId(),"overlappingVariable"));
  httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"overlappingVariable") + "?scope=global");
  closeResponse(executeRequest(httpDelete,HttpStatus.SC_NO_CONTENT));
  assertFalse(taskService.hasVariable(task.getId(),"overlappingVariable"));
  closeResponse(executeRequest(httpDelete,HttpStatus.SC_NOT_FOUND));
}
