{
  BpmnModel bpmnModel=new BpmnModel();
  bpmnModel.setTargetNamespace("http://activiti.org/test");
  Map<String,JsonNode> shapeMap=new HashMap<String,JsonNode>();
  Map<String,JsonNode> sourceRefMap=new HashMap<String,JsonNode>();
  Map<String,JsonNode> edgeMap=new HashMap<String,JsonNode>();
  Map<String,List<JsonNode>> sourceAndTargetMap=new HashMap<String,List<JsonNode>>();
  readShapeDI(modelNode,0,0,shapeMap,sourceRefMap,bpmnModel);
  filterAllEdges(modelNode,edgeMap,sourceAndTargetMap,shapeMap,sourceRefMap);
  readEdgeDI(edgeMap,sourceAndTargetMap,bpmnModel);
  ArrayNode shapesArrayNode=(ArrayNode)modelNode.get(EDITOR_CHILD_SHAPES);
  if (shapesArrayNode == null || shapesArrayNode.size() == 0)   return bpmnModel;
  boolean nonEmptyPoolFound=false;
  Map<String,Lane> elementInLaneMap=new HashMap<String,Lane>();
  for (  JsonNode shapeNode : shapesArrayNode) {
    String stencilId=BpmnJsonConverterUtil.getStencilId(shapeNode);
    if (STENCIL_POOL.equals(stencilId)) {
      Pool pool=new Pool();
      pool.setId(BpmnJsonConverterUtil.getElementId(shapeNode));
      pool.setName(JsonConverterUtil.getPropertyValueAsString(PROPERTY_NAME,shapeNode));
      pool.setProcessRef(JsonConverterUtil.getPropertyValueAsString(PROPERTY_PROCESS_ID,shapeNode));
      pool.setExecutable(JsonConverterUtil.getPropertyValueAsBoolean(PROPERTY_PROCESS_EXECUTABLE,shapeNode,true));
      bpmnModel.getPools().add(pool);
      Process process=new Process();
      process.setId(pool.getProcessRef());
      process.setName(pool.getName());
      process.setExecutable(pool.isExecutable());
      bpmnModel.addProcess(process);
      ArrayNode laneArrayNode=(ArrayNode)shapeNode.get(EDITOR_CHILD_SHAPES);
      for (      JsonNode laneNode : laneArrayNode) {
        String laneStencilId=BpmnJsonConverterUtil.getStencilId(laneNode);
        if (STENCIL_LANE.equals(laneStencilId)) {
          nonEmptyPoolFound=true;
          Lane lane=new Lane();
          lane.setId(BpmnJsonConverterUtil.getElementId(laneNode));
          lane.setName(JsonConverterUtil.getPropertyValueAsString(PROPERTY_NAME,laneNode));
          lane.setParentProcess(process);
          process.getLanes().add(lane);
          processJsonElements(laneNode.get(EDITOR_CHILD_SHAPES),modelNode,lane,shapeMap,bpmnModel);
          if (CollectionUtils.isNotEmpty(lane.getFlowReferences())) {
            for (            String elementRef : lane.getFlowReferences()) {
              elementInLaneMap.put(elementRef,lane);
            }
          }
        }
      }
    }
  }
  if (nonEmptyPoolFound == false) {
    Process process=new Process();
    bpmnModel.getProcesses().add(process);
    process.setId(BpmnJsonConverterUtil.getPropertyValueAsString(PROPERTY_PROCESS_ID,modelNode));
    process.setName(BpmnJsonConverterUtil.getPropertyValueAsString(PROPERTY_NAME,modelNode));
    String namespace=BpmnJsonConverterUtil.getPropertyValueAsString(PROPERTY_PROCESS_NAMESPACE,modelNode);
    if (StringUtils.isNotEmpty(namespace)) {
      bpmnModel.setTargetNamespace(namespace);
    }
    process.setDocumentation(BpmnJsonConverterUtil.getPropertyValueAsString(PROPERTY_DOCUMENTATION,modelNode));
    JsonNode processExecutableNode=JsonConverterUtil.getProperty(PROPERTY_PROCESS_EXECUTABLE,modelNode);
    if (processExecutableNode != null && StringUtils.isNotEmpty(processExecutableNode.asText())) {
      process.setExecutable(JsonConverterUtil.getPropertyValueAsBoolean(PROPERTY_PROCESS_EXECUTABLE,modelNode));
    }
    BpmnJsonConverterUtil.convertJsonToListeners(modelNode,process);
    JsonNode eventListenersNode=BpmnJsonConverterUtil.getProperty(PROPERTY_EVENT_LISTENERS,modelNode);
    if (eventListenersNode != null) {
      eventListenersNode=BpmnJsonConverterUtil.validateIfNodeIsTextual(eventListenersNode);
      BpmnJsonConverterUtil.parseEventListeners(eventListenersNode.get(PROPERTY_EVENTLISTENER_VALUE),process);
    }
    JsonNode processDataPropertiesNode=modelNode.get(EDITOR_SHAPE_PROPERTIES).get(PROPERTY_DATA_PROPERTIES);
    if (processDataPropertiesNode != null) {
      List<ValuedDataObject> dataObjects=BpmnJsonConverterUtil.convertJsonToDataProperties(processDataPropertiesNode,process);
      process.setDataObjects(dataObjects);
      process.getFlowElements().addAll(dataObjects);
    }
    processJsonElements(shapesArrayNode,modelNode,process,shapeMap,bpmnModel);
  }
 else {
    for (    JsonNode shapeNode : shapesArrayNode) {
      if (STENCIL_SEQUENCE_FLOW.equalsIgnoreCase(BpmnJsonConverterUtil.getStencilId(shapeNode)) || STENCIL_ASSOCIATION.equalsIgnoreCase(BpmnJsonConverterUtil.getStencilId(shapeNode))) {
        String sourceRef=BpmnJsonConverterUtil.lookForSourceRef(shapeNode.get(EDITOR_SHAPE_ID).asText(),modelNode.get(EDITOR_CHILD_SHAPES));
        if (sourceRef != null) {
          Lane lane=elementInLaneMap.get(sourceRef);
          SequenceFlowJsonConverter flowConverter=new SequenceFlowJsonConverter();
          if (lane != null) {
            flowConverter.convertToBpmnModel(shapeNode,modelNode,this,lane,shapeMap,bpmnModel);
          }
 else {
            flowConverter.convertToBpmnModel(shapeNode,modelNode,this,bpmnModel.getProcesses().get(0),shapeMap,bpmnModel);
          }
        }
      }
    }
  }
  Map<String,SubProcess> subShapesMap=new HashMap<String,SubProcess>();
  for (  Process process : bpmnModel.getProcesses()) {
    for (    FlowElement flowElement : process.findFlowElementsOfType(SubProcess.class)) {
      SubProcess subProcess=(SubProcess)flowElement;
      fillSubShapes(subShapesMap,subProcess);
    }
    if (subShapesMap.size() > 0) {
      List<String> removeSubFlowsList=new ArrayList<String>();
      for (      FlowElement flowElement : process.findFlowElementsOfType(SequenceFlow.class)) {
        SequenceFlow sequenceFlow=(SequenceFlow)flowElement;
        if (subShapesMap.containsKey(sequenceFlow.getSourceRef())) {
          SubProcess subProcess=subShapesMap.get(sequenceFlow.getSourceRef());
          if (subProcess.getFlowElement(sequenceFlow.getId()) == null) {
            subProcess.addFlowElement(sequenceFlow);
            removeSubFlowsList.add(sequenceFlow.getId());
          }
        }
      }
      for (      String flowId : removeSubFlowsList) {
        process.removeFlowElement(flowId);
      }
    }
  }
  Map<String,FlowWithContainer> allFlowMap=new HashMap<String,FlowWithContainer>();
  List<Gateway> gatewayWithOrderList=new ArrayList<Gateway>();
  for (  Process process : bpmnModel.getProcesses()) {
    postProcessElements(process,process.getFlowElements(),edgeMap,bpmnModel,allFlowMap,gatewayWithOrderList);
  }
  for (  Gateway gateway : gatewayWithOrderList) {
    List<ExtensionElement> orderList=gateway.getExtensionElements().get("EDITOR_FLOW_ORDER");
    if (CollectionUtils.isNotEmpty(orderList)) {
      for (      ExtensionElement orderElement : orderList) {
        String flowValue=orderElement.getElementText();
        if (StringUtils.isNotEmpty(flowValue)) {
          if (allFlowMap.containsKey(flowValue)) {
            FlowWithContainer flowWithContainer=allFlowMap.get(flowValue);
            flowWithContainer.getFlowContainer().removeFlowElement(flowWithContainer.getSequenceFlow().getId());
            flowWithContainer.getFlowContainer().addFlowElement(flowWithContainer.getSequenceFlow());
          }
        }
      }
    }
    gateway.getExtensionElements().remove("EDITOR_FLOW_ORDER");
  }
  return bpmnModel;
}
