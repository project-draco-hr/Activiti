{
  Visitor<T,Boolean> visitor=new VisitorImpl<T,Boolean>(Boolean.FALSE){
    public void visit(    String key,    RadixTreeNode<T> parent,    RadixTreeNode<T> node){
      result=node.isReal();
      if (result) {
        if (node.getChildern().size() == 0) {
          Iterator<RadixTreeNode<T>> it=parent.getChildern().iterator();
          while (it.hasNext()) {
            if (it.next().getKey().equals(node.getKey())) {
              it.remove();
              break;
            }
          }
          if (parent.getChildern().size() == 1 && parent.isReal() == false) {
            mergeNodes(parent,parent.getChildern().get(0));
          }
        }
 else         if (node.getChildern().size() == 1) {
          mergeNodes(node,node.getChildern().get(0));
        }
 else {
          node.setReal(false);
        }
      }
    }
    /** 
 * Merge a child into its parent node. Operation only valid if it is
 * only child of the parent node and parent node is not a real node.
 * @param parentThe parent Node
 * @param childThe child Node
 */
    private void mergeNodes(    RadixTreeNode<T> parent,    RadixTreeNode<T> child){
      parent.setKey(parent.getKey() + child.getKey());
      parent.setReal(child.isReal());
      parent.setValue(child.getValue());
      parent.setChildern(child.getChildern());
    }
  }
;
  visit(key,visitor);
  if (visitor.getResult()) {
    size--;
  }
  return visitor.getResult().booleanValue();
}
