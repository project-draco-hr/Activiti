{
  BpmnModel bpmnModel=bpmnParse.getBpmnModel();
  ScopeImpl scope=bpmnParse.getCurrentScope();
  ActivityImpl sourceActivity=scope.findActivity(sequenceFlow.getSourceRef());
  ActivityImpl destinationActivity=scope.findActivity(sequenceFlow.getTargetRef());
  if (sourceActivity == null) {
    bpmnModel.addProblem("Invalid source '" + sequenceFlow.getSourceRef() + "' of sequence flow '"+ sequenceFlow.getId()+ "'",sequenceFlow);
  }
 else   if (destinationActivity == null) {
    throw new ActivitiException("Invalid destination '" + sequenceFlow.getTargetRef() + "' of sequence flow '"+ sequenceFlow.getId()+ "'");
  }
 else   if (!(sourceActivity.getActivityBehavior() instanceof EventBasedGatewayActivityBehavior) && destinationActivity.getActivityBehavior() instanceof IntermediateCatchEventActivityBehavior && (destinationActivity.getParentActivity() != null)&& (destinationActivity.getParentActivity().getActivityBehavior() instanceof EventBasedGatewayActivityBehavior)) {
    bpmnModel.addProblem("Invalid incoming sequenceflow " + sequenceFlow.getId() + " for intermediateCatchEvent with id '"+ destinationActivity.getId()+ "' connected to an event-based gateway.",sequenceFlow);
  }
 else {
    TransitionImpl transition=sourceActivity.createOutgoingTransition(sequenceFlow.getId());
    bpmnParse.getSequenceFlows().put(sequenceFlow.getId(),transition);
    transition.setProperty("name",sequenceFlow.getName());
    transition.setProperty("documentation",sequenceFlow.getDocumentation());
    transition.setDestination(destinationActivity);
    if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {
      Condition expressionCondition=new UelExpressionCondition(bpmnParse.getExpressionManager().createExpression(sequenceFlow.getConditionExpression()));
      transition.setProperty(PROPERTYNAME_CONDITION_TEXT,sequenceFlow.getConditionExpression());
      transition.setProperty(PROPERTYNAME_CONDITION,expressionCondition);
    }
    createExecutionListenersOnTransition(bpmnParse,sequenceFlow.getExecutionListeners(),transition);
  }
}
