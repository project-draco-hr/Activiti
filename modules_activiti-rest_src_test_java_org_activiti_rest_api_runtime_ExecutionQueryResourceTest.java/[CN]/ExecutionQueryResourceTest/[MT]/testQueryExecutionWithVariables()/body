{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  Execution parentExecution=runtimeService.startProcessInstanceByKey("processOne",processVariables);
  Execution childExecution=runtimeService.createExecutionQuery().activityId("processTask").singleResult();
  assertNotNull(childExecution);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_QUERY);
  ObjectNode requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("variables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","azeRTY");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,parentExecution.getId());
  requestNode=objectMapper.createObjectNode();
  variableArray=objectMapper.createArrayNode();
  variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("processInstanceVariables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","notEquals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","azeRTY");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
  variableNode.removeAll();
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,childExecution.getId(),parentExecution.getId());
}
