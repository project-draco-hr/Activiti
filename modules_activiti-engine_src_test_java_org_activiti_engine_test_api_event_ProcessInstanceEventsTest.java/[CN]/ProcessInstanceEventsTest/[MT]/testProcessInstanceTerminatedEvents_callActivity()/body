{
  ProcessInstance pi=runtimeService.startProcessInstanceByKey("terminateEndEventExample");
  long executionEntities=runtimeService.createExecutionQuery().count();
  assertEquals(1,executionEntities);
  Task task=taskService.createTaskQuery().processInstanceId(pi.getId()).taskDefinitionKey("preNormalEnd").singleResult();
  taskService.complete(task.getId());
  assertProcessEnded(pi.getId());
  List<ActivitiEvent> processTerminatedEvents=listener.filterEvents(ActivitiEventType.PROCESS_CANCELLED);
  assertEquals("There should be exactly one ActivitiEventType.PROCESS_TERMINATED event after the task complete.",1,processTerminatedEvents.size());
  ActivitiProcessCancelledEventImpl processCancelledEvent=(ActivitiProcessCancelledEventImpl)processTerminatedEvents.get(0);
  assertNotEquals(pi.getProcessInstanceId(),processCancelledEvent.getProcessInstanceId());
  assertThat(processCancelledEvent.getProcessDefinitionId(),containsString("terminateEndEventSubprocessExample"));
  List<ActivitiEvent> activityTerminatedEvents=listener.filterEvents(ActivitiEventType.ACTIVITY_CANCELLED);
  assertThat("There is no ActivitiEventType.ACTIVITY_CANCELLED event after the task complete.",activityTerminatedEvents.isEmpty(),is(true));
}
