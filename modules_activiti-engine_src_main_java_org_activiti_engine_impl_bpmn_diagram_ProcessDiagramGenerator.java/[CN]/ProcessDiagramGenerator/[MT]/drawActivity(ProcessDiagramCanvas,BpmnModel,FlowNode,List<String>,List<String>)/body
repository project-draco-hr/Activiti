{
  ActivityDrawInstruction drawInstruction=activityDrawInstructions.get(flowNode.getClass());
  if (drawInstruction != null) {
    drawInstruction.draw(processDiagramCanvas,bpmnModel,flowNode);
    boolean multiInstanceSequential=false, multiInstanceParallel=false, collapsed=false;
    if (flowNode instanceof Activity) {
      Activity activity=(Activity)flowNode;
      MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics=activity.getLoopCharacteristics();
      if (multiInstanceLoopCharacteristics != null) {
        multiInstanceSequential=multiInstanceLoopCharacteristics.isSequential();
        multiInstanceParallel=!multiInstanceSequential;
      }
    }
    GraphicInfo graphicInfo=bpmnModel.getGraphicInfo(flowNode.getId());
    if (flowNode instanceof SubProcess) {
      collapsed=!graphicInfo.isExpanded();
    }
 else     if (flowNode instanceof CallActivity) {
      collapsed=true;
    }
    processDiagramCanvas.drawActivityMarkers((int)graphicInfo.getX(),(int)graphicInfo.getY(),(int)graphicInfo.getWidth(),(int)graphicInfo.getHeight(),multiInstanceSequential,multiInstanceParallel,collapsed);
    if (highLightedActivities.contains(flowNode.getId())) {
      drawHighLight(processDiagramCanvas,bpmnModel.getGraphicInfo(flowNode.getId()));
    }
  }
  for (  SequenceFlow sequenceFlow : flowNode.getOutgoingFlows()) {
    List<GraphicInfo> graphicInfoList=bpmnModel.getFlowLocationGraphicInfo(sequenceFlow.getId());
    for (int i=1; i < graphicInfoList.size(); i++) {
      GraphicInfo graphicInfo=graphicInfoList.get(i);
      GraphicInfo previousGraphicInfo=graphicInfoList.get(i - 1);
      boolean highLighted=(highLightedFlows.contains(sequenceFlow.getId()));
      boolean drawConditionalIndicator=(i == 1) && sequenceFlow.getConditionExpression() != null && !(flowNode instanceof Gateway);
      if (i < graphicInfoList.size() - 1) {
        processDiagramCanvas.drawSequenceflowWithoutArrow((int)previousGraphicInfo.getX(),(int)previousGraphicInfo.getY(),(int)graphicInfo.getX(),(int)graphicInfo.getY(),drawConditionalIndicator,highLighted);
      }
 else {
        processDiagramCanvas.drawSequenceflow((int)previousGraphicInfo.getX(),(int)previousGraphicInfo.getY(),(int)graphicInfo.getX(),(int)graphicInfo.getY(),drawConditionalIndicator,highLighted);
      }
    }
  }
  if (flowNode instanceof FlowElementsContainer) {
    for (    FlowElement nestedFlowElement : ((FlowElementsContainer)flowNode).getFlowElements()) {
      if (nestedFlowElement instanceof FlowNode) {
        drawActivity(processDiagramCanvas,bpmnModel,(FlowNode)nestedFlowElement,highLightedActivities,highLightedFlows);
      }
    }
  }
}
