{
  DeploymentManager deploymentManager=commandContext.getProcessEngineConfiguration().getDeploymentManager();
  ProcessDefinitionEntity processDefinition=null;
  if (processDefinitionId != null) {
    processDefinition=deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);
    if (processDefinition == null) {
      throw new ActivitiObjectNotFoundException("No process definition found for id = '" + processDefinitionId + "'",ProcessDefinition.class);
    }
  }
 else   if (processDefinitionKey != null && (tenantId == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId))) {
    processDefinition=deploymentManager.findDeployedLatestProcessDefinitionByKey(processDefinitionKey);
    if (processDefinition == null) {
      throw new ActivitiObjectNotFoundException("No process definition found for key '" + processDefinitionKey + "'",ProcessDefinition.class);
    }
  }
 else   if (processDefinitionKey != null && tenantId != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId)) {
    processDefinition=deploymentManager.findDeployedLatestProcessDefinitionByKeyAndTenantId(processDefinitionKey,tenantId);
    if (processDefinition == null) {
      throw new ActivitiObjectNotFoundException("No process definition found for key '" + processDefinitionKey + "' for tenant identifier "+ tenantId,ProcessDefinition.class);
    }
  }
 else {
    throw new ActivitiIllegalArgumentException("processDefinitionKey and processDefinitionId are null");
  }
  if (deploymentManager.isProcessDefinitionSuspended(processDefinition.getId())) {
    throw new ActivitiException("Cannot start process instance. Process definition " + processDefinition.getName() + " (id = "+ processDefinition.getId()+ ") is suspended");
  }
  ExecutionEntity processInstance=processDefinition.createProcessInstance(businessKey);
  initializeVariables(processInstance);
  if (processInstanceName != null) {
    processInstance.setName(processInstanceName);
    commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstance.getId(),processInstanceName);
  }
  processInstance.start();
  return processInstance;
}
