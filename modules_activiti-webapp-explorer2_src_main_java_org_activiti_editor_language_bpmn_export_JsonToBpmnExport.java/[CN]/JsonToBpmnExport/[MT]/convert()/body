{
  try {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLOutputFactory xof=XMLOutputFactory.newInstance();
    OutputStreamWriter out=new OutputStreamWriter(outputStream,"UTF-8");
    XMLStreamWriter writer=xof.createXMLStreamWriter(out);
    xtw=new IndentingXMLStreamWriter(writer);
    xtw.writeStartDocument("UTF-8","1.0");
    xtw.writeStartElement("definitions");
    xtw.setDefaultNamespace(BPMN2_NAMESPACE);
    xtw.writeDefaultNamespace(BPMN2_NAMESPACE);
    xtw.writeNamespace("xsi",XSI_NAMESPACE);
    xtw.writeNamespace(ACTIVITI_EXTENSIONS_PREFIX,ACTIVITI_EXTENSIONS_NAMESPACE);
    xtw.writeNamespace(BPMNDI_PREFIX,BPMNDI_NAMESPACE);
    xtw.writeNamespace(OMGDC_PREFIX,OMGDC_NAMESPACE);
    xtw.writeNamespace(OMGDI_PREFIX,OMGDI_NAMESPACE);
    xtw.writeAttribute("typeLanguage",SCHEMA_NAMESPACE);
    xtw.writeAttribute("expressionLanguage",XPATH_NAMESPACE);
    xtw.writeAttribute("targetNamespace",PROCESS_NAMESPACE);
    xtw.writeStartElement("process");
    xtw.writeAttribute("id",BaseShapeHelper.getPropertyValueAsString(PROPERTY_PROCESS_ID,modelNode));
    if (StringUtils.isNotEmpty(BaseShapeHelper.getPropertyValueAsString(PROPERTY_NAME,modelNode))) {
      xtw.writeAttribute("name",BaseShapeHelper.getPropertyValueAsString(PROPERTY_NAME,modelNode));
    }
    xtw.writeAttribute("isExecutable","true");
    if (StringUtils.isNotEmpty(BaseShapeHelper.getPropertyValueAsString(PROPERTY_DOCUMENTATION,modelNode))) {
      xtw.writeStartElement("documentation");
      xtw.writeCharacters(BaseShapeHelper.getPropertyValueAsString(PROPERTY_DOCUMENTATION,modelNode));
      xtw.writeEndElement();
    }
    ArrayNode shapesArrayNode=(ArrayNode)modelNode.get("childShapes");
    for (    JsonNode shapeNode : shapesArrayNode) {
      createXML((ObjectNode)shapeNode);
    }
    xtw.writeEndElement();
    new BpmnDIExport().createDIXML(modelNode,xtw);
    xtw.writeEndElement();
    xtw.writeEndDocument();
    xtw.flush();
    outputStream.close();
    xtw.close();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Error writing BPMN XML",e);
    throw new XMLException("Error writing BPMN XML",e);
  }
}
