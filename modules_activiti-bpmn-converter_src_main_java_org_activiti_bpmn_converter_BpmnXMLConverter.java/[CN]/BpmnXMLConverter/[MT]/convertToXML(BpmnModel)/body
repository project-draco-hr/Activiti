{
  try {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLOutputFactory xof=XMLOutputFactory.newInstance();
    OutputStreamWriter out=new OutputStreamWriter(outputStream,"UTF-8");
    XMLStreamWriter writer=xof.createXMLStreamWriter(out);
    XMLStreamWriter xtw=new IndentingXMLStreamWriter(writer);
    DefinitionsRootExport.writeRootElement(xtw);
    SignalAndMessageDefinitionExport.writeSignalsAndMessages(model,xtw);
    PoolExport.writePools(model,xtw);
    for (    Process process : model.getProcesses()) {
      if (process.getFlowElements().size() == 0 && process.getLanes().size() == 0) {
        continue;
      }
      xtw.writeStartElement(ELEMENT_PROCESS);
      xtw.writeAttribute(ATTRIBUTE_ID,process.getId());
      if (StringUtils.isNotEmpty(process.getName())) {
        xtw.writeAttribute(ATTRIBUTE_NAME,process.getName());
      }
      if (StringUtils.isNotEmpty(process.getTargetNamespace())) {
        xtw.writeAttribute(TARGET_NAMESPACE_ATTRIBUTE,process.getTargetNamespace());
      }
      xtw.writeAttribute(ATTRIBUTE_PROCESS_EXECUTABLE,ATTRIBUTE_VALUE_TRUE);
      if (StringUtils.isNotEmpty(process.getDocumentation())) {
        xtw.writeStartElement(ELEMENT_DOCUMENTATION);
        xtw.writeCharacters(process.getDocumentation());
        xtw.writeEndElement();
      }
      LaneExport.writeLanes(process,xtw);
      boolean wroteListener=ActivitiListenerUtil.writeListeners(process,false,xtw);
      if (wroteListener) {
        xtw.writeEndElement();
      }
      for (      FlowElement flowElement : process.getFlowElements()) {
        createXML(flowElement,xtw);
      }
      for (      Artifact artifact : process.getArtifacts()) {
        createXML(artifact,xtw);
      }
      xtw.writeEndElement();
    }
    BPMNDIExport.writeBPMNDI(model,xtw);
    xtw.writeEndElement();
    xtw.writeEndDocument();
    xtw.flush();
    outputStream.close();
    xtw.close();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Error writing BPMN XML",e);
    throw new XMLException("Error writing BPMN XML",e);
  }
}
