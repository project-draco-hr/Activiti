{
  BpmnModel model=new BpmnModel();
  try {
    Process activeProcess=null;
    List<SubProcess> activeSubProcessList=new ArrayList<SubProcess>();
    while (xtr.hasNext()) {
      try {
        xtr.next();
      }
 catch (      Exception e) {
        LOGGER.error("Error reading XML document",e);
        return model;
      }
      if (xtr.isEndElement() && ELEMENT_SUBPROCESS.equalsIgnoreCase(xtr.getLocalName())) {
        activeSubProcessList.remove(activeSubProcessList.size() - 1);
      }
      if (xtr.isStartElement() == false)       continue;
      if (ELEMENT_DEFINITIONS.equalsIgnoreCase(xtr.getLocalName())) {
        model.setTargetNamespace(xtr.getAttributeValue(null,TARGET_NAMESPACE_ATTRIBUTE));
      }
 else       if (ELEMENT_SIGNAL.equalsIgnoreCase(xtr.getLocalName())) {
        if (StringUtils.isNotEmpty(xtr.getAttributeValue(null,ATTRIBUTE_ID))) {
          String signalId=xtr.getAttributeValue(null,ATTRIBUTE_ID);
          String signalName=xtr.getAttributeValue(null,ATTRIBUTE_NAME);
          model.addSignal(signalId,signalName);
        }
      }
 else       if (ELEMENT_MESSAGE.equalsIgnoreCase(xtr.getLocalName())) {
        if (StringUtils.isNotEmpty(xtr.getAttributeValue(null,ATTRIBUTE_ID))) {
          String messageId=xtr.getAttributeValue(null,ATTRIBUTE_ID);
          String messageName=xtr.getAttributeValue(null,ATTRIBUTE_NAME);
          model.addMessage(messageId,messageName);
        }
      }
 else       if (ELEMENT_PARTICIPANT.equalsIgnoreCase(xtr.getLocalName())) {
        if (StringUtils.isNotEmpty(xtr.getAttributeValue(null,ATTRIBUTE_ID))) {
          Pool pool=new Pool();
          pool.setId(xtr.getAttributeValue(null,ATTRIBUTE_ID));
          pool.setName(xtr.getAttributeValue(null,ATTRIBUTE_NAME));
          pool.setProcessRef(xtr.getAttributeValue(null,ATTRIBUTE_PROCESS_REF));
          model.getPools().add(pool);
        }
      }
 else       if (ELEMENT_PROCESS.equalsIgnoreCase(xtr.getLocalName())) {
        if (StringUtils.isNotEmpty(xtr.getAttributeValue(null,ATTRIBUTE_ID))) {
          String processId=xtr.getAttributeValue(null,ATTRIBUTE_ID);
          Process process=new Process();
          process.setId(processId);
          process.setName(xtr.getAttributeValue(null,ATTRIBUTE_NAME));
          model.getProcesses().add(process);
          activeProcess=process;
        }
      }
 else       if (ELEMENT_LANE.equalsIgnoreCase(xtr.getLocalName())) {
        new LaneParser().parse(xtr,activeProcess);
      }
 else       if (ELEMENT_DOCUMENTATION.equalsIgnoreCase(xtr.getLocalName())) {
        BaseElement parentElement=null;
        if (activeSubProcessList.size() > 0) {
          parentElement=activeSubProcessList.get(activeSubProcessList.size() - 1);
        }
 else         if (activeProcess != null) {
          parentElement=activeProcess;
        }
        new DocumentationParser().parseChildElement(xtr,parentElement);
      }
 else       if (ELEMENT_SUBPROCESS.equalsIgnoreCase(xtr.getLocalName())) {
        new SubProcessParser().parse(xtr,activeSubProcessList,activeProcess);
      }
 else       if (ELEMENT_DI_SHAPE.equalsIgnoreCase(xtr.getLocalName())) {
        new BpmnShapeParser().parse(xtr,model);
      }
 else       if (ELEMENT_DI_EDGE.equalsIgnoreCase(xtr.getLocalName())) {
        new BpmnEdgeParser().parse(xtr,model);
      }
 else       if (ELEMENT_EXECUTION_LISTENER.equalsIgnoreCase(xtr.getLocalName())) {
        new ExecutionListenerParser().parseChildElement(xtr,activeProcess);
      }
 else {
        if (activeSubProcessList.size() > 0 && ELEMENT_EXTENSIONS.equalsIgnoreCase(xtr.getLocalName())) {
          new ExecutionListenerParser().parseChildElement(xtr,activeSubProcessList.get(activeSubProcessList.size() - 1));
        }
 else         if (activeSubProcessList.size() > 0 && ELEMENT_MULTIINSTANCE.equalsIgnoreCase(xtr.getLocalName())) {
          new MultiInstanceParser().parseChildElement(xtr,activeSubProcessList.get(activeSubProcessList.size() - 1));
        }
 else         if (convertersToBpmnMap.containsKey(xtr.getLocalName())) {
          Class<? extends BaseBpmnXMLConverter> converterClass=convertersToBpmnMap.get(xtr.getLocalName());
          BaseBpmnXMLConverter converter=converterClass.newInstance();
          if (userTaskFormTypes != null && ELEMENT_TASK_USER.equals(xtr.getLocalName())) {
            UserTaskXMLConverter userTaskConverter=(UserTaskXMLConverter)converter;
            for (            String formType : userTaskFormTypes) {
              userTaskConverter.addFormType(formType);
            }
          }
 else           if (startEventFormTypes != null && ELEMENT_EVENT_START.equals(xtr.getLocalName())) {
            StartEventXMLConverter startEventConverter=(StartEventXMLConverter)converter;
            for (            String formType : startEventFormTypes) {
              startEventConverter.addFormType(formType);
            }
          }
          converter.convertToBpmnModel(xtr,model,activeProcess,activeSubProcessList);
        }
      }
    }
    for (    Process process : model.getProcesses()) {
      processFlowElements(process.getFlowElements(),process);
    }
  }
 catch (  Exception e) {
    LOGGER.error("Error processing BPMN document",e);
  }
  return model;
}
