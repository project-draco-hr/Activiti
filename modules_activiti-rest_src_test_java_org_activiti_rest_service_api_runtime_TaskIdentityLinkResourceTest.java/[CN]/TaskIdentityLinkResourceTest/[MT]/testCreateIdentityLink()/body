{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("user","kermit");
    requestNode.put("type","myType");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINKS_COLLECTION,task.getId()));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    CloseableHttpResponse response=executeRequest(httpPost,HttpStatus.SC_CREATED);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals("kermit",responseNode.get("user").textValue());
    assertEquals("myType",responseNode.get("type").textValue());
    assertTrue(responseNode.get("group").isNull());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINK,task.getId(),RestUrls.SEGMENT_IDENTITYLINKS_FAMILY_USERS,"kermit","myType")));
    requestNode=objectMapper.createObjectNode();
    requestNode.put("group","sales");
    requestNode.put("type","myType");
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    response=executeRequest(httpPost,HttpStatus.SC_CREATED);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals("sales",responseNode.get("group").textValue());
    assertEquals("myType",responseNode.get("type").textValue());
    assertTrue(responseNode.get("user").isNull());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINK,task.getId(),RestUrls.SEGMENT_IDENTITYLINKS_FAMILY_GROUPS,"sales","myType")));
    httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINKS_COLLECTION,"unexistingtask"));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_NOT_FOUND));
    requestNode=objectMapper.createObjectNode();
    requestNode.put("type","myType");
    httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINKS_COLLECTION,task.getId()));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_BAD_REQUEST));
    requestNode=objectMapper.createObjectNode();
    requestNode.put("type","myType");
    requestNode.put("user","kermit");
    requestNode.put("group","sales");
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_BAD_REQUEST));
    requestNode=objectMapper.createObjectNode();
    requestNode.put("group","sales");
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_BAD_REQUEST));
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
