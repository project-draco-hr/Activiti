{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.addUserIdentityLink(task.getId(),"kermit","myType");
    HttpDelete httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINK,task.getId(),"users","kermit","myType"));
    closeResponse(executeRequest(httpDelete,HttpStatus.SC_NO_CONTENT));
    httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINK,task.getId(),RestUrls.SEGMENT_IDENTITYLINKS_FAMILY_USERS,"kermit","unexistingtype"));
    closeResponse(executeRequest(httpDelete,HttpStatus.SC_NOT_FOUND));
    httpDelete=new HttpDelete(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_IDENTITYLINK,"unexistingtask",RestUrls.SEGMENT_IDENTITYLINKS_FAMILY_USERS,"kermit","myType"));
    closeResponse(executeRequest(httpDelete,HttpStatus.SC_NOT_FOUND));
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
