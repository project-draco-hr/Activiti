{
  try {
    ByteArrayOutputStream zipOutput=new ByteArrayOutputStream();
    ZipOutputStream zipStream=new ZipOutputStream(zipOutput);
    zipStream.putNextEntry(new ZipEntry("oneTaskProcess.bpmn20.xml"));
    IOUtils.copy(ReflectUtil.getResourceAsStream("org/activiti/rest/service/api/repository/oneTaskProcess.bpmn20.xml"),zipStream);
    zipStream.closeEntry();
    zipStream.putNextEntry(new ZipEntry("test.txt"));
    IOUtils.write("Testing REST-deployment with tenant",zipStream);
    zipStream.closeEntry();
    zipStream.close();
    Representation uploadRepresentation=new HttpMultipartRepresentation("test-deployment.bar",new ByteArrayInputStream(zipOutput.toByteArray()));
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_DEPLOYMENT_COLLECTION));
    Representation response=client.post(uploadRepresentation);
    assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    String deploymentId=responseNode.get("id").getTextValue();
    String name=responseNode.get("name").getTextValue();
    String category=responseNode.get("category").getTextValue();
    String deployTime=responseNode.get("deploymentTime").getTextValue();
    String url=responseNode.get("url").getTextValue();
    String tenantId=responseNode.get("tenantId").getTextValue();
    assertNull(tenantId);
    assertNotNull(deploymentId);
    assertEquals(1L,repositoryService.createDeploymentQuery().deploymentId(deploymentId).count());
    assertNotNull(name);
    assertEquals("test-deployment.bar",name);
    assertNotNull(url);
    assertTrue(url.endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_DEPLOYMENT,deploymentId)));
    assertNull(category);
    assertNotNull(deployTime);
    List<String> resources=repositoryService.getDeploymentResourceNames(deploymentId);
    assertEquals(2L,resources.size());
    assertEquals(1L,repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId).count());
  }
  finally {
    List<Deployment> deployments=repositoryService.createDeploymentQuery().list();
    for (    Deployment deployment : deployments) {
      repositoryService.deleteDeployment(deployment.getId(),true);
    }
  }
}
