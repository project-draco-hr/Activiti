{
  try {
    ByteArrayOutputStream zipOutput=new ByteArrayOutputStream();
    ZipOutputStream zipStream=new ZipOutputStream(zipOutput);
    zipStream.putNextEntry(new ZipEntry("oneTaskProcess.bpmn20.xml"));
    IOUtils.copy(ReflectUtil.getResourceAsStream("org/activiti/rest/service/api/repository/oneTaskProcess.bpmn20.xml"),zipStream);
    zipStream.closeEntry();
    zipStream.putNextEntry(new ZipEntry("test.txt"));
    IOUtils.write("Testing REST-deployment",zipStream);
    zipStream.closeEntry();
    zipStream.close();
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_DEPLOYMENT_COLLECTION));
    httpPost.setEntity(HttpMultipartHelper.getMultiPartEntity("test-deployment.bar","application/zip",new ByteArrayInputStream(zipOutput.toByteArray()),Collections.singletonMap("tenantId","myTenant")));
    HttpResponse response=executeBinaryHttpRequest(httpPost,HttpStatus.SC_CREATED);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    String tenantId=responseNode.get("tenantId").textValue();
    assertEquals("myTenant",tenantId);
    String id=responseNode.get("id").textValue();
    Deployment deployment=repositoryService.createDeploymentQuery().deploymentId(id).singleResult();
    assertNotNull(deployment);
    assertEquals("myTenant",deployment.getTenantId());
  }
  finally {
    List<Deployment> deployments=repositoryService.createDeploymentQuery().list();
    for (    Deployment deployment : deployments) {
      repositoryService.deleteDeployment(deployment.getId(),true);
    }
  }
}
