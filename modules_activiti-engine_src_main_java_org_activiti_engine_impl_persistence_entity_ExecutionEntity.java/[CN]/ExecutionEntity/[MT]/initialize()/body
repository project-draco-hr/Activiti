{
  log.fine("initializing " + this);
  ScopeImpl scope=getScope();
  ensureParentInitialized();
  List<VariableDeclaration> variableDeclarations=(List<VariableDeclaration>)scope.getProperty(BpmnParse.PROPERTYNAME_VARIABLE_DECLARATIONS);
  if (variableDeclarations != null) {
    for (    VariableDeclaration variableDeclaration : variableDeclarations) {
      variableDeclaration.initialize(this,parent);
    }
  }
  List<TimerDeclarationImpl> timerDeclarations=(List<TimerDeclarationImpl>)scope.getProperty(BpmnParse.PROPERTYNAME_TIMER_DECLARATION);
  if (timerDeclarations != null) {
    for (    TimerDeclarationImpl timerDeclaration : timerDeclarations) {
      TimerEntity timer=timerDeclaration.prepareTimerEntity(this);
      Context.getCommandContext().getJobManager().schedule(timer);
    }
  }
  List<SignalEventDefinition> signalDefinitions=(List<SignalEventDefinition>)scope.getProperty(BpmnParse.PROPERTYNAME_SIGNAL_DEFINITION_NAME);
  if (signalDefinitions != null) {
    for (    SignalEventDefinition signalDefinition : signalDefinitions) {
      SignalEventSubscriptionEntity signalEventSubscriptionEntity=new SignalEventSubscriptionEntity(this);
      signalEventSubscriptionEntity.setEventName(signalDefinition.getSignalName());
      if (signalDefinition.getActivityId() != null) {
        ActivityImpl activity=getActivity().findActivity(signalDefinition.getActivityId());
        signalEventSubscriptionEntity.setActivity(activity);
      }
      Context.getCommandContext().getEventSubscriptionManager().insert(signalEventSubscriptionEntity);
    }
  }
}
