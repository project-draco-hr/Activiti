{
  log.fine("initializing " + this);
  ScopeImpl scope=getScope();
  ensureParentInitialized();
  List<VariableDeclaration> variableDeclarations=(List<VariableDeclaration>)scope.getProperty(BpmnParse.PROPERTYNAME_VARIABLE_DECLARATIONS);
  if (variableDeclarations != null) {
    for (    VariableDeclaration variableDeclaration : variableDeclarations) {
      variableDeclaration.initialize(this,parent);
    }
  }
  variableInstances=new HashMap<String,VariableInstanceEntity>();
  eventSubscriptions=new ArrayList<EventSubscriptionEntity>();
  jobs=new ArrayList<JobEntity>();
  tasks=new ArrayList<TaskEntity>();
  List<TimerDeclarationImpl> timerDeclarations=(List<TimerDeclarationImpl>)scope.getProperty(BpmnParse.PROPERTYNAME_TIMER_DECLARATION);
  if (timerDeclarations != null) {
    for (    TimerDeclarationImpl timerDeclaration : timerDeclarations) {
      TimerEntity timer=timerDeclaration.prepareTimerEntity(this);
      Context.getCommandContext().getJobManager().schedule(timer);
    }
  }
  List<EventDefinition> eventDefinitions=(List<EventDefinition>)scope.getProperty(BpmnParse.PROPERTYNAME_EVENT_DEFINITIONS);
  if (eventDefinitions != null) {
    for (    EventDefinition eventDefinition : eventDefinitions) {
      if (eventDefinition.isStartEvent()) {
        continue;
      }
      EventSubscriptionEntity eventSubscriptionEntity=null;
      if (eventDefinition.getEventType().equals("message")) {
        eventSubscriptionEntity=new MessageEventSubscriptionEntity(this);
      }
 else       if (eventDefinition.getEventType().equals("signal")) {
        eventSubscriptionEntity=new SignalEventSubscriptionEntity(this);
      }
 else {
        throw new ActivitiException("Found event definition of unknown type: " + eventDefinition.getEventType());
      }
      eventSubscriptionEntity.setEventName(eventDefinition.getEventName());
      if (eventDefinition.getActivityId() != null) {
        ActivityImpl activity=getActivity().findActivity(eventDefinition.getActivityId());
        eventSubscriptionEntity.setActivity(activity);
      }
      eventSubscriptionEntity.insert();
    }
  }
}
