{
  BpmnModel bpmnModel=new BpmnModel();
  Map<String,JsonNode> shapeMap=new HashMap<String,JsonNode>();
  Map<String,JsonNode> sourceRefMap=new HashMap<String,JsonNode>();
  Map<String,JsonNode> edgeMap=new HashMap<String,JsonNode>();
  Map<String,List<JsonNode>> sourceAndTargetMap=new HashMap<String,List<JsonNode>>();
  readShapeDI(modelNode,0,0,shapeMap,sourceRefMap,bpmnModel);
  filterAllEdges(modelNode,edgeMap,sourceAndTargetMap,shapeMap,sourceRefMap);
  readEdgeDI(edgeMap,sourceAndTargetMap,bpmnModel);
  JsonNode processIdNode=modelNode.get(EDITOR_SHAPE_PROPERTIES).get(PROPERTY_PROCESS_ID);
  if (processIdNode != null && StringUtils.isNotEmpty(processIdNode.asText())) {
    bpmnModel.getMainProcess().setId(processIdNode.asText());
  }
  JsonNode processNameNode=modelNode.get(EDITOR_SHAPE_PROPERTIES).get(PROPERTY_NAME);
  if (processNameNode != null && StringUtils.isNotEmpty(processNameNode.asText())) {
    bpmnModel.getMainProcess().setName(processNameNode.asText());
  }
  ArrayNode shapesArrayNode=(ArrayNode)modelNode.get(EDITOR_CHILD_SHAPES);
  processJsonElements(shapesArrayNode,modelNode,bpmnModel.getMainProcess());
  Map<String,SubProcess> subShapesMap=new HashMap<String,SubProcess>();
  for (  FlowElement flowElement : bpmnModel.getMainProcess().getFlowElements()) {
    if (flowElement instanceof SubProcess) {
      SubProcess subProcess=(SubProcess)flowElement;
      fillSubShapes(subShapesMap,subProcess);
    }
  }
  if (subShapesMap.size() > 0) {
    List<String> removeSubFlowsList=new ArrayList<String>();
    for (    FlowElement flowElement : bpmnModel.getMainProcess().getFlowElements()) {
      if (flowElement instanceof SequenceFlow) {
        SequenceFlow sequenceFlow=(SequenceFlow)flowElement;
        if (subShapesMap.containsKey(sequenceFlow.getSourceRef())) {
          SubProcess subProcess=subShapesMap.get(sequenceFlow.getSourceRef());
          subProcess.addFlowElement(sequenceFlow);
          removeSubFlowsList.add(sequenceFlow.getId());
        }
      }
    }
    for (    String flowId : removeSubFlowsList) {
      bpmnModel.getMainProcess().removeFlowElement(flowId);
    }
  }
  fillAttachedToRef(bpmnModel,bpmnModel.getMainProcess().getFlowElements());
  return bpmnModel;
}
