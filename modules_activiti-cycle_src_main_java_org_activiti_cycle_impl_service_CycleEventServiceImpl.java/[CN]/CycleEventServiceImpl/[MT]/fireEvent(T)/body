{
  Exception exception=null;
  List<CycleEventListener<T>> successfulEventListeners=new ArrayList<CycleEventListener<T>>();
  CycleEvents cycleEvents=CycleComponentFactory.getCycleComponentInstance(CycleEvents.class,CycleEvents.class);
  for (  CycleEventListener<T> eventListener : cycleEvents.getEventListeners((Class<T>)event.getClass())) {
    try {
      eventListener.onEvent(event);
      successfulEventListeners.add(eventListener);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,"Error while invoking EventListener '" + eventListener.getClass().getName() + "' with event '"+ event+ "': "+ e.getMessage(),e);
      exception=e;
      break;
    }
  }
  if (exception != null) {
    for (    CycleEventListener<T> cycleEventListener : successfulEventListeners) {
      if (cycleEventListener instanceof CycleCompensatingEventListener) {
        CycleCompensatingEventListener<T> compensatingListener=(CycleCompensatingEventListener<T>)cycleEventListener;
        try {
          compensatingListener.compensateEvent(event);
        }
 catch (        Exception e) {
          log.log(Level.SEVERE,"Error while compensating EventListener '" + compensatingListener.getClass().getName() + "' with event '"+ event+ "': "+ e.getMessage(),e);
        }
      }
      throw new RuntimeException("Error on" + event + ": "+ exception.getMessage(),exception);
    }
  }
}
