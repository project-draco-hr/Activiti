{
  ExecutionImpl propagatingExecution=null;
  ActivityImpl activity=execution.getActivity();
  if (activity.isScope()) {
    ExecutionImpl parentScopeInstance=null;
    if (execution.isConcurrent() && !execution.isScope()) {
      ExecutionImpl concurrentRoot=execution.getParent();
      parentScopeInstance=execution.getParent().getParent();
      log.fine("moving concurrent " + execution + " one scope up under "+ parentScopeInstance);
      List<ExecutionImpl> parentScopeInstanceExecutions=parentScopeInstance.getExecutions();
      List<ExecutionImpl> concurrentRootExecutions=concurrentRoot.getExecutions();
      if (parentScopeInstanceExecutions.size() == 1) {
        parentScopeInstanceExecutions.get(0).setConcurrent(true);
      }
      concurrentRootExecutions.remove(execution);
      parentScopeInstanceExecutions.add(execution);
      execution.setParent(parentScopeInstance);
      execution.setActivity(activity);
      propagatingExecution=execution;
      if (concurrentRootExecutions.size() == 1) {
        ExecutionImpl lastConcurrent=concurrentRootExecutions.get(0);
        if (lastConcurrent.isScope()) {
          lastConcurrent.setConcurrent(false);
        }
 else {
          log.fine("replacing concurrent root " + concurrentRoot + " with last concurrent "+ lastConcurrent);
          concurrentRoot.remove();
          parentScopeInstanceExecutions.add(lastConcurrent);
          lastConcurrent.setParent(parentScopeInstance);
          lastConcurrent.setActive(true);
          lastConcurrent.migrateScope(concurrentRoot);
        }
      }
    }
 else     if (execution.isConcurrent() && execution.isScope()) {
      log.fine("scoped concurrent " + execution + " becomes concurrent and remains under "+ execution.getParent());
      execution.destroy();
      propagatingExecution=execution;
    }
 else {
      propagatingExecution=execution.getParent();
      propagatingExecution.setActivity(execution.getActivity());
      propagatingExecution.setTransition(execution.getTransition());
      propagatingExecution.setActive(true);
      log.fine("destroy scope: scoped " + execution + " continues as parent scope "+ propagatingExecution);
      execution.destroy();
      execution.remove();
    }
  }
 else {
    propagatingExecution=execution;
  }
  ScopeImpl nextOuterScopeElement=activity.getParent();
  TransitionImpl transition=propagatingExecution.getTransition();
  ActivityImpl destination=transition.getDestination();
  if (transitionLeavesNextOuterScope(nextOuterScopeElement,destination)) {
    propagatingExecution.setActivity((ActivityImpl)nextOuterScopeElement);
    propagatingExecution.performOperation(TRANSITION_NOTIFY_LISTENER_END);
  }
 else {
    propagatingExecution.performOperation(TRANSITION_NOTIFY_LISTENER_TAKE);
  }
}
