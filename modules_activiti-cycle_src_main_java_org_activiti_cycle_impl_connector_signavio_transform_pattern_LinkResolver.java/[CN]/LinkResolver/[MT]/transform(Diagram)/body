{
  List<Shape> shapes=diagram.getShapes();
  Set<Shape> shapesToRemove=new HashSet<Shape>();
  for (  Shape shape : shapes) {
    if ("IntermediateLinkEventThrowing".equals(shape.getStencilId())) {
      boolean targetFound=false;
      ArrayList<Shape> incomings=shape.getIncomings();
      for (      Shape incomingShape : incomings) {
        if ("SequenceFlow".equals(incomingShape.getStencilId())) {
          for (          Shape shape2 : shapes) {
            if ("IntermediateLinkEventCatching".equals(shape2.getStencilId()) && shape.getProperty("name") != null && shape.getProperty("name").equals(shape2.getProperty("name"))) {
              for (              Shape outgoingShape : shape2.getOutgoings()) {
                if ("SequenceFlow".equals(outgoingShape.getStencilId())) {
                  incomingShape.setTarget(outgoingShape.getTarget());
                  targetFound=true;
                }
                shapesToRemove.add(outgoingShape);
              }
              shapesToRemove.add(shape2);
            }
          }
        }
 else {
          shapesToRemove.add(incomingShape);
        }
      }
      if (!targetFound) {
        throw new JsonTransformationException("Link target not found (Name: '" + shape.getProperty("name") + "', "+ "ID: '"+ shape.getResourceId()+ "').");
      }
      shapesToRemove.add(shape);
    }
  }
  for (  Shape shape : shapesToRemove) {
    shape.getParent().getChildShapes().remove(shape);
  }
  return diagram;
}
