{
  Button cancelButton=new Button(i18nManager.getMessage(Messages.BUTTON_CANCEL));
  cancelButton.addStyleName(Reindeer.BUTTON_SMALL);
  cancelButton.addListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      close();
    }
  }
);
  Button convertButton=new Button(i18nManager.getMessage(Messages.PROCESS_CONVERT_POPUP_CONVERT_BUTTON));
  convertButton.addStyleName(Reindeer.BUTTON_SMALL);
  convertButton.addListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      try {
        InputStream bpmnStream=repositoryService.getResourceAsStream(processDefinition.getDeploymentId(),processDefinition.getResourceName());
        XMLInputFactory xif=XMLInputFactory.newInstance();
        InputStreamReader in=new InputStreamReader(bpmnStream,"UTF-8");
        XMLStreamReader xtr=xif.createXMLStreamReader(in);
        BpmnModel bpmnModel=new BpmnXMLConverter().convertToBpmnModel(xtr);
        if (bpmnModel.getMainProcess() == null || bpmnModel.getMainProcess().getId() == null) {
          notificationManager.showErrorNotification(Messages.MODEL_IMPORT_FAILED,i18nManager.getMessage(Messages.MODEL_IMPORT_INVALID_BPMN_EXPLANATION));
        }
 else {
          if (bpmnModel.getLocationMap().size() == 0) {
            notificationManager.showErrorNotification(Messages.MODEL_IMPORT_INVALID_BPMNDI,i18nManager.getMessage(Messages.MODEL_IMPORT_INVALID_BPMNDI_EXPLANATION));
          }
 else {
            BpmnJsonConverter converter=new BpmnJsonConverter();
            ObjectNode modelNode=converter.convertToJson(bpmnModel);
            Model modelData=repositoryService.newModel();
            ObjectNode modelObjectNode=new ObjectMapper().createObjectNode();
            modelObjectNode.put(MODEL_NAME,processDefinition.getName());
            modelObjectNode.put(MODEL_REVISION,1);
            modelObjectNode.put(MODEL_DESCRIPTION,processDefinition.getDescription());
            modelData.setMetaInfo(modelObjectNode.toString());
            modelData.setName(processDefinition.getName());
            repositoryService.saveModel(modelData);
            repositoryService.addModelEditorSource(modelData.getId(),modelNode.toString().getBytes("utf-8"));
            close();
            ExplorerApp.get().getViewManager().showEditorProcessDefinitionPage(modelData.getId());
            URL explorerURL=ExplorerApp.get().getURL();
            URL url=new URL(explorerURL.getProtocol(),explorerURL.getHost(),explorerURL.getPort(),explorerURL.getPath().replace("/ui","") + "service/editor?id=" + modelData.getId());
            ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
          }
        }
      }
 catch (      Exception e) {
        notificationManager.showErrorNotification("error",e);
      }
    }
  }
);
  HorizontalLayout buttonLayout=new HorizontalLayout();
  buttonLayout.setSpacing(true);
  buttonLayout.addComponent(cancelButton);
  buttonLayout.addComponent(convertButton);
  addComponent(buttonLayout);
  windowLayout.setComponentAlignment(buttonLayout,Alignment.BOTTOM_RIGHT);
}
