{
  DeploymentManager deploymentCache=Context.getProcessEngineConfiguration().getDeploymentManager();
  String nestedActivityId=TimerEventHandler.getActivityIdFromConfiguration(configuration);
  ProcessDefinition processDefinition=null;
  if (job.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(job.getTenantId())) {
    processDefinition=deploymentCache.findDeployedLatestProcessDefinitionByKey(nestedActivityId);
  }
 else {
    processDefinition=deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(nestedActivityId,job.getTenantId());
  }
  if (processDefinition == null) {
    throw new ActivitiException("Could not find process definition needed for timer start event");
  }
  try {
    if (!processDefinition.isSuspended()) {
      if (commandContext.getEventDispatcher().isEnabled()) {
        commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TIMER_FIRED,job));
      }
      new StartProcessInstanceCmd(nestedActivityId,null,null,null,job.getTenantId()).execute(commandContext);
    }
 else {
      log.debug("ignoring timer of suspended process definition {}",processDefinition.getName());
    }
  }
 catch (  RuntimeException e) {
    log.error("exception during timer execution",e);
    throw e;
  }
catch (  Exception e) {
    log.error("exception during timer execution",e);
    throw new ActivitiException("exception during timer execution: " + e.getMessage(),e);
  }
}
