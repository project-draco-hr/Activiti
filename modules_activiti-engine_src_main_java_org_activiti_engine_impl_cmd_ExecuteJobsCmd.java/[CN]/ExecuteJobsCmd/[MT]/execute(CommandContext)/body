{
  if (jobId == null && job == null) {
    throw new ActivitiIllegalArgumentException("jobId and job is null");
  }
  if (job == null) {
    job=commandContext.getJobEntityManager().findJobById(jobId);
  }
  if (job == null) {
    throw new JobNotFoundException(jobId);
  }
  if (log.isDebugEnabled()) {
    log.debug("Executing job {}",job.getId());
  }
  JobExecutorContext jobExecutorContext=Context.getJobExecutorContext();
  if (jobExecutorContext != null) {
    jobExecutorContext.setCurrentJob(job);
  }
  FailedJobListener failedJobListener=null;
  try {
    failedJobListener=new FailedJobListener(commandContext.getProcessEngineConfiguration().getCommandExecutor(),jobId);
    commandContext.getTransactionContext().addTransactionListener(TransactionState.ROLLED_BACK,failedJobListener);
    job.execute(commandContext);
    if (commandContext.getEventDispatcher().isEnabled()) {
      commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_EXECUTION_SUCCESS,job));
    }
  }
 catch (  Throwable exception) {
    failedJobListener.setException(exception);
    if (commandContext.getEventDispatcher().isEnabled()) {
      try {
        commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityExceptionEvent(ActivitiEventType.JOB_EXECUTION_FAILURE,job,exception));
      }
 catch (      Throwable ignore) {
        log.warn("Exception occured while dispatching job failure event, ignoring.",ignore);
      }
    }
    throw new ActivitiException("Job " + jobId + " failed",exception);
  }
 finally {
    if (jobExecutorContext != null) {
      jobExecutorContext.setCurrentJob(null);
    }
  }
  return null;
}
