{
  initializeProcessEngine();
  if (repositoryService == null) {
    initializeServices();
  }
  try {
    deploymentIdFromDeploymentAnnotation=TestHelper.annotationDeploymentSetUp(processEngine,getClass(),getName());
    Throwable exception=null;
    setUp();
    try {
      runTest();
    }
 catch (    Throwable running) {
      exception=running;
    }
 finally {
      try {
        tearDown();
      }
 catch (      Throwable tearingDown) {
        if (exception == null)         exception=tearingDown;
      }
    }
    if (exception != null)     throw exception;
    _checkStatus();
  }
 catch (  AssertionFailedError e) {
    log.error(EMPTY_LINE);
    log.error("ASSERTION FAILED: {}",e,e);
    exception=e;
    throw e;
  }
catch (  Throwable e) {
    log.warn("Record events {} has failed",getName());
    log.error(EMPTY_LINE);
    log.error("EXCEPTION: {}",e,e);
    exception=e;
    throw e;
  }
 finally {
    TestHelper.annotationDeploymentTearDown(processEngine,deploymentIdFromDeploymentAnnotation,getClass(),getName());
    assertAndEnsureCleanDb();
    log.info("dropping and recreating db");
    this.processEngineConfiguration.getClock().reset();
    EventRecorderTestUtils.closeProcessEngine(processEngine,listener);
    closeDownProcessEngine();
  }
}
