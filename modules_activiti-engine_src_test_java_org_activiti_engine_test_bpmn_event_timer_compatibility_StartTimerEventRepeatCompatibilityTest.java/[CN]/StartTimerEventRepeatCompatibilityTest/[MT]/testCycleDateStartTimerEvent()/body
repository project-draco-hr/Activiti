{
  List<Job> jobs=managementService.createJobQuery().list();
  assertEquals(1,jobs.size());
  JobEntity job=(JobEntity)jobs.get(0);
  changeConfigurationToPlainText(job);
  jobs=managementService.createJobQuery().list();
  assertEquals(1,jobs.size());
  job=(JobEntity)jobs.get(0);
  String activityId=TimerEventHandler.getActivityIdFromConfiguration(job.getJobHandlerConfiguration());
  assertTrue(activityId.equals(job.getJobHandlerConfiguration()));
  Clock previousClock=processEngineConfiguration.getClock();
  Clock testClock=new DefaultClockImpl();
  processEngineConfiguration.setClock(testClock);
  Date now=new Date();
  testClock.setCurrentTime(now);
  listener.clearEventsReceived();
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  moveByMinutes(60);
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  moveByMinutes(60);
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  moveByMinutes(60);
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
    fail("there must be a pending job");
  }
 catch (  Exception e) {
  }
  moveByMinutes(60);
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
  }
 catch (  Exception e) {
    fail("this is supposed to be the last execution.");
  }
  int timerFiredCount=0;
  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();
  for (  ActivitiEvent eventReceived : eventsReceived) {
    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {
      timerFiredCount++;
    }
  }
  listener.clearEventsReceived();
  processEngineConfiguration.setClock(previousClock);
  assertEquals(4,timerFiredCount);
}
