{
  FlowElement flowElement=model.getMainProcess().getFlowElement("start1");
  assertNotNull(flowElement);
  assertTrue(flowElement instanceof StartEvent);
  assertEquals("start1",flowElement.getId());
  flowElement=model.getMainProcess().getFlowElement("userTask1");
  assertNotNull(flowElement);
  assertTrue(flowElement instanceof UserTask);
  assertEquals("userTask1",flowElement.getId());
  UserTask userTask=(UserTask)flowElement;
  assertTrue(userTask.getCandidateUsers().size() == 1);
  assertTrue(userTask.getCandidateGroups().size() == 1);
  assertTrue(userTask.getFormProperties().size() == 2);
  flowElement=model.getMainProcess().getFlowElement("subprocess1");
  assertNotNull(flowElement);
  assertTrue(flowElement instanceof SubProcess);
  assertEquals("subprocess1",flowElement.getId());
  SubProcess subProcess=(SubProcess)flowElement;
  assertTrue(subProcess.getLoopCharacteristics().isSequential());
  assertEquals("10",subProcess.getLoopCharacteristics().getLoopCardinality());
  assertEquals("${assignee == \"\"}",subProcess.getLoopCharacteristics().getCompletionCondition());
  assertTrue(subProcess.getFlowElements().size() == 5);
  flowElement=model.getMainProcess().getFlowElement("boundaryEvent1");
  assertNotNull(flowElement);
  assertTrue(flowElement instanceof BoundaryEvent);
  assertEquals("boundaryEvent1",flowElement.getId());
  BoundaryEvent boundaryEvent=(BoundaryEvent)flowElement;
  assertNotNull(boundaryEvent.getAttachedToRef());
  assertEquals("subprocess1",boundaryEvent.getAttachedToRef().getId());
  assertEquals(1,boundaryEvent.getEventDefinitions().size());
  assertTrue(boundaryEvent.getEventDefinitions().get(0) instanceof TimerEventDefinition);
  assertEquals(1,model.getMainProcess().getExecutionListeners().size());
  ActivitiListener listener=model.getMainProcess().getExecutionListeners().get(0);
  assertEquals("TestClass",listener.getImplementation());
  assertEquals(ImplementationType.IMPLEMENTATION_TYPE_CLASS,listener.getImplementationType());
  assertEquals("start",listener.getEvent());
}
