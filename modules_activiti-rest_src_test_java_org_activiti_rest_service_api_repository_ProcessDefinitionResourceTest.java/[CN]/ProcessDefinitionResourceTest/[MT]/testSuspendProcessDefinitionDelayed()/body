{
  ProcessDefinition processDefinition=repositoryService.createProcessDefinitionQuery().singleResult();
  assertFalse(processDefinition.isSuspended());
  ObjectNode requestNode=objectMapper.createObjectNode();
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.HOUR,2);
  DateTimeFormatter formatter=ISODateTimeFormat.dateTime();
  String dateString=formatter.print(cal.getTimeInMillis());
  requestNode.put("action","suspend");
  requestNode.put("date",dateString);
  HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,processDefinition.getId()));
  httpPut.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertTrue(responseNode.get("suspended").booleanValue());
  processDefinition=repositoryService.createProcessDefinitionQuery().singleResult();
  assertFalse(processDefinition.isSuspended());
  cal.add(Calendar.HOUR,1);
  processEngineConfiguration.getClock().setCurrentTime(cal.getTime());
  waitForJobExecutorToProcessAllJobs(5000,100);
  processDefinition=repositoryService.createProcessDefinitionQuery().singleResult();
  assertTrue(processDefinition.isSuspended());
}
