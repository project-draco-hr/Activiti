{
  log.info(jobExecutor.getName() + " starting to acquire jobs");
  final CommandExecutor commandExecutor=jobExecutor.getCommandExecutor();
  long millisToWait=0;
  float waitIncreaseFactor=2;
  long maxWait=60 * 1000;
  while (!isInterrupted) {
    int maxJobsPerAcquisition=jobExecutor.getMaxJobsPerAcquisition();
    try {
      AcquiredJobs acquiredJobs=commandExecutor.execute(jobExecutor.getAcquireJobsCmd());
      for (      List<String> jobIds : acquiredJobs.getJobIdBatches()) {
        jobExecutor.executeJobs(jobIds);
      }
      millisToWait=jobExecutor.getWaitTimeInMillis();
      int jobsAcquired=acquiredJobs.getJobIdBatches().size();
      if (jobsAcquired < maxJobsPerAcquisition) {
        isJobAdded=false;
        Date duedate=new Date(ClockUtil.getCurrentTime().getTime() + millisToWait);
        List<TimerEntity> nextTimers=commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate,new Page(0,1)));
        if (!nextTimers.isEmpty()) {
          long millisTillNextTimer=nextTimers.get(0).getDuedate().getTime() - ClockUtil.getCurrentTime().getTime();
          if (millisTillNextTimer < millisToWait) {
            millisToWait=millisTillNextTimer;
          }
        }
      }
 else {
        millisToWait=0;
      }
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,"exception during job acquisition: " + e.getMessage(),e);
      millisToWait*=waitIncreaseFactor;
      if (millisToWait > maxWait) {
        millisToWait=maxWait;
      }
 else       if (millisToWait == 0) {
        millisToWait=jobExecutor.getWaitTimeInMillis();
      }
    }
    if ((millisToWait > 0) && (!isJobAdded)) {
      try {
        log.fine("job acquisition thread sleeping for " + millisToWait + " millis");
synchronized (MONITOR) {
          if (!isInterrupted) {
            isWaiting.set(true);
            MONITOR.wait(millisToWait);
          }
        }
        log.fine("job acquisition thread woke up");
      }
 catch (      InterruptedException e) {
        log.fine("job acquisition wait interrupted");
      }
 finally {
        isWaiting.set(false);
      }
    }
  }
  log.info(jobExecutor.getName() + " stopped job acquisition");
}
