{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    String taskId=task.getId();
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("action","complete");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId()));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    executeHttpRequest(httpPost,HttpStatus.SC_OK);
    task=taskService.createTaskQuery().taskId(taskId).singleResult();
    assertNull(task);
    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");
    task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    taskId=task.getId();
    requestNode=objectMapper.createObjectNode();
    ArrayNode variablesNode=objectMapper.createArrayNode();
    requestNode.put("action","complete");
    requestNode.put("variables",variablesNode);
    ObjectNode var1=objectMapper.createObjectNode();
    variablesNode.add(var1);
    var1.put("name","var1");
    var1.put("value","First value");
    ObjectNode var2=objectMapper.createObjectNode();
    variablesNode.add(var2);
    var2.put("name","var2");
    var2.put("value","Second value");
    httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,taskId));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    executeHttpRequest(httpPost,HttpStatus.SC_OK);
    task=taskService.createTaskQuery().taskId(taskId).singleResult();
    assertNull(task);
    if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {
      HistoricTaskInstance historicTaskInstance=historyService.createHistoricTaskInstanceQuery().taskId(taskId).singleResult();
      assertNotNull(historicTaskInstance);
      List<HistoricVariableInstance> updates=historyService.createHistoricVariableInstanceQuery().processInstanceId(processInstance.getId()).list();
      assertNotNull(updates);
      assertEquals(2,updates.size());
      boolean foundFirst=false;
      boolean foundSecond=false;
      for (      HistoricVariableInstance var : updates) {
        if (var.getVariableName().equals("var1")) {
          assertEquals("First value",var.getValue());
          foundFirst=true;
        }
 else         if (var.getVariableName().equals("var2")) {
          assertEquals("Second value",var.getValue());
          foundSecond=true;
        }
      }
      assertTrue(foundFirst);
      assertTrue(foundSecond);
    }
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
    List<HistoricTaskInstance> historicTasks=historyService.createHistoricTaskInstanceQuery().list();
    for (    HistoricTaskInstance task : historicTasks) {
      historyService.deleteHistoricTaskInstance(task.getId());
    }
  }
}
