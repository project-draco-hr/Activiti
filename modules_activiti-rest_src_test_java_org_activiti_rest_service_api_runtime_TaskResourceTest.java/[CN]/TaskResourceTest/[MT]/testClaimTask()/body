{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.addCandidateUser(task.getId(),"newAssignee");
    assertEquals(1L,taskService.createTaskQuery().taskCandidateUser("newAssignee").count());
    String taskId=task.getId();
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,taskId));
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("action","claim");
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
      assertEquals("An assignee is required when claiming a task.",expected.getStatus().getDescription());
    }
    requestNode.put("assignee","newAssignee");
    client.post(requestNode);
    task=taskService.createTaskQuery().taskId(taskId).singleResult();
    assertNotNull(task);
    assertEquals("newAssignee",task.getAssignee());
    assertEquals(0L,taskService.createTaskQuery().taskCandidateUser("newAssignee").count());
    client.post(requestNode);
    task=taskService.createTaskQuery().taskId(taskId).singleResult();
    assertNotNull(task);
    assertEquals("newAssignee",task.getAssignee());
    assertEquals(0L,taskService.createTaskQuery().taskCandidateUser("newAssignee").count());
    requestNode.put("assignee","anotherUser");
    try {
      client.post(requestNode);
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_CONFLICT,expected.getStatus());
      assertEquals("Task '" + task.getId() + "' is already claimed by someone else.",expected.getStatus().getDescription());
    }
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
    List<HistoricTaskInstance> historicTasks=historyService.createHistoricTaskInstanceQuery().list();
    for (    HistoricTaskInstance task : historicTasks) {
      historyService.deleteHistoricTaskInstance(task.getId());
    }
  }
}
