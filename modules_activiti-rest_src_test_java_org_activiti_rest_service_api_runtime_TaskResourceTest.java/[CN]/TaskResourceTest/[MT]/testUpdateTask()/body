{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    Task parentTask=taskService.newTask();
    taskService.saveTask(parentTask);
    ObjectNode requestNode=objectMapper.createObjectNode();
    Calendar dueDate=Calendar.getInstance();
    String dueDateString=getISODateString(dueDate.getTime());
    requestNode.put("name","New task name");
    requestNode.put("description","New task description");
    requestNode.put("assignee","assignee");
    requestNode.put("owner","owner");
    requestNode.put("priority",20);
    requestNode.put("delegationState","resolved");
    requestNode.put("dueDate",dueDateString);
    requestNode.put("parentTaskId",parentTask.getId());
    HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId()));
    httpPut.setEntity(new StringEntity(requestNode.toString()));
    executeHttpRequest(httpPut,HttpStatus.SC_OK);
    task=taskService.createTaskQuery().taskId(task.getId()).singleResult();
    assertEquals("New task name",task.getName());
    assertEquals("New task description",task.getDescription());
    assertEquals("assignee",task.getAssignee());
    assertEquals("owner",task.getOwner());
    assertEquals(20,task.getPriority());
    assertEquals(DelegationState.RESOLVED,task.getDelegationState());
    assertEquals(dateFormat.parse(dueDateString),task.getDueDate());
    assertEquals(parentTask.getId(),task.getParentTaskId());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
