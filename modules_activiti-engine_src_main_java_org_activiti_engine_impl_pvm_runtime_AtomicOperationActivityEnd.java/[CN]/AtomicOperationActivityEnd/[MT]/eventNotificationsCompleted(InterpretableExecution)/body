{
  ActivityImpl activity=(ActivityImpl)execution.getActivity();
  ActivityImpl parentActivity=activity.getParentActivity();
  if ((parentActivity != null) && (!parentActivity.isScope())) {
    execution.setActivity(parentActivity);
    execution.performOperation(ACTIVITY_END);
  }
 else   if (execution.isProcessInstance()) {
    execution.performOperation(PROCESS_END);
  }
 else   if (execution.isScope()) {
    ActivityBehavior parentActivityBehavior=(parentActivity != null ? parentActivity.getActivityBehavior() : null);
    if (parentActivityBehavior instanceof CompositeActivityBehavior) {
      CompositeActivityBehavior compositeActivityBehavior=(CompositeActivityBehavior)parentActivity.getActivityBehavior();
      if (activity.isScope() && activity.getOutgoingTransitions().isEmpty()) {
        InterpretableExecution parentScopeExecution=(InterpretableExecution)execution.getParent();
        execution.destroy();
        execution.remove();
        parentScopeExecution.setActivity(parentActivity);
        compositeActivityBehavior.lastExecutionEnded(parentScopeExecution);
      }
 else {
        execution.setActivity(parentActivity);
        compositeActivityBehavior.lastExecutionEnded(execution);
      }
    }
 else {
      InterpretableExecution parentScopeExecution=(InterpretableExecution)execution.getParent();
      execution.destroy();
      execution.remove();
      if (activity.getParent() == activity.getProcessDefinition() && activity.getOutgoingTransitions().isEmpty()) {
        parentScopeExecution.setActivity(activity);
        parentScopeExecution.end();
      }
 else {
        parentScopeExecution.setActivity(parentActivity);
        parentScopeExecution.performOperation(ACTIVITY_END);
      }
    }
  }
 else {
    execution.remove();
    InterpretableExecution concurrentRoot=(InterpretableExecution)execution.getParent();
    if (concurrentRoot.getExecutions().size() == 1) {
      InterpretableExecution lastConcurrent=(InterpretableExecution)concurrentRoot.getExecutions().get(0);
      if (!lastConcurrent.isScope()) {
        concurrentRoot.setActivity((ActivityImpl)lastConcurrent.getActivity());
        lastConcurrent.setReplacedBy(concurrentRoot);
        if (lastConcurrent.getExecutions().size() > 0) {
          concurrentRoot.getExecutions().clear();
          for (          ActivityExecution childExecution : lastConcurrent.getExecutions()) {
            InterpretableExecution childInterpretableExecution=(InterpretableExecution)childExecution;
            ((List)concurrentRoot.getExecutions()).add(childExecution);
            childInterpretableExecution.setParent(concurrentRoot);
          }
          lastConcurrent.getExecutions().clear();
        }
        concurrentRoot.setVariablesLocal(lastConcurrent.getVariablesLocal());
        if (!concurrentRoot.isActive() && lastConcurrent.isActive()) {
          concurrentRoot.setActive(true);
        }
        lastConcurrent.remove();
      }
 else {
        lastConcurrent.setConcurrent(false);
      }
    }
  }
}
