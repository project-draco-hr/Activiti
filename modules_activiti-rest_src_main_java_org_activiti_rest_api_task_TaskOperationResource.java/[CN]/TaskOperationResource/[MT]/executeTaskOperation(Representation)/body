{
  if (authenticate() == false)   return null;
  String taskId=(String)getRequest().getAttributes().get("taskId");
  String operation=(String)getRequest().getAttributes().get("operation");
  if ("claim".equals(operation)) {
    ActivitiUtil.getTaskService().claim(taskId,loggedInUser);
  }
 else   if ("unclaim".equals(operation)) {
    ActivitiUtil.getTaskService().claim(taskId,null);
  }
 else   if ("complete".equals(operation)) {
    Map<String,String> variables=new HashMap<String,String>();
    try {
      if (entity != null) {
        String startParams=entity.getText();
        if (StringUtils.isNotEmpty(startParams)) {
          JsonNode startJSON=new ObjectMapper().readTree(startParams);
          Iterator<String> itName=startJSON.getFieldNames();
          while (itName.hasNext()) {
            String name=itName.next();
            JsonNode valueNode=startJSON.path(name);
            variables.put(name,valueNode.asText());
          }
        }
      }
    }
 catch (    Exception e) {
      throw new ActivitiException("Did not receive the operation parameters",e);
    }
    variables.remove("taskId");
    ActivitiUtil.getFormService().submitTaskFormData(taskId,variables);
  }
 else   if ("assign".equals(operation)) {
    String userId=null;
    try {
      String startParams=entity.getText();
      JsonNode startJSON=new ObjectMapper().readTree(startParams);
      userId=startJSON.path("userId").getTextValue();
    }
 catch (    Exception e) {
      throw new ActivitiException("Did not assign the operation parameters",e);
    }
    ActivitiUtil.getTaskService().setAssignee(taskId,userId);
  }
 else {
    throw new ActivitiException("'" + operation + "' is not a valid operation");
  }
  ObjectNode successNode=new ObjectMapper().createObjectNode();
  successNode.put("success",true);
  return successNode;
}
