{
  if (transactionState.equals(TransactionState.COMMITTING)) {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
      @Override public void beforeCommit(      boolean readOnly){
        transactionListener.execute(commandContext);
      }
    }
);
  }
 else   if (transactionState.equals(TransactionState.COMMITTED)) {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
      @Override public void afterCommit(){
        CommandExecutor commandExecutor=commandContext.getProcessEngineConfiguration().getCommandExecutor();
        CommandConfig commandConfig=new CommandConfig(false,TransactionPropagation.REQUIRES_NEW);
        commandExecutor.execute(commandConfig,new Command<Void>(){
          public Void execute(          CommandContext commandContext){
            transactionListener.execute(commandContext);
            return null;
          }
        }
);
      }
    }
);
  }
 else   if (transactionState.equals(TransactionState.ROLLINGBACK)) {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
      @Override public void beforeCompletion(){
        transactionListener.execute(commandContext);
      }
    }
);
  }
 else   if (transactionState.equals(TransactionState.ROLLED_BACK)) {
    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
      @Override public void afterCompletion(      int status){
        if (TransactionSynchronization.STATUS_ROLLED_BACK == status) {
          CommandExecutor commandExecutor=commandContext.getProcessEngineConfiguration().getCommandExecutor();
          CommandConfig commandConfig=new CommandConfig(false,TransactionPropagation.REQUIRES_NEW);
          commandExecutor.execute(commandConfig,new Command<Void>(){
            public Void execute(            CommandContext commandContext){
              transactionListener.execute(commandContext);
              return null;
            }
          }
);
        }
      }
    }
);
  }
}
