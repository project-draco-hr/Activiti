{
  EventCollector eventCollector=new EventCollector();
  PvmProcessDefinition processDefinition=new ProcessDefinitionBuilder("scopes and concurrency").executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).createActivity("start").initial().behavior(new Automatic()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("fork").endActivity().createActivity("fork").behavior(new ParallelGateway()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("c1").transition("c2").endActivity().createActivity("scope").scope().executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).createActivity("c1").behavior(new WaitState()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("join").endActivity().createActivity("c2").behavior(new WaitState()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("join").endActivity().createActivity("join").behavior(new ParallelGateway()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("end").endActivity().endActivity().createActivity("end").behavior(new End()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).endActivity().buildProcessDefinition();
  PvmProcessInstance processInstance=processDefinition.createProcessInstance();
  processInstance.start();
  List<String> expectedEvents=new ArrayList<String>();
  expectedEvents.add("start on ProcessDefinition(scopes and concurrency)");
  expectedEvents.add("start on Activity(start)");
  expectedEvents.add("end on Activity(start)");
  expectedEvents.add("start on Activity(fork)");
  expectedEvents.add("end on Activity(fork)");
  expectedEvents.add("start on Activity(scope)");
  expectedEvents.add("start on Activity(c1)");
  expectedEvents.add("end on Activity(fork)");
  expectedEvents.add("start on Activity(scope)");
  expectedEvents.add("start on Activity(c2)");
  assertEquals("expected " + expectedEvents + ", but was \n"+ eventCollector+ "\n",expectedEvents,eventCollector.events);
  eventCollector.events.clear();
  PvmExecution execution=processInstance.findExecution("c1");
  execution.signal(null,null);
  expectedEvents=new ArrayList<String>();
  expectedEvents.add("end on Activity(c1)");
  expectedEvents.add("start on Activity(join)");
  assertEquals("expected " + expectedEvents + ", but was \n"+ eventCollector+ "\n",expectedEvents,eventCollector.events);
  eventCollector.events.clear();
  execution=processInstance.findExecution("c2");
  execution.signal(null,null);
}
