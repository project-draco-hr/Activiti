{
  List<ProcessDefinition> processDefinitions=getDbSqlSession().createProcessDefinitionQuery().deploymentId(deploymentId).list();
  List<Model> models=getDbSqlSession().createModelQueryImpl().deploymentId(deploymentId).list();
  for (  Model model : models) {
    ModelEntity modelEntity=(ModelEntity)model;
    modelEntity.setDeploymentId(null);
    getModelManager().updateModel(modelEntity);
  }
  if (cascade) {
    for (    ProcessDefinition processDefinition : processDefinitions) {
      String processDefinitionId=processDefinition.getId();
      getProcessInstanceManager().deleteProcessInstancesByProcessDefinition(processDefinitionId,"deleted deployment",cascade);
    }
  }
  for (  ProcessDefinition processDefinition : processDefinitions) {
    String processDefinitionId=processDefinition.getId();
    getIdentityLinkManager().deleteIdentityLinksByProcDef(processDefinitionId);
    getEventSubscriptionManager().deleteEventSubscriptionsForProcessDefinition(processDefinitionId);
    getProcessDefinitionInfoManager().deleteProcessDefinitionInfo(processDefinitionId);
  }
  getProcessDefinitionManager().deleteProcessDefinitionsByDeploymentId(deploymentId);
  for (  ProcessDefinition processDefinition : processDefinitions) {
    List<Job> timerStartJobs=Context.getCommandContext().getJobEntityManager().findJobsByTypeAndProcessDefinitionId(TimerStartEventJobHandler.TYPE,processDefinition.getId());
    if (timerStartJobs != null && timerStartJobs.size() > 0) {
      for (      Job timerStartJob : timerStartJobs) {
        if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
          Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,timerStartJob,null,null,processDefinition.getId()));
        }
        ((JobEntity)timerStartJob).delete();
      }
    }
    ProcessDefinitionEntity latestProcessDefinition=null;
    if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
      latestProcessDefinition=Context.getCommandContext().getProcessDefinitionEntityManager().findLatestProcessDefinitionByKeyAndTenantId(processDefinition.getKey(),processDefinition.getTenantId());
    }
 else {
      latestProcessDefinition=Context.getCommandContext().getProcessDefinitionEntityManager().findLatestProcessDefinitionByKey(processDefinition.getKey());
    }
    if (processDefinition.getId().equals(latestProcessDefinition.getId())) {
      int previousVersion=processDefinition.getVersion() - 1;
      ProcessDefinitionEntity previousProcessDefinition=null;
      while (previousProcessDefinition == null && previousVersion > 0) {
        ProcessDefinitionQueryImpl previousProcessDefinitionQuery=new ProcessDefinitionQueryImpl(Context.getCommandContext()).processDefinitionVersion(previousVersion).processDefinitionKey(processDefinition.getKey());
        if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
          previousProcessDefinitionQuery.processDefinitionTenantId(processDefinition.getTenantId());
        }
 else {
          previousProcessDefinitionQuery.processDefinitionWithoutTenantId();
        }
        previousProcessDefinition=(ProcessDefinitionEntity)previousProcessDefinitionQuery.singleResult();
        previousVersion--;
      }
      if (previousProcessDefinition != null) {
        ProcessDefinitionEntity resolvedProcessDefinition=Context.getProcessEngineConfiguration().getDeploymentManager().resolveProcessDefinition(previousProcessDefinition);
        List<TimerDeclarationImpl> timerDeclarations=(List<TimerDeclarationImpl>)resolvedProcessDefinition.getProperty(BpmnParse.PROPERTYNAME_START_TIMER);
        if (timerDeclarations != null) {
          for (          TimerDeclarationImpl timerDeclaration : timerDeclarations) {
            TimerEntity timer=timerDeclaration.prepareTimerEntity(null);
            timer.setProcessDefinitionId(previousProcessDefinition.getId());
            if (previousProcessDefinition.getTenantId() != null) {
              timer.setTenantId(previousProcessDefinition.getTenantId());
            }
            Context.getCommandContext().getJobEntityManager().schedule(timer);
          }
        }
      }
    }
    List<EventSubscriptionEntity> findEventSubscriptionsByConfiguration=Context.getCommandContext().getEventSubscriptionEntityManager().findEventSubscriptionsByConfiguration(MessageEventHandler.EVENT_HANDLER_TYPE,processDefinition.getId(),processDefinition.getTenantId());
    for (    EventSubscriptionEntity eventSubscriptionEntity : findEventSubscriptionsByConfiguration) {
      eventSubscriptionEntity.delete();
    }
  }
  getResourceManager().deleteResourcesByDeploymentId(deploymentId);
  getDbSqlSession().delete("deleteDeployment",deploymentId);
}
