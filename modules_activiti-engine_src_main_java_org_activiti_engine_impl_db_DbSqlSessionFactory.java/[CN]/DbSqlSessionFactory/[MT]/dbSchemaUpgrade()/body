{
  SqlSession sqlSession=sqlSessionFactory.openSession();
  boolean success=false;
  try {
    String dbVersion=getDbVersion(sqlSession);
    if (!ProcessEngine.VERSION.equals(dbVersion)) {
      int minorDbVersionNumber=Integer.parseInt(dbVersion.substring(2));
      String libraryVersion=ProcessEngine.VERSION;
      if (ProcessEngine.VERSION.endsWith("-SNAPSHOT")) {
        libraryVersion=ProcessEngine.VERSION.substring(0,ProcessEngine.VERSION.length() - "-SNAPSHOT".length());
      }
      int minorLibraryVersionNumber=Integer.parseInt(libraryVersion.substring(2));
      while (minorDbVersionNumber < minorLibraryVersionNumber) {
        try {
          DbUpgradeStep dbUpgradeStep=(DbUpgradeStep)ReflectUtil.instantiate("org.activiti.engine.impl.db.upgrade.DbUpgradeStep5" + minorDbVersionNumber);
          dbUpgradeStep.execute(sqlSession,this);
        }
 catch (        ActivitiException e) {
          log.fine("no upgrade step necessary for 5." + minorDbVersionNumber);
        }
        minorDbVersionNumber++;
      }
    }
    success=true;
  }
 catch (  Exception e) {
    if (isMissingTablesException(e)) {
      throw new ActivitiException("no activiti tables in db.  set <property name=\"databaseSchemaUpdate\" to value=\"true\" or value=\"create-drop\" (use create-drop for testing only!) in bean processEngineConfiguration in activiti.cfg.xml for automatic schema creation",e);
    }
 else {
      if (e instanceof RuntimeException) {
        throw (RuntimeException)e;
      }
 else {
        throw new ActivitiException("couldn't get db schema version",e);
      }
    }
  }
 finally {
    if (success) {
      sqlSession.commit(true);
    }
 else {
      sqlSession.rollback(true);
    }
    sqlSession.close();
  }
}
