{
  try {
    Calendar adhocTaskCreate=Calendar.getInstance();
    adhocTaskCreate.set(Calendar.MILLISECOND,0);
    Calendar processTaskCreate=Calendar.getInstance();
    processTaskCreate.add(Calendar.HOUR,2);
    processTaskCreate.set(Calendar.MILLISECOND,0);
    Calendar inBetweenTaskCreation=Calendar.getInstance();
    inBetweenTaskCreation.add(Calendar.HOUR,1);
    processEngineConfiguration.getClock().setCurrentTime(adhocTaskCreate.getTime());
    Task adhocTask=taskService.newTask();
    adhocTask.setAssignee("gonzo");
    adhocTask.setOwner("owner");
    adhocTask.setDelegationState(DelegationState.PENDING);
    adhocTask.setDescription("Description one");
    adhocTask.setName("Name one");
    adhocTask.setDueDate(adhocTaskCreate.getTime());
    adhocTask.setPriority(100);
    adhocTask.setFormKey("myForm.json");
    adhocTask.setCategory("some-category");
    taskService.saveTask(adhocTask);
    taskService.addUserIdentityLink(adhocTask.getId(),"misspiggy",IdentityLinkType.PARTICIPANT);
    processEngineConfiguration.getClock().setCurrentTime(processTaskCreate.getTime());
    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess","myBusinessKey");
    Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    processTask.setParentTaskId(adhocTask.getId());
    processTask.setPriority(50);
    processTask.setDueDate(processTaskCreate.getTime());
    taskService.saveTask(processTask);
    String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_QUERY);
    ObjectNode requestNode=objectMapper.createObjectNode();
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId(),adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("name","Name one");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("nameLike","%one");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("description","Description one");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("descriptionLike","%one");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("priority",100);
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("minimumPriority",70);
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("maximumPriority",70);
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("owner","owner");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("assignee","gonzo");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("ownerLike","owne%");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("assigneeLike","%onzo");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("unassigned",true);
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("delegationState","pending");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("candidateUser","kermit");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("candidateGroup","sales");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    ArrayNode arrayNode=requestNode.arrayNode();
    arrayNode.add("sales");
    arrayNode.add("someOtherGroup");
    requestNode.put("candidateGroupIn",arrayNode);
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("involvedUser","misspiggy");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("processInstanceId",processInstance.getId());
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("executionId",processInstance.getId());
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processInstanceBusinessKey","myBusinessKey");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processInstanceBusinessKeyLike","myBusiness%");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processDefinitionKey","oneTaskProcess");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processDefinitionKeyLike","%TaskProcess");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processDefinitionName","The One Task Process");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("processDefinitionNameLike","The One %");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("createdOn",getISODateString(adhocTaskCreate.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("createdAfter",getISODateString(inBetweenTaskCreation.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("createdBefore",getISODateString(inBetweenTaskCreation.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("excludeSubTasks",true);
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("taskDefinitionKey","processTask");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("taskDefinitionKeyLike","process%");
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("dueDate",getISODateString(adhocTaskCreate.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("dueAfter",getISODateString(inBetweenTaskCreation.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("dueBefore",getISODateString(inBetweenTaskCreation.getTime()));
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    runtimeService.suspendProcessInstanceById(processInstance.getId());
    requestNode.removeAll();
    requestNode.put("active",false);
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
    requestNode.removeAll();
    requestNode.put("active",true);
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("category","some-category");
    assertResultsPresentInPostDataResponse(url,requestNode,adhocTask.getId());
    requestNode.removeAll();
    requestNode.put("withoutDueDate",true);
    assertResultsPresentInPostDataResponse(url,requestNode);
    processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    processTask.setDueDate(null);
    taskService.saveTask(processTask);
    assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      if (task.getExecutionId() == null) {
        taskService.deleteTask(task.getId(),true);
      }
    }
  }
}
