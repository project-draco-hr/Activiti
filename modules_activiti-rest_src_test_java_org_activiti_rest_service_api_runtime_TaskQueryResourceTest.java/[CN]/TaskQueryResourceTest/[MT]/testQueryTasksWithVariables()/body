{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  HashMap<String,Object> variables=new HashMap<String,Object>();
  variables.put("stringVar","Abcdef");
  variables.put("intVar",12345);
  variables.put("booleanVar",true);
  taskService.setVariablesLocal(processTask.getId(),variables);
  runtimeService.startProcessInstanceByKey("oneTaskProcess");
  ObjectNode requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("taskVariables",variableArray);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_QUERY);
  variableNode.put("name","stringVar");
  variableNode.put("value","Abcdef");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12345);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","abCDEF");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("value","Abcdef");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12300);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",12345);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInPostDataResponse(url,requestNode);
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12300);
  variableNode.put("operation","greaterThanOrEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",12345);
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12400);
  variableNode.put("operation","lessThan");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",12345);
  variableNode.put("operation","lessThan");
  assertResultsPresentInPostDataResponse(url,requestNode);
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",12400);
  variableNode.put("operation","lessThanOrEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",12345);
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","Abcde%");
  variableNode.put("operation","like");
  variableNode.removeAll();
  variableNode.put("value","abcdef");
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponseWithStatusCheck(url,requestNode,HttpStatus.SC_BAD_REQUEST);
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","abcdef");
  variableNode.put("operation","operationX");
  assertResultsPresentInPostDataResponseWithStatusCheck(url,requestNode,HttpStatus.SC_BAD_REQUEST);
  requestNode=objectMapper.createObjectNode();
  variableArray=objectMapper.createArrayNode();
  variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("processInstanceVariables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","azeRTY");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67800);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",67890);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInPostDataResponse(url,requestNode);
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67800);
  variableNode.put("operation","greaterThanOrEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",67890);
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67900);
  variableNode.put("operation","lessThan");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",67890);
  variableNode.put("operation","lessThan");
  assertResultsPresentInPostDataResponse(url,requestNode);
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67900);
  variableNode.put("operation","lessThanOrEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.put("value",67890);
  assertResultsPresentInPostDataResponse(url,requestNode,processTask.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","Azert%");
  variableNode.put("operation","like");
}
