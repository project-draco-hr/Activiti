{
  Execution execution=runtimeService.startProcessInstanceByKey("processOne");
  assertNotNull(execution);
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("action","messageEventReceived");
  requestNode.put("messageName","unexisting");
  Execution waitingExecution=runtimeService.createExecutionQuery().activityId("waitState").singleResult();
  assertNotNull(waitingExecution);
  ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION,waitingExecution.getId()));
  try {
    client.put(requestNode);
    fail("Exception expected");
  }
 catch (  ResourceException expected) {
    assertEquals(Status.SERVER_ERROR_INTERNAL,expected.getStatus());
    assertEquals("Execution with id '" + waitingExecution.getId() + "' does not have a subscription to a message event with name 'unexisting'",expected.getStatus().getDescription());
  }
  requestNode.put("messageName","paymentMessage");
  client.put(requestNode);
  assertEquals(Status.SUCCESS_NO_CONTENT,client.getResponse().getStatus());
  client.release();
  waitingExecution=runtimeService.createExecutionQuery().activityId("anotherWaitState").singleResult();
  assertNotNull(waitingExecution);
  assertEquals(execution.getId(),waitingExecution.getId());
}
