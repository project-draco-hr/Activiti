{
  UserTask task=new UserTask();
  task.setPriority(getPropertyValueAsString(PROPERTY_PRIORITY,elementNode));
  task.setFormKey(getPropertyValueAsString(PROPERTY_FORMKEY,elementNode));
  task.setDueDate(getPropertyValueAsString(PROPERTY_DUEDATE,elementNode));
  task.setCategory(getPropertyValueAsString(PROPERTY_CATEGORY,elementNode));
  JsonNode assignmentNode=getProperty(PROPERTY_USERTASK_ASSIGNMENT,elementNode);
  if (assignmentNode != null) {
    JsonNode itemsNode=assignmentNode.get(EDITOR_PROPERTIES_GENERAL_ITEMS);
    if (itemsNode != null) {
      Iterator<JsonNode> assignmentIterator=itemsNode.elements();
      while (assignmentIterator.hasNext()) {
        JsonNode assignmentItemNode=assignmentIterator.next();
        if (assignmentItemNode.get(PROPERTY_USERTASK_ASSIGNMENT_TYPE) != null && assignmentItemNode.get(PROPERTY_USERTASK_ASSIGNMENT_EXPRESSION) != null) {
          String assignmentType=assignmentItemNode.get(PROPERTY_USERTASK_ASSIGNMENT_TYPE).asText();
          if (PROPERTY_USERTASK_ASSIGNEE.equals(assignmentType)) {
            task.setAssignee(assignmentItemNode.get(PROPERTY_USERTASK_ASSIGNMENT_EXPRESSION).asText());
          }
 else           if (PROPERTY_USERTASK_OWNER.equals(assignmentType)) {
            task.setOwner(assignmentItemNode.get(PROPERTY_USERTASK_ASSIGNMENT_EXPRESSION).asText());
          }
 else           if (PROPERTY_USERTASK_CANDIDATE_USERS.equals(assignmentType)) {
            task.setCandidateUsers(getValueAsList(PROPERTY_USERTASK_ASSIGNMENT_EXPRESSION,assignmentItemNode));
          }
 else           if (PROPERTY_USERTASK_CANDIDATE_GROUPS.equals(assignmentType)) {
            task.setCandidateGroups(getValueAsList(PROPERTY_USERTASK_ASSIGNMENT_EXPRESSION,assignmentItemNode));
          }
        }
      }
    }
  }
  JsonNode customIdentityLinksNode=getProperty(PROPERTY_USERTASK_CUSTOM_IDENTITY_LINKS,elementNode);
  if (customIdentityLinksNode != null) {
    JsonNode itemsNode=customIdentityLinksNode.get(EDITOR_PROPERTIES_GENERAL_ITEMS);
    if (itemsNode != null) {
      Iterator<JsonNode> customIdentityLinksIterator=itemsNode.elements();
      while (customIdentityLinksIterator.hasNext()) {
        JsonNode customIdentityLinksItemNode=customIdentityLinksIterator.next();
        if (customIdentityLinksItemNode.get(PROPERTY_USERTASK_IDENTITY_TYPE) != null && customIdentityLinksItemNode.get(PROPERTY_USERTASK_IDENTITY_LINK_TYPE) != null && customIdentityLinksItemNode.get(PROPERTY_USERTASK_IDENTITY_LINK_EXPRESSION) != null) {
          String identityType=customIdentityLinksItemNode.get(PROPERTY_USERTASK_IDENTITY_TYPE).asText();
          String identityLinkType=customIdentityLinksItemNode.get(PROPERTY_USERTASK_IDENTITY_LINK_TYPE).asText();
          List<String> identitiesList=getValueAsList(PROPERTY_USERTASK_IDENTITY_LINK_EXPRESSION,customIdentityLinksItemNode);
          if ("user".equals(identityType)) {
            Set<String> users=task.getCustomUserIdentityLinks().get(identityLinkType);
            if (users == null) {
              users=new HashSet<String>();
              task.getCustomUserIdentityLinks().put(identityLinkType,users);
            }
            users.addAll(identitiesList);
          }
 else           if ("group".equals(identityType)) {
            Set<String> groups=task.getCustomGroupIdentityLinks().get(identityLinkType);
            if (groups == null) {
              groups=new HashSet<String>();
              task.getCustomGroupIdentityLinks().put(identityLinkType,groups);
            }
            groups.addAll(identitiesList);
          }
        }
      }
    }
  }
  convertJsonToFormProperties(elementNode,task);
  return task;
}
