{
  try {
    final ProcessInstance processInstance=mock(ProcessInstance.class);
    when(processInstance.getId()).thenReturn("processInstanceId");
    when(processInstance.getProcessDefinitionId()).thenReturn("processDefinitionId");
    Date startTime=new Date();
    Clock.setCurrentTime(startTime);
    fireProcessInstanceStartedEvent(processInstance);
    HistoricProcessInstance historicProcessInstance=historicDataService.findHistoricProcessInstance(processInstance.getId());
    assertNotNull(historicProcessInstance);
    assertEquals("processInstanceId",historicProcessInstance.getProcessInstanceId());
    assertEquals("processDefinitionId",historicProcessInstance.getProcessDefinitionId());
    assertEquals(startTime,historicProcessInstance.getStartTime());
    assertNull(historicProcessInstance.getEndTime());
    assertNull(historicProcessInstance.getDurationInMillis());
    assertNull(historicProcessInstance.getEndStateName());
    Date endTime=new Date(startTime.getTime() + 1000);
    Clock.setCurrentTime(endTime);
    fireProcessInstanceEndedEvent(processInstance);
    historicProcessInstance=historicDataService.findHistoricProcessInstance("processInstanceId");
    assertEquals("processInstanceId",historicProcessInstance.getProcessInstanceId());
    assertEquals("processDefinitionId",historicProcessInstance.getProcessDefinitionId());
    assertEquals(startTime,historicProcessInstance.getStartTime());
    assertEquals(endTime,historicProcessInstance.getEndTime());
    assertEquals(Long.valueOf(1000L),historicProcessInstance.getDurationInMillis());
    assertEquals("endStateName",historicProcessInstance.getEndStateName());
  }
  finally {
    Clock.reset();
    cleanHistoricProcessInstancesFromDatabase("processInstanceId");
  }
}
