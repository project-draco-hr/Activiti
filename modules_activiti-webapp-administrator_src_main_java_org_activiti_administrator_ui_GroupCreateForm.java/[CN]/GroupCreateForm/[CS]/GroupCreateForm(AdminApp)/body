{
  this.app=application;
  setWriteThrough(false);
  setImmediate(true);
  setSizeFull();
  HorizontalLayout footer=new HorizontalLayout();
  footer.setSpacing(true);
  footer.setWidth("100%");
  footer.setVisible(true);
  setFooter(footer);
  create=new Button(app.getMessage(Messages.Create),(ClickListener)this);
  close=new Button(app.getMessage(Messages.Close),(ClickListener)this);
  reset=new Button(app.getMessage(Messages.Reset),this,"discard");
  GridLayout grid=new GridLayout(3,1);
  grid.addComponent(create,0,0);
  grid.addComponent(reset,1,0);
  grid.addComponent(close,2,0);
  grid.setSpacing(true);
  footer.addComponent(grid);
  footer.setComponentAlignment(grid,Alignment.BOTTOM_RIGHT);
  types=new String[]{app.getMessage(Messages.Assignment),app.getMessage(Messages.Program),app.getMessage(Messages.Project),app.getMessage(Messages.Role),app.getMessage(Messages.Team),app.getMessage(Messages.Unit)};
  groupTypes=new ComboBox("type");
  groupTypes.setFilteringMode(Filtering.FILTERINGMODE_STARTSWITH);
  for (int i=0; i < types.length; i++) {
    groupTypes.addItem(types[i]);
  }
  groupTypes.setImmediate(true);
  groupTypes.setNewItemsAllowed(true);
  members=new TwinColSelect(app.getMessage(Messages.Members),app.getAdminService().getUsers());
  members.setLeftColumnCaption(app.getMessage(Messages.AvailableUsers));
  members.setRightColumnCaption(app.getMessage(Messages.GroupMembers));
  members.setImmediate(true);
  members.setWidth("100%");
  setFormFieldFactory(new DefaultFieldFactory(){
    private static final long serialVersionUID=1L;
    @Override public Field createField(    Item item,    Object propertyId,    Component uiContext){
      if (propertyId.equals("type")) {
        groupTypes.setWidth("100%");
        groupTypes.setRequired(false);
        groupTypes.setCaption(app.getMessage(Messages.Types));
        return groupTypes;
      }
      Field field=super.createField(item,propertyId,uiContext);
      if (propertyId.equals("id")) {
        TextField tf=(TextField)field;
        tf.setNullRepresentation("");
        tf.setRequired(true);
        tf.setRequiredError("Id is missing");
        tf.setReadOnly(false);
      }
 else       if (propertyId.equals("name")) {
        TextField tf=(TextField)field;
        tf.setNullRepresentation("");
        tf.setRequired(true);
        tf.setRequiredError(app.getMessage(Messages.GroupNameIsMissing));
      }
      field.setWidth("100%");
      return field;
    }
  }
);
}
