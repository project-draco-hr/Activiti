{
  Map<String,Object> variableMap=new HashMap<String,Object>();
  variableMap.put("SpeakerName","John Doe");
  Address address=new Address();
  variableMap.put("address",address);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",variableMap);
  String processInstanceId=processInstance.getId();
  String processDefinitionId=processInstance.getProcessDefinitionId();
  Task task=taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("taskId",task.getId());
  ArrayNode propertyArray=objectMapper.createArrayNode();
  requestNode.put("properties",propertyArray);
  ObjectNode propNode=objectMapper.createObjectNode();
  propNode.put("id","room");
  propNode.put("value",123l);
  propertyArray.add(propNode);
  HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_FORM_DATA));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  executeHttpRequest(httpPost,HttpStatus.SC_INTERNAL_SERVER_ERROR);
  propNode=objectMapper.createObjectNode();
  propNode.put("id","street");
  propNode.put("value","test");
  propertyArray.add(propNode);
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  executeHttpRequest(httpPost,HttpStatus.SC_NO_CONTENT);
  task=taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();
  assertNull(task);
  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
  assertNull(processInstance);
  List<HistoricVariableInstance> variables=historyService.createHistoricVariableInstanceQuery().processInstanceId(processInstanceId).list();
  Map<String,HistoricVariableInstance> historyMap=new HashMap<String,HistoricVariableInstance>();
  for (  HistoricVariableInstance historicVariableInstance : variables) {
    historyMap.put(historicVariableInstance.getVariableName(),historicVariableInstance);
  }
  assertEquals("123",historyMap.get("room").getValue());
  assertEquals(processInstanceId,historyMap.get("room").getProcessInstanceId());
  processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",variableMap);
  processInstanceId=processInstance.getId();
  task=taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();
  requestNode.put("taskId",task.getId());
  propNode=objectMapper.createObjectNode();
  propNode.put("id","direction");
  propNode.put("value","nowhere");
  propertyArray.add(propNode);
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  executeHttpRequest(httpPost,HttpStatus.SC_BAD_REQUEST);
  propNode.put("value","up");
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  executeHttpRequest(httpPost,HttpStatus.SC_NO_CONTENT);
  task=taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();
  assertNull(task);
  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
  assertNull(processInstance);
  variables=historyService.createHistoricVariableInstanceQuery().processInstanceId(processInstanceId).list();
  historyMap.clear();
  for (  HistoricVariableInstance historicVariableInstance : variables) {
    historyMap.put(historicVariableInstance.getVariableName(),historicVariableInstance);
  }
  assertEquals("123",historyMap.get("room").getValue());
  assertEquals(processInstanceId,historyMap.get("room").getProcessInstanceId());
  assertEquals("up",historyMap.get("direction").getValue());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",processDefinitionId);
  propertyArray=objectMapper.createArrayNode();
  requestNode.put("properties",propertyArray);
  propNode=objectMapper.createObjectNode();
  propNode.put("id","number");
  propNode.put("value",123);
  propertyArray.add(propNode);
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode.get("id").asText());
  assertEquals(processDefinitionId,responseNode.get("processDefinitionId").asText());
  task=taskService.createTaskQuery().processInstanceId(responseNode.get("id").asText()).singleResult();
  assertNotNull(task);
}
