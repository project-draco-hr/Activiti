{
  Map<String,Object> variableMap=new HashMap<String,Object>();
  variableMap.put("SpeakerName","John Doe");
  Address address=new Address();
  variableMap.put("address",address);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",variableMap);
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  HttpResponse response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_FORM_DATA) + "?taskId="+ task.getId()),HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertEquals(7,responseNode.get("formProperties").size());
  Map<String,JsonNode> mappedProperties=new HashMap<String,JsonNode>();
  for (  JsonNode propNode : responseNode.get("formProperties")) {
    mappedProperties.put(propNode.get("id").asText(),propNode);
  }
  JsonNode propNode=mappedProperties.get("room");
  assertNotNull(propNode);
  assertEquals("room",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertTrue(propNode.get("type").isNull());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("duration");
  assertNotNull(propNode);
  assertEquals("duration",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertEquals("long",propNode.get("type").asText());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("speaker");
  assertNotNull(propNode);
  assertEquals("speaker",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertTrue(propNode.get("type").isNull());
  assertEquals("John Doe",propNode.get("value").asText());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean() == false);
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("street");
  assertNotNull(propNode);
  assertEquals("street",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertTrue(propNode.get("type").isNull());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean());
  propNode=mappedProperties.get("start");
  assertNotNull(propNode);
  assertEquals("start",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertEquals("date",propNode.get("type").asText());
  assertTrue(propNode.get("value").isNull());
  assertEquals("dd-MMM-yyyy",propNode.get("datePattern").asText());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("end");
  assertNotNull(propNode);
  assertEquals("end",propNode.get("id").asText());
  assertEquals("End",propNode.get("name").asText());
  assertEquals("date",propNode.get("type").asText());
  assertTrue(propNode.get("value").isNull());
  assertEquals("dd/MM/yyyy",propNode.get("datePattern").asText());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("direction");
  assertNotNull(propNode);
  assertEquals("direction",propNode.get("id").asText());
  assertTrue(propNode.get("name").isNull());
  assertEquals("enum",propNode.get("type").asText());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("datePattern").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  JsonNode enumValues=propNode.get("enumValues");
  assertEquals(4,enumValues.size());
  Map<String,String> mappedEnums=new HashMap<String,String>();
  for (  JsonNode enumNode : enumValues) {
    mappedEnums.put(enumNode.get("id").asText(),enumNode.get("name").asText());
  }
  assertEquals("Go Left",mappedEnums.get("left"));
  assertEquals("Go Right",mappedEnums.get("right"));
  assertEquals("Go Up",mappedEnums.get("up"));
  assertEquals("Go Down",mappedEnums.get("down"));
  response=executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_FORM_DATA) + "?processDefinitionId="+ processInstance.getProcessDefinitionId()),HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertEquals(2,responseNode.get("formProperties").size());
  mappedProperties.clear();
  for (  JsonNode propertyNode : responseNode.get("formProperties")) {
    mappedProperties.put(propertyNode.get("id").asText(),propertyNode);
  }
  propNode=mappedProperties.get("number");
  assertNotNull(propNode);
  assertEquals("number",propNode.get("id").asText());
  assertEquals("Number",propNode.get("name").asText());
  assertEquals("long",propNode.get("type").asText());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  propNode=mappedProperties.get("description");
  assertNotNull(propNode);
  assertEquals("description",propNode.get("id").asText());
  assertEquals("Description",propNode.get("name").asText());
  assertTrue(propNode.get("type").isNull());
  assertTrue(propNode.get("value").isNull());
  assertTrue(propNode.get("readable").asBoolean());
  assertTrue(propNode.get("writable").asBoolean());
  assertTrue(propNode.get("required").asBoolean() == false);
  executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_FORM_DATA) + "?processDefinitionId=123"),HttpStatus.SC_NOT_FOUND);
  executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_FORM_DATA) + "?processDefinitionId2=123"),HttpStatus.SC_BAD_REQUEST);
}
