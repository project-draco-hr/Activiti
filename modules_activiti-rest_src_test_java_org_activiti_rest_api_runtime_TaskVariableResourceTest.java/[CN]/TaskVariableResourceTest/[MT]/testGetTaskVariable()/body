{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.setVariableLocal(task.getId(),"localTaskVariable","localValue");
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,task.getId(),"localTaskVariable"));
    Representation response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("localValue",responseNode.get("value").asText());
    assertEquals("localTaskVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("sharedVariable",(Object)"processValue"));
    Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    taskService.setVariableLocal(processTask.getId(),"sharedVariable","taskValue");
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable"));
    response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("taskValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=local");
    response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("local",responseNode.get("scope").asText());
    assertEquals("taskValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=global");
    response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertEquals("global",responseNode.get("scope").asText());
    assertEquals("processValue",responseNode.get("value").asText());
    assertEquals("sharedVariable",responseNode.get("name").asText());
    assertEquals("string",responseNode.get("type").asText());
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"sharedVariable") + "?scope=illegal");
    try {
      response=client.get();
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_BAD_REQUEST,expected.getStatus());
      assertEquals("Invalid variable scope: 'illegal'",expected.getStatus().getDescription());
    }
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,"unexisting","sharedVariable"));
    try {
      response=client.get();
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_NOT_FOUND,expected.getStatus());
      assertEquals("task unexisting doesn't exist",expected.getStatus().getDescription());
    }
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_VARIABLE,processTask.getId(),"unexistingVariable"));
    try {
      response=client.get();
      fail("Exception expected");
    }
 catch (    ResourceException expected) {
      assertEquals(Status.CLIENT_ERROR_NOT_FOUND,expected.getStatus());
      assertEquals("Task '" + processTask.getId() + "' doesn't have a variable with name: 'unexistingVariable'.",expected.getStatus().getDescription());
    }
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      if (task.getExecutionId() == null) {
        taskService.deleteTask(task.getId(),true);
      }
    }
  }
}
