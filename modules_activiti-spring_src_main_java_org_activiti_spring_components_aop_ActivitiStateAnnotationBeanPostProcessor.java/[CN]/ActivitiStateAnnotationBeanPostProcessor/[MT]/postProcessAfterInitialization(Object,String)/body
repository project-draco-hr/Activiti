{
  final Class<?> targetClass=AopUtils.getTargetClass(bean);
  final org.activiti.spring.annotations.ActivitiComponent component=targetClass.getAnnotation(org.activiti.spring.annotations.ActivitiComponent.class);
  ReflectionUtils.doWithMethods(targetClass,new ReflectionUtils.MethodCallback(){
    @SuppressWarnings("unchecked") public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      State state=AnnotationUtils.getAnnotation(method,State.class);
      String processName=component.processKey();
      if (StringUtils.hasText(state.process())) {
        processName=state.process();
      }
      String stateName=state.state();
      if (!StringUtils.hasText(stateName)) {
        stateName=state.value();
      }
      Assert.notNull(stateName,"You must provide a stateName!");
      Map<Integer,String> vars=new HashMap<Integer,String>();
      Annotation[][] paramAnnotationsArray=method.getParameterAnnotations();
      int ctr=0;
      int pvMapIndex=-1;
      int procIdIndex=-1;
      for (      Annotation[] paramAnnotations : paramAnnotationsArray) {
        ctr+=1;
        for (        Annotation pa : paramAnnotations) {
          if (pa instanceof ProcessVariable) {
            ProcessVariable pv=(ProcessVariable)pa;
            String pvName=pv.value();
            vars.put(ctr,pvName);
          }
 else           if (pa instanceof ProcessVariables) {
            pvMapIndex=ctr;
          }
 else           if (pa instanceof ProcessId) {
            procIdIndex=ctr;
          }
        }
      }
      ActivitiStateHandlerRegistration registration=new ActivitiStateHandlerRegistration(vars,method,bean,stateName,beanName,pvMapIndex,procIdIndex,processName);
      registry.registerActivitiStateHandler(registration);
    }
  }
,new ReflectionUtils.MethodFilter(){
    public boolean matches(    Method method){
      return null != AnnotationUtils.getAnnotation(method,State.class);
    }
  }
);
  return bean;
}
