{
  log.info("{} starting to acquire async jobs due");
  final CommandExecutor commandExecutor=asyncExecutor.getCommandExecutor();
  while (!isInterrupted) {
    int maxJobsPerAcquisition=10;
    try {
      AcquiredJobs acquiredJobs=commandExecutor.execute(new AcquireAsyncJobsDueCmd(asyncExecutor));
      millisToWait=10000;
      int jobsAcquired=acquiredJobs.getJobIdBatches().size();
      if (jobsAcquired >= maxJobsPerAcquisition) {
        millisToWait=0;
      }
    }
 catch (    ActivitiOptimisticLockingException optimisticLockingException) {
      if (log.isDebugEnabled()) {
        log.debug("Optimistic locking exception during async job acquisition. If you have multiple async executors running against the same database, " + "this exception means that this thread tried to acquire a due async job, which already was acquired by another async executor acquisition thread." + "This is expected behavior in a clustered environment. "+ "You can ignore this message if you indeed have multiple async executor acquisition threads running against the same database. "+ "Exception message: {}",optimisticLockingException.getMessage());
      }
    }
catch (    Throwable e) {
      log.error("exception during async job acquisition: {}",e.getMessage(),e);
      millisToWait=10000;
    }
    if (millisToWait > 0) {
      try {
        if (log.isDebugEnabled()) {
          log.debug("async job acquisition thread sleeping for {} millis",millisToWait);
        }
synchronized (MONITOR) {
          if (!isInterrupted) {
            isWaiting.set(true);
            MONITOR.wait(millisToWait);
          }
        }
        if (log.isDebugEnabled()) {
          log.debug("async job acquisition thread woke up");
        }
      }
 catch (      InterruptedException e) {
        if (log.isDebugEnabled()) {
          log.debug("async job acquisition wait interrupted");
        }
      }
 finally {
        isWaiting.set(false);
      }
    }
  }
  log.info("{} stopped async job due acquisition");
}
