{
  String[] processEngineBeanNames=beanFactory.getBeanNamesForType(ProcessEngine.class);
  Assert.isTrue(processEngineBeanNames.length == 1,oneAndOnlyOneMessage);
  RuntimeBeanReference processEngineRuntimeBeanReference=new RuntimeBeanReference(processEngineBeanNames[0]);
  String processScopeName=PROCESS_SCOPE_NAME;
  Assert.isInstanceOf(BeanDefinitionRegistry.class,beanFactory,"BeanFactory was not a BeanDefinitionRegistry, so " + ProcessScopeBeanFactoryPostProcessor.class.getName() + " cannot be used.");
  BeanDefinitionRegistry registry=(BeanDefinitionRegistry)beanFactory;
  final boolean proxyTargetClass=true;
  for (  String beanName : beanFactory.getBeanDefinitionNames()) {
    BeanDefinition definition=beanFactory.getBeanDefinition(beanName);
    boolean scoped=processScopeName.equals(definition.getScope());
    Scopifier scopifier=new Scopifier(registry,processScopeName,proxyTargetClass,scoped);
    scopifier.visitBeanDefinition(definition);
    if (scoped) {
      Scopifier.createScopedProxy(beanName,definition,registry,proxyTargetClass);
    }
  }
  registry.registerBeanDefinition(processScopeName,BeanDefinitionBuilder.genericBeanDefinition(ProcessScope.class).addConstructorArgReference(processEngineRuntimeBeanReference.getBeanName()).getBeanDefinition());
  beanFactory.registerSingleton(PROCESS_SCOPE_PROCESS_VARIABLES_SINGLETON,this.processVariablesMap);
}
