{
  List<ProcessDefinitionEntity> processDefinitions=new ArrayList<ProcessDefinitionEntity>();
  Map<String,ResourceEntity> resources=deployment.getResources();
  for (  String resourceName : resources.keySet()) {
    LOG.info("Processing resource " + resourceName);
    if (isBpmnResource(resourceName)) {
      ResourceEntity resource=resources.get(resourceName);
      byte[] bytes=resource.getBytes();
      ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes);
      BpmnParse bpmnParse=bpmnParser.createParse().sourceInputStream(inputStream).deployment(deployment).name(resourceName);
      if (!deployment.isValidatingSchema()) {
        bpmnParse.setSchemaResource(null);
      }
      bpmnParse.execute();
      for (      ProcessDefinitionEntity processDefinition : bpmnParse.getProcessDefinitions()) {
        processDefinition.setResourceName(resourceName);
        String diagramResourceName=getDiagramResourceForProcess(resourceName,processDefinition.getKey(),resources);
        if (diagramResourceName == null && processDefinition.isGraphicalNotationDefined()) {
          try {
            byte[] diagramBytes=IoUtil.readInputStream(ProcessDiagramGenerator.generatePngDiagram(processDefinition),null);
            diagramResourceName=getProcessImageResourceName(resourceName,processDefinition.getKey(),"png");
            createResource(diagramResourceName,diagramBytes,deployment);
          }
 catch (          Throwable t) {
            LOG.log(Level.WARNING,"Error while generating process diagram, image will not be stored in repository",t);
          }
        }
        processDefinition.setDiagramResourceName(diagramResourceName);
        processDefinitions.add(processDefinition);
      }
    }
  }
  CommandContext commandContext=Context.getCommandContext();
  ProcessDefinitionManager processDefinitionManager=commandContext.getProcessDefinitionManager();
  DeploymentCache deploymentCache=Context.getProcessEngineConfiguration().getDeploymentCache();
  DbSqlSession dbSqlSession=commandContext.getSession(DbSqlSession.class);
  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {
    if (deployment.isNew()) {
      int processDefinitionVersion;
      ProcessDefinitionEntity latestProcessDefinition=processDefinitionManager.findLatestProcessDefinitionByKey(processDefinition.getKey());
      if (latestProcessDefinition != null) {
        processDefinitionVersion=latestProcessDefinition.getVersion() + 1;
      }
 else {
        processDefinitionVersion=1;
      }
      processDefinition.setVersion(processDefinitionVersion);
      processDefinition.setDeploymentId(deployment.getId());
      String nextId=idGenerator.getNextId();
      String processDefinitionId=processDefinition.getKey() + ":" + processDefinition.getVersion()+ ":"+ nextId;
      if (processDefinitionId.length() > 64) {
        processDefinitionId=nextId;
      }
      processDefinition.setId(processDefinitionId);
      removeObsoleteTimers(processDefinition);
      addTimerDeclarations(processDefinition);
      removeObsoleteMessageEventSubscriptions(processDefinition,latestProcessDefinition);
      addMessageEventSubscriptions(processDefinition);
      dbSqlSession.insert(processDefinition);
      deploymentCache.addProcessDefinition(processDefinition);
      addAuthorizations(processDefinition);
    }
 else {
      String deploymentId=deployment.getId();
      processDefinition.setDeploymentId(deploymentId);
      ProcessDefinitionEntity persistedProcessDefinition=processDefinitionManager.findProcessDefinitionByDeploymentAndKey(deploymentId,processDefinition.getKey());
      processDefinition.setId(persistedProcessDefinition.getId());
      processDefinition.setVersion(persistedProcessDefinition.getVersion());
      deploymentCache.addProcessDefinition(processDefinition);
      addAuthorizations(processDefinition);
    }
    Context.getProcessEngineConfiguration().getDeploymentCache().addProcessDefinition(processDefinition);
  }
}
