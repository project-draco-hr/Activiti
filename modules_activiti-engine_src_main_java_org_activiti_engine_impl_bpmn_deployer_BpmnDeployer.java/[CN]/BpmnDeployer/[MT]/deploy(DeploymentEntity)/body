{
  List<ProcessDefinitionEntity> processDefinitions=new ArrayList<ProcessDefinitionEntity>();
  Map<String,ResourceEntity> resources=deployment.getResources();
  for (  String resourceName : resources.keySet()) {
    LOG.info("Processing resource " + resourceName);
    if (resourceName.endsWith(BPMN_RESOURCE_SUFFIX)) {
      ResourceEntity resource=resources.get(resourceName);
      byte[] bytes=resource.getBytes();
      ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes);
      BpmnParse bpmnParse=bpmnParser.createParse().sourceInputStream(inputStream).deployment(deployment).name(resourceName);
      if (!deployment.isValidatingSchema()) {
        bpmnParse.setSchemaResource(null);
      }
      bpmnParse.execute();
      for (      ProcessDefinitionEntity processDefinition : bpmnParse.getProcessDefinitions()) {
        processDefinition.setResourceName(resourceName);
        String diagramResourceName=getDiagramResourceForProcess(resourceName,processDefinition.getKey(),resources);
        if (diagramResourceName == null && processDefinition.isGraphicalNotationDefined()) {
          try {
            byte[] diagramBytes=IoUtil.readInputStream(ProcessDiagramGenerator.generatePngDiagram(processDefinition),null);
            diagramResourceName=getProcessImageResourceName(resourceName,processDefinition.getKey(),"png");
            createResource(diagramResourceName,diagramBytes,deployment);
          }
 catch (          Exception e) {
            LOG.log(Level.WARNING,"Error while generating process diagram, image will not be stored in repository",e);
          }
        }
        processDefinition.setDiagramResourceName(diagramResourceName);
        processDefinitions.add(processDefinition);
      }
    }
  }
  DbRepositorySession dbRepositorySession=(DbRepositorySession)CommandContext.getCurrentSession(RepositorySession.class);
  DbSqlSession dbSqlSession=CommandContext.getCurrentSession(DbSqlSession.class);
  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {
    if (deployment.isNew()) {
      int processDefinitionVersion;
      ProcessDefinitionEntity latestProcessDefinition=dbRepositorySession.findLatestProcessDefinitionByKey(processDefinition.getKey());
      if (latestProcessDefinition != null) {
        processDefinitionVersion=latestProcessDefinition.getVersion() + 1;
      }
 else {
        processDefinitionVersion=1;
      }
      processDefinition.setVersion(processDefinitionVersion);
      processDefinition.setDeploymentId(deployment.getId());
      String processDefinitionId=processDefinition.getKey() + ":" + processDefinition.getVersion();
      if (processDefinitionId.length() > 64) {
        throw new ActivitiException("Invalid process definition id: '" + processDefinitionId + "': id can be maximum 64 characters");
      }
      processDefinition.setId(processDefinitionId);
      dbSqlSession.insert(processDefinition);
      dbRepositorySession.addToProcessDefinitionCache(processDefinition);
    }
 else {
      String deploymentId=deployment.getId();
      processDefinition.setDeploymentId(deploymentId);
      ProcessDefinitionEntity persistedProcessDefinition=dbRepositorySession.findProcessDefinitionByDeploymentAndKey(deploymentId,processDefinition.getKey());
      processDefinition.setId(persistedProcessDefinition.getId());
      processDefinition.setVersion(persistedProcessDefinition.getVersion());
      dbRepositorySession.addToProcessDefinitionCache(processDefinition);
    }
  }
}
