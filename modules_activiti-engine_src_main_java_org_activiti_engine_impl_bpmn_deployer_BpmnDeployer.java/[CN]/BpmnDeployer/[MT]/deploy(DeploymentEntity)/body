{
  LOG.debug("Processing deployment {}",deployment.getName());
  List<ProcessDefinitionEntity> processDefinitions=new ArrayList<ProcessDefinitionEntity>();
  Map<String,ResourceEntity> resources=deployment.getResources();
  for (  String resourceName : resources.keySet()) {
    LOG.info("Processing resource {}",resourceName);
    if (isBpmnResource(resourceName)) {
      ResourceEntity resource=resources.get(resourceName);
      byte[] bytes=resource.getBytes();
      ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes);
      BpmnParse bpmnParse=bpmnParser.createParse().sourceInputStream(inputStream).deployment(deployment).name(resourceName);
      bpmnParse.execute();
      for (      ProcessDefinitionEntity processDefinition : bpmnParse.getProcessDefinitions()) {
        processDefinition.setResourceName(resourceName);
        if (deployment.getTenantId() != null) {
          processDefinition.setTenantId(deployment.getTenantId());
        }
        String diagramResourceName=getDiagramResourceForProcess(resourceName,processDefinition.getKey(),resources);
        if (deployment.isNew()) {
          if (Context.getProcessEngineConfiguration().isCreateDiagramOnDeploy() && diagramResourceName == null && processDefinition.isGraphicalNotationDefined()) {
            try {
              byte[] diagramBytes=IoUtil.readInputStream(ProcessDiagramGenerator.generatePngDiagram(bpmnParse.getBpmnModel()),null);
              diagramResourceName=getProcessImageResourceName(resourceName,processDefinition.getKey(),"png");
              createResource(diagramResourceName,diagramBytes,deployment);
            }
 catch (            Throwable t) {
              LOG.warn("Error while generating process diagram, image will not be stored in repository",t);
            }
          }
        }
        processDefinition.setDiagramResourceName(diagramResourceName);
        processDefinitions.add(processDefinition);
      }
    }
  }
  List<String> keyList=new ArrayList<String>();
  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {
    if (keyList.contains(processDefinition.getKey())) {
      throw new ActivitiException("The deployment contains process definitions with the same key (process id atrribute), this is not allowed");
    }
    keyList.add(processDefinition.getKey());
  }
  CommandContext commandContext=Context.getCommandContext();
  ProcessDefinitionEntityManager processDefinitionManager=commandContext.getProcessDefinitionEntityManager();
  DbSqlSession dbSqlSession=commandContext.getSession(DbSqlSession.class);
  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {
    List<TimerEntity> timers=new ArrayList<TimerEntity>();
    if (deployment.isNew()) {
      int processDefinitionVersion;
      ProcessDefinitionEntity latestProcessDefinition=null;
      if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
        latestProcessDefinition=processDefinitionManager.findLatestProcessDefinitionByKeyAndTenantId(processDefinition.getKey(),processDefinition.getTenantId());
      }
 else {
        latestProcessDefinition=processDefinitionManager.findLatestProcessDefinitionByKey(processDefinition.getKey());
      }
      if (latestProcessDefinition != null) {
        processDefinitionVersion=latestProcessDefinition.getVersion() + 1;
      }
 else {
        processDefinitionVersion=1;
      }
      processDefinition.setVersion(processDefinitionVersion);
      processDefinition.setDeploymentId(deployment.getId());
      String nextId=idGenerator.getNextId();
      String processDefinitionId=processDefinition.getKey() + ":" + processDefinition.getVersion()+ ":"+ nextId;
      if (processDefinitionId.length() > 64) {
        processDefinitionId=nextId;
      }
      processDefinition.setId(processDefinitionId);
      removeObsoleteTimers(processDefinition);
      addTimerDeclarations(processDefinition,timers);
      removeObsoleteMessageEventSubscriptions(processDefinition,latestProcessDefinition);
      addMessageEventSubscriptions(processDefinition);
      dbSqlSession.insert(processDefinition);
      addAuthorizations(processDefinition);
      if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,processDefinition));
      }
      scheduleTimers(timers);
    }
 else {
      String deploymentId=deployment.getId();
      processDefinition.setDeploymentId(deploymentId);
      ProcessDefinitionEntity persistedProcessDefinition=null;
      if (processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
        persistedProcessDefinition=processDefinitionManager.findProcessDefinitionByDeploymentAndKey(deploymentId,processDefinition.getKey());
      }
 else {
        persistedProcessDefinition=processDefinitionManager.findProcessDefinitionByDeploymentAndKeyAndTenantId(deploymentId,processDefinition.getKey(),processDefinition.getTenantId());
      }
      if (persistedProcessDefinition != null) {
        processDefinition.setId(persistedProcessDefinition.getId());
        processDefinition.setVersion(persistedProcessDefinition.getVersion());
        processDefinition.setSuspensionState(persistedProcessDefinition.getSuspensionState());
      }
    }
    Context.getProcessEngineConfiguration().getDeploymentManager().getProcessDefinitionCache().add(processDefinition.getId(),processDefinition);
    deployment.addDeployedArtifact(processDefinition);
  }
}
