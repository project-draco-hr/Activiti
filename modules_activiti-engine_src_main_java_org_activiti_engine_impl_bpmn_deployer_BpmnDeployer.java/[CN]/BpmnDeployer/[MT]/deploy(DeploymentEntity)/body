{
  List<ProcessDefinitionEntity> processDefinitions=new ArrayList<ProcessDefinitionEntity>();
  Map<String,ResourceEntity> resources=deployment.getResources();
  for (  String resourceName : resources.keySet()) {
    LOG.info("Processing resource " + resourceName);
    if (resourceName.endsWith(BPMN_RESOURCE_SUFFIX)) {
      ResourceEntity resource=resources.get(resourceName);
      byte[] bytes=resource.getBytes();
      ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes);
      BpmnParse bpmnParse=bpmnParser.createParse().sourceInputStream(inputStream).deployment(deployment).name(resourceName);
      if (!deployment.isValidatingSchema()) {
        bpmnParse.setSchemaResource(null);
      }
      bpmnParse.execute();
      for (      ProcessDefinitionEntity processDefinition : bpmnParse.getProcessDefinitions()) {
        processDefinition.setResourceName(resourceName);
        String diagramResourceName=getDiagramResourceForProcess(resourceName,processDefinition.getKey(),resources);
        if (diagramResourceName == null && processDefinition.isGraphicalNotationDefined()) {
          try {
            byte[] diagramBytes=IoUtil.readInputStream(ProcessDiagramGenerator.generatePngDiagram(processDefinition),null);
            diagramResourceName=getProcessImageResourceName(resourceName,processDefinition.getKey(),"png");
            createResource(diagramResourceName,diagramBytes,deployment);
          }
 catch (          Exception e) {
            LOG.log(Level.WARNING,"Error while generating process diagram, image will not be stored in repository",e);
          }
        }
        processDefinition.setDiagramResourceName(diagramResourceName);
        processDefinitions.add(processDefinition);
      }
    }
  }
  return processDefinitions;
}
