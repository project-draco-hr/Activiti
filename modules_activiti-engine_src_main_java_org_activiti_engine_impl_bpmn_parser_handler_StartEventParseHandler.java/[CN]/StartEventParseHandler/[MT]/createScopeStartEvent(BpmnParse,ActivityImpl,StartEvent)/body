{
  ScopeImpl scope=bpmnParse.getCurrentScope();
  Object triggeredByEvent=scope.getProperty("triggeredByEvent");
  boolean isTriggeredByEvent=triggeredByEvent != null && ((Boolean)triggeredByEvent == true);
  if (isTriggeredByEvent) {
    EventSubProcessStartEventActivityBehavior activityBehavior=bpmnParse.getActivityBehaviorFactory().createEventSubProcessStartEventActivityBehavior(startEvent,startEventActivity.getId());
    startEventActivity.setActivityBehavior(activityBehavior);
    if (startEvent.getEventDefinitions().size() > 0) {
      EventDefinition eventDefinition=startEvent.getEventDefinitions().get(0);
      if (eventDefinition instanceof org.activiti.bpmn.model.ErrorEventDefinition || eventDefinition instanceof MessageEventDefinition || eventDefinition instanceof SignalEventDefinition) {
        bpmnParse.getBpmnParserHandlers().parseElement(bpmnParse,eventDefinition);
      }
 else {
        bpmnParse.getBpmnModel().addProblem("start event of event subprocess must be of type 'error', 'message' or 'signal' ",startEvent);
      }
    }
  }
 else {
    if (startEvent.getEventDefinitions().size() > 0) {
      bpmnParse.getBpmnModel().addProblem("event definitions only allowed on start event if subprocess is an event subprocess",startEvent);
    }
    if (scope.getProperty(PROPERTYNAME_INITIAL) == null) {
      scope.setProperty(PROPERTYNAME_INITIAL,startEventActivity);
      startEventActivity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createNoneStartEventActivityBehavior(startEvent));
    }
 else {
      bpmnParse.getBpmnModel().addProblem("multiple start events not supported for subprocess",bpmnParse.getCurrentSubProcess());
    }
  }
}
