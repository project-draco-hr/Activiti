{
  SequenceFlow sequenceFlow=(SequenceFlow)baseElement;
  ObjectNode flowNode=BpmnJsonConverterUtil.createChildShape(sequenceFlow.getId(),STENCIL_SEQUENCE_FLOW,172,212,128,212);
  ArrayNode dockersArrayNode=objectMapper.createArrayNode();
  ObjectNode dockNode=objectMapper.createObjectNode();
  dockNode.put(EDITOR_BOUNDS_X,model.getGraphicInfo(sequenceFlow.getSourceRef()).getWidth() / 2.0);
  dockNode.put(EDITOR_BOUNDS_Y,model.getGraphicInfo(sequenceFlow.getSourceRef()).getHeight() / 2.0);
  dockersArrayNode.add(dockNode);
  if (model.getFlowLocationGraphicInfo(sequenceFlow.getId()).size() > 2) {
    for (int i=1; i < model.getFlowLocationGraphicInfo(sequenceFlow.getId()).size() - 1; i++) {
      GraphicInfo graphicInfo=model.getFlowLocationGraphicInfo(sequenceFlow.getId()).get(i);
      dockNode=objectMapper.createObjectNode();
      dockNode.put(EDITOR_BOUNDS_X,graphicInfo.getX());
      dockNode.put(EDITOR_BOUNDS_Y,graphicInfo.getY());
      dockersArrayNode.add(dockNode);
    }
  }
  dockNode=objectMapper.createObjectNode();
  dockNode.put(EDITOR_BOUNDS_X,model.getGraphicInfo(sequenceFlow.getTargetRef()).getWidth() / 2.0);
  dockNode.put(EDITOR_BOUNDS_Y,model.getGraphicInfo(sequenceFlow.getTargetRef()).getHeight() / 2.0);
  dockersArrayNode.add(dockNode);
  flowNode.put("dockers",dockersArrayNode);
  ArrayNode outgoingArrayNode=objectMapper.createArrayNode();
  outgoingArrayNode.add(BpmnJsonConverterUtil.createResourceNode(sequenceFlow.getTargetRef()));
  flowNode.put("outgoing",outgoingArrayNode);
  flowNode.put("target",BpmnJsonConverterUtil.createResourceNode(sequenceFlow.getTargetRef()));
  ObjectNode propertiesNode=objectMapper.createObjectNode();
  propertiesNode.put(PROPERTY_OVERRIDE_ID,sequenceFlow.getId());
  if (StringUtils.isNotEmpty(sequenceFlow.getName())) {
    propertiesNode.put(PROPERTY_NAME,sequenceFlow.getName());
  }
  if (StringUtils.isNotEmpty(sequenceFlow.getDocumentation())) {
    propertiesNode.put(PROPERTY_DOCUMENTATION,sequenceFlow.getDocumentation());
  }
  if (sequenceFlow.getExtensionElements().get("conditionFieldId") != null) {
    String conditionFieldId=sequenceFlow.getExtensionElements().get("conditionFieldId").get(0).getElementText();
    String conditionOperator=null;
    if (sequenceFlow.getExtensionElements().get("conditionOperator") != null) {
      conditionOperator=sequenceFlow.getExtensionElements().get("conditionOperator").get(0).getElementText();
    }
    String conditionValue=null;
    if (sequenceFlow.getExtensionElements().get("conditionValue") != null) {
      conditionValue=sequenceFlow.getExtensionElements().get("conditionValue").get(0).getElementText();
    }
    if (StringUtils.isNotEmpty(conditionFieldId) && StringUtils.isNotEmpty(conditionOperator) && StringUtils.isNotEmpty(conditionValue)) {
      ObjectNode expressionNode=objectMapper.createObjectNode();
      expressionNode.put("type","variables");
      expressionNode.put("fieldType","field");
      expressionNode.put("fieldId",conditionFieldId);
      expressionNode.put("operator",conditionOperator);
      expressionNode.put("value",conditionValue);
      ObjectNode conditionNode=objectMapper.createObjectNode();
      conditionNode.put("expression",expressionNode);
      propertiesNode.put(PROPERTY_SEQUENCEFLOW_CONDITION,conditionNode);
    }
  }
 else   if (sequenceFlow.getExtensionElements().get("conditionFormId") != null) {
    String conditionFormId=sequenceFlow.getExtensionElements().get("conditionFormId").get(0).getElementText();
    String conditionOperator=null;
    if (sequenceFlow.getExtensionElements().get("conditionOperator") != null) {
      conditionOperator=sequenceFlow.getExtensionElements().get("conditionOperator").get(0).getElementText();
    }
    String conditionOutcomeName=null;
    if (sequenceFlow.getExtensionElements().get("conditionOutcomeName") != null) {
      conditionOutcomeName=sequenceFlow.getExtensionElements().get("conditionOutcomeName").get(0).getElementText();
    }
    if (StringUtils.isNotEmpty(conditionFormId) && StringUtils.isNotEmpty(conditionOperator) && StringUtils.isNotEmpty(conditionOutcomeName)) {
      ObjectNode expressionNode=objectMapper.createObjectNode();
      expressionNode.put("type","variables");
      expressionNode.put("fieldType","outcome");
      expressionNode.put("outcomeFormId",conditionFormId);
      expressionNode.put("operator",conditionOperator);
      expressionNode.put("outcomeName",conditionOutcomeName);
      ObjectNode conditionNode=objectMapper.createObjectNode();
      conditionNode.put("expression",expressionNode);
      propertiesNode.put(PROPERTY_SEQUENCEFLOW_CONDITION,conditionNode);
    }
  }
 else   if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {
    ObjectNode expressionNode=objectMapper.createObjectNode();
    expressionNode.put("type","static");
    expressionNode.put("staticValue",sequenceFlow.getConditionExpression());
    ObjectNode conditionNode=objectMapper.createObjectNode();
    conditionNode.put("expression",expressionNode);
    propertiesNode.put(PROPERTY_SEQUENCEFLOW_CONDITION,conditionNode);
  }
  FlowElement sourceElement=model.getFlowElement(sequenceFlow.getSourceRef());
  if (sourceElement != null) {
    String defaultFlow=null;
    if (sourceElement instanceof Gateway) {
      Gateway gateway=(Gateway)sourceElement;
      defaultFlow=gateway.getDefaultFlow();
    }
 else     if (sourceElement instanceof Activity) {
      Activity activity=(Activity)sourceElement;
      defaultFlow=activity.getDefaultFlow();
    }
    if (StringUtils.isNotEmpty(defaultFlow) && defaultFlow.equals(sequenceFlow.getId())) {
      propertiesNode.put("defaultflow",true);
    }
  }
  flowNode.put(EDITOR_SHAPE_PROPERTIES,propertiesNode);
  shapesArrayNode.add(flowNode);
}
