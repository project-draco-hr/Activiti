{
  SequenceFlow sequenceFlow=(SequenceFlow)baseElement;
  ObjectNode flowNode=BpmnJsonConverterUtil.createChildShape(sequenceFlow.getId(),STENCIL_SEQUENCE_FLOW,172,212,128,212);
  ArrayNode dockersArrayNode=objectMapper.createArrayNode();
  ObjectNode dockNode=objectMapper.createObjectNode();
  dockNode.put(EDITOR_BOUNDS_X,model.getGraphicInfo(sequenceFlow.getSourceRef()).getWidth() / 2.0);
  dockNode.put(EDITOR_BOUNDS_Y,model.getGraphicInfo(sequenceFlow.getSourceRef()).getHeight() / 2.0);
  dockersArrayNode.add(dockNode);
  if (model.getFlowLocationGraphicInfo(sequenceFlow.getId()).size() > 2) {
    for (int i=1; i < model.getFlowLocationGraphicInfo(sequenceFlow.getId()).size() - 1; i++) {
      GraphicInfo graphicInfo=model.getFlowLocationGraphicInfo(sequenceFlow.getId()).get(i);
      dockNode=objectMapper.createObjectNode();
      dockNode.put(EDITOR_BOUNDS_X,graphicInfo.getX());
      dockNode.put(EDITOR_BOUNDS_Y,graphicInfo.getY());
      dockersArrayNode.add(dockNode);
    }
  }
  dockNode=objectMapper.createObjectNode();
  dockNode.put(EDITOR_BOUNDS_X,model.getGraphicInfo(sequenceFlow.getTargetRef()).getWidth() / 2.0);
  dockNode.put(EDITOR_BOUNDS_Y,model.getGraphicInfo(sequenceFlow.getTargetRef()).getHeight() / 2.0);
  dockersArrayNode.add(dockNode);
  flowNode.put("dockers",dockersArrayNode);
  ArrayNode outgoingArrayNode=objectMapper.createArrayNode();
  outgoingArrayNode.add(BpmnJsonConverterUtil.createResourceNode(sequenceFlow.getTargetRef()));
  flowNode.put("outgoing",outgoingArrayNode);
  flowNode.put("target",BpmnJsonConverterUtil.createResourceNode(sequenceFlow.getTargetRef()));
  ObjectNode propertiesNode=objectMapper.createObjectNode();
  propertiesNode.put(PROPERTY_OVERRIDE_ID,sequenceFlow.getId());
  if (StringUtils.isNotEmpty(sequenceFlow.getName())) {
    propertiesNode.put(PROPERTY_NAME,sequenceFlow.getName());
  }
  if (StringUtils.isNotEmpty(sequenceFlow.getDocumentation())) {
    propertiesNode.put(PROPERTY_DOCUMENTATION,sequenceFlow.getDocumentation());
  }
  if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {
    propertiesNode.put(PROPERTY_SEQUENCEFLOW_CONDITION,sequenceFlow.getConditionExpression());
  }
  if (StringUtils.isNotEmpty(sequenceFlow.getSourceRef())) {
    FlowElement sourceFlowElement=container.getFlowElement(sequenceFlow.getSourceRef());
    if (sourceFlowElement != null) {
      String defaultFlowId=null;
      if (sourceFlowElement instanceof ExclusiveGateway) {
        ExclusiveGateway parentExclusiveGateway=(ExclusiveGateway)sourceFlowElement;
        defaultFlowId=parentExclusiveGateway.getDefaultFlow();
      }
 else       if (sourceFlowElement instanceof Activity) {
        Activity parentActivity=(Activity)sourceFlowElement;
        defaultFlowId=parentActivity.getDefaultFlow();
      }
      if (defaultFlowId != null && defaultFlowId.equals(sequenceFlow.getId())) {
        propertiesNode.put(PROPERTY_SEQUENCEFLOW_DEFAULT,true);
      }
    }
  }
  if (sequenceFlow.getExecutionListeners().size() > 0) {
    BpmnJsonConverterUtil.convertListenersToJson(sequenceFlow.getExecutionListeners(),true,propertiesNode);
  }
  flowNode.put(EDITOR_SHAPE_PROPERTIES,propertiesNode);
  shapesArrayNode.add(flowNode);
}
