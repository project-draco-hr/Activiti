{
  TransitionImpl transition=execution.getTransition();
  List<ExecutionListener> executionListeners=transition.getExecutionListeners();
  int executionListenerIndex=execution.getExecutionListenerIndex();
  if (executionListeners.size() > executionListenerIndex) {
    execution.setEventName(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_TAKE);
    execution.setEventSource(transition);
    ExecutionListener listener=executionListeners.get(executionListenerIndex);
    try {
      listener.notify(execution);
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new PvmException("couldn't execute event listener : " + e.getMessage(),e);
    }
    execution.setExecutionListenerIndex(executionListenerIndex + 1);
    execution.performOperation(this);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("{} takes transition {}",execution,transition);
    }
    execution.setExecutionListenerIndex(0);
    execution.setEventName(null);
    execution.setEventSource(null);
    ActivityImpl activity=(ActivityImpl)execution.getActivity();
    ActivityImpl nextScope=findNextScope(activity.getParent(),transition.getDestination());
    execution.setActivity(nextScope);
    if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
      Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createSequenceFlowTakenEvent(ActivitiEventType.SEQUENCEFLOW_TAKEN,transition.getId(),activity.getId(),(String)activity.getProperties().get("name"),(String)activity.getProperties().get("type"),activity.getActivityBehavior().getClass().getCanonicalName(),nextScope.getId(),(String)nextScope.getProperties().get("name"),(String)nextScope.getProperties().get("type"),nextScope.getActivityBehavior().getClass().getCanonicalName()));
    }
    execution.performOperation(TRANSITION_CREATE_SCOPE);
  }
}
