{
  ActivityDrawInstruction drawInstruction=activityDrawInstructions.get(flowNode.getClass());
  if (drawInstruction != null) {
    drawInstruction.draw(processDiagramCanvas,bpmnModel,flowNode);
    boolean multiInstanceSequential=false, multiInstanceParallel=false, collapsed=false;
    if (flowNode instanceof Activity) {
      Activity activity=(Activity)flowNode;
      MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics=activity.getLoopCharacteristics();
      if (multiInstanceLoopCharacteristics != null) {
        multiInstanceSequential=multiInstanceLoopCharacteristics.isSequential();
        multiInstanceParallel=!multiInstanceSequential;
      }
    }
    GraphicInfo graphicInfo=bpmnModel.getGraphicInfo(flowNode.getId());
    if (flowNode instanceof SubProcess) {
      collapsed=graphicInfo.getExpanded() != null && !graphicInfo.getExpanded();
    }
 else     if (flowNode instanceof CallActivity) {
      collapsed=true;
    }
    if (scaleFactor == 1.0) {
      processDiagramCanvas.drawActivityMarkers((int)graphicInfo.getX(),(int)graphicInfo.getY(),(int)graphicInfo.getWidth(),(int)graphicInfo.getHeight(),multiInstanceSequential,multiInstanceParallel,collapsed);
    }
    if (highLightedActivities.contains(flowNode.getId())) {
      drawHighLight(processDiagramCanvas,bpmnModel.getGraphicInfo(flowNode.getId()));
    }
  }
  for (  SequenceFlow sequenceFlow : flowNode.getOutgoingFlows()) {
    boolean highLighted=(highLightedFlows.contains(sequenceFlow.getId()));
    String defaultFlow=null;
    if (flowNode instanceof Activity) {
      defaultFlow=((Activity)flowNode).getDefaultFlow();
    }
 else     if (flowNode instanceof Gateway) {
      defaultFlow=((Gateway)flowNode).getDefaultFlow();
    }
    boolean isDefault=false;
    if (defaultFlow != null && defaultFlow.equalsIgnoreCase(sequenceFlow.getId())) {
      isDefault=true;
    }
    boolean drawConditionalIndicator=sequenceFlow.getConditionExpression() != null && !(flowNode instanceof Gateway);
    String sourceRef=sequenceFlow.getSourceRef();
    String targetRef=sequenceFlow.getTargetRef();
    FlowElement sourceElement=bpmnModel.getFlowElement(sourceRef);
    FlowElement targetElement=bpmnModel.getFlowElement(targetRef);
    List<GraphicInfo> graphicInfoList=bpmnModel.getFlowLocationGraphicInfo(sequenceFlow.getId());
    graphicInfoList=connectionPerfectionizer(processDiagramCanvas,bpmnModel,sourceElement,targetElement,graphicInfoList);
    int xPoints[]=new int[graphicInfoList.size()];
    int yPoints[]=new int[graphicInfoList.size()];
    for (int i=1; i < graphicInfoList.size(); i++) {
      GraphicInfo graphicInfo=graphicInfoList.get(i);
      GraphicInfo previousGraphicInfo=graphicInfoList.get(i - 1);
      if (i == 1) {
        xPoints[0]=(int)previousGraphicInfo.getX();
        yPoints[0]=(int)previousGraphicInfo.getY();
      }
      xPoints[i]=(int)graphicInfo.getX();
      yPoints[i]=(int)graphicInfo.getY();
    }
    processDiagramCanvas.drawSequenceflow(xPoints,yPoints,drawConditionalIndicator,isDefault,highLighted,scaleFactor);
    GraphicInfo labelGraphicInfo=bpmnModel.getLabelGraphicInfo(sequenceFlow.getId());
    if (labelGraphicInfo != null) {
      GraphicInfo lineCenter=getLineCenter(graphicInfoList);
      processDiagramCanvas.drawLabel(sequenceFlow.getName(),lineCenter,false);
    }
  }
  if (flowNode instanceof FlowElementsContainer) {
    for (    FlowElement nestedFlowElement : ((FlowElementsContainer)flowNode).getFlowElements()) {
      if (nestedFlowElement instanceof FlowNode) {
        drawActivity(processDiagramCanvas,bpmnModel,(FlowNode)nestedFlowElement,highLightedActivities,highLightedFlows,scaleFactor);
      }
    }
  }
}
