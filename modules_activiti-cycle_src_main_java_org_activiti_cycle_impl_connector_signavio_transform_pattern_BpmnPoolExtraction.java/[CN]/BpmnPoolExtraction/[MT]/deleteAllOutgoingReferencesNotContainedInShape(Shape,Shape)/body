{
  ArrayList<Shape> outgoings=shapeToClean.getOutgoings();
  if (outgoings != null && outgoings.size() > 0) {
    ArrayList<Shape> removeOutgoings=new ArrayList<Shape>();
    for (    Shape outgoing : outgoings) {
      Shape target=outgoing.getTarget();
      if (target != null) {
        if (!(shapeIsContainedIn(target,sourceShape))) {
          removeOutgoings.add(outgoing);
        }
      }
    }
    if (log.isLoggable(Level.FINE)) {
      if (removeOutgoings.size() > 0) {
        log.fine("Deleting outgoings for shape: " + shapeToClean.getProperty("name") + ", "+ shapeToClean.getStencilId());
        for (        Shape shape2 : removeOutgoings) {
          log.fine("Delete Shape: " + shape2.getStencilId() + ", "+ shape2.getResourceId()+ " targeting "+ shape2.getTarget().getProperty("name")+ "("+ shape2.getStencilId()+ ")");
        }
      }
    }
    outgoings.removeAll(removeOutgoings);
    shapeToClean.setOutgoings(outgoings);
  }
}
