{
  ArrayList<Shape> incomings=shapeToClean.getIncomings();
  if (incomings != null && incomings.size() > 0) {
    ArrayList<Shape> removeIncomings=new ArrayList<Shape>();
    for (    Shape incoming : incomings) {
      Shape incomingSource=incoming.getIncomings().get(0);
      if (incomingSource.getStencilId().equals("MessageFlow") || incomingSource.getStencilId().equals("SequenceFlow")) {
        incomingSource=incoming;
      }
      if (!shapeIsContainedIn(incomingSource,sourceShape)) {
        removeIncomings.add(incoming);
      }
    }
    if (log.isLoggable(Level.FINE)) {
      if (removeIncomings.size() > 0) {
        log.fine("Deleting Incomings for shape: " + shapeToClean.getProperty("name") + ", "+ shapeToClean.getStencilId());
        for (        Shape shape2 : removeIncomings) {
          log.fine("Delete Shape: " + shape2.getStencilId() + ", "+ shape2.getResourceId()+ " coming from "+ ((Shape)shape2.getIncomings().get(0)).getProperty("name")+ "("+ ((Shape)shape2.getIncomings().get(0)).getStencilId()+ ")");
        }
      }
    }
    incomings.removeAll(removeIncomings);
    shapeToClean.setIncomings(incomings);
  }
}
