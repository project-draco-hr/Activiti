{
  if (taskDefinition.getAssigneeExpression() != null) {
    task.setAssignee((String)taskDefinition.getAssigneeExpression().getValue(execution),true,false);
  }
  if (taskDefinition.getOwnerExpression() != null) {
    task.setOwner((String)taskDefinition.getOwnerExpression().getValue(execution));
  }
  if (!taskDefinition.getCandidateGroupIdExpressions().isEmpty()) {
    for (    Expression groupIdExpr : taskDefinition.getCandidateGroupIdExpressions()) {
      Object value=groupIdExpr.getValue(execution);
      if (value instanceof String) {
        List<String> candiates=extractCandidates((String)value);
        task.addCandidateGroups(candiates);
      }
 else       if (value instanceof Collection) {
        task.addCandidateGroups((Collection)value);
      }
 else {
        throw new ActivitiIllegalArgumentException("Expression did not resolve to a string or collection of strings");
      }
    }
  }
  if (!taskDefinition.getCandidateUserIdExpressions().isEmpty()) {
    for (    Expression userIdExpr : taskDefinition.getCandidateUserIdExpressions()) {
      Object value=userIdExpr.getValue(execution);
      if (value instanceof String) {
        List<String> candiates=extractCandidates((String)value);
        task.addCandidateUsers(candiates);
      }
 else       if (value instanceof Collection) {
        task.addCandidateUsers((Collection)value);
      }
 else {
        throw new ActivitiException("Expression did not resolve to a string or collection of strings");
      }
    }
  }
  if (!taskDefinition.getCustomUserIdentityLinkExpressions().isEmpty()) {
    Map<String,Set<Expression>> identityLinks=taskDefinition.getCustomUserIdentityLinkExpressions();
    for (    String identityLinkType : identityLinks.keySet()) {
      for (      Expression idExpression : identityLinks.get(identityLinkType)) {
        Object value=idExpression.getValue(execution);
        if (value instanceof String) {
          List<String> userIds=extractCandidates((String)value);
          for (          String userId : userIds) {
            task.addUserIdentityLink(userId,identityLinkType);
          }
        }
 else         if (value instanceof Collection) {
          Iterator userIdSet=((Collection)value).iterator();
          while (userIdSet.hasNext()) {
            task.addUserIdentityLink((String)userIdSet.next(),identityLinkType);
          }
        }
 else {
          throw new ActivitiException("Expression did not resolve to a string or collection of strings");
        }
      }
    }
  }
  if (!taskDefinition.getCustomGroupIdentityLinkExpressions().isEmpty()) {
    Map<String,Set<Expression>> identityLinks=taskDefinition.getCustomGroupIdentityLinkExpressions();
    for (    String identityLinkType : identityLinks.keySet()) {
      for (      Expression idExpression : identityLinks.get(identityLinkType)) {
        Object value=idExpression.getValue(execution);
        if (value instanceof String) {
          List<String> groupIds=extractCandidates((String)value);
          for (          String groupId : groupIds) {
            task.addGroupIdentityLink(groupId,identityLinkType);
          }
        }
 else         if (value instanceof Collection) {
          Iterator groupIdSet=((Collection)value).iterator();
          while (groupIdSet.hasNext()) {
            task.addGroupIdentityLink((String)groupIdSet.next(),identityLinkType);
          }
        }
 else {
          throw new ActivitiException("Expression did not resolve to a string or collection of strings");
        }
      }
    }
  }
}
