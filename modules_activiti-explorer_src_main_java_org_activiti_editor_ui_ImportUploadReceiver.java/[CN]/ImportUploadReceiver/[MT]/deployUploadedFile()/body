{
  try {
    try {
      if (fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".bpmn")) {
        validFile=true;
        BpmnXMLConverter xmlConverter=new BpmnXMLConverter();
        XMLInputFactory xif=XMLInputFactory.newInstance();
        InputStreamReader in=new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()),"UTF-8");
        XMLStreamReader xtr=xif.createXMLStreamReader(in);
        BpmnModel bpmnModel=new BpmnXMLConverter().convertToBpmnModel(xtr);
        xmlConverter.convertToBpmnModel(xtr);
        if (bpmnModel.getMainProcess() == null || bpmnModel.getMainProcess().getId() == null) {
          notificationManager.showErrorNotification(Messages.MODEL_IMPORT_FAILED,i18nManager.getMessage(Messages.MODEL_IMPORT_INVALID_BPMN_EXPLANATION));
        }
 else {
          if (bpmnModel.getLocationMap().size() == 0) {
            notificationManager.showErrorNotification(Messages.MODEL_IMPORT_INVALID_BPMNDI,i18nManager.getMessage(Messages.MODEL_IMPORT_INVALID_BPMNDI_EXPLANATION));
          }
 else {
            String processName=null;
            if (StringUtils.isNotEmpty(bpmnModel.getMainProcess().getName())) {
              processName=bpmnModel.getMainProcess().getName();
            }
 else {
              processName=bpmnModel.getMainProcess().getId();
            }
            modelData=repositoryService.newModel();
            ObjectNode modelObjectNode=new ObjectMapper().createObjectNode();
            modelObjectNode.put(MODEL_NAME,processName);
            modelObjectNode.put(MODEL_REVISION,1);
            modelData.setMetaInfo(modelObjectNode.toString());
            modelData.setName(processName);
            repositoryService.saveModel(modelData);
            BpmnJsonConverter jsonConverter=new BpmnJsonConverter();
            ObjectNode editorNode=jsonConverter.convertToJson(bpmnModel);
            repositoryService.addModelEditorSource(modelData.getId(),editorNode.toString().getBytes("utf-8"));
          }
        }
      }
 else {
        notificationManager.showErrorNotification(Messages.MODEL_IMPORT_INVALID_FILE,i18nManager.getMessage(Messages.MODEL_IMPORT_INVALID_FILE_EXPLANATION));
      }
    }
 catch (    Exception e) {
      String errorMsg=e.getMessage().replace(System.getProperty("line.separator"),"<br/>");
      notificationManager.showErrorNotification(Messages.MODEL_IMPORT_FAILED,errorMsg);
    }
  }
  finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        notificationManager.showErrorNotification("Server-side error",e.getMessage());
      }
    }
  }
}
