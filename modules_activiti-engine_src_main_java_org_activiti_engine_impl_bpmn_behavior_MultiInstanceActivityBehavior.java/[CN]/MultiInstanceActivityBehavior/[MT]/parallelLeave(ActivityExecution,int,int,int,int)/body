{
  nrOfCompletedInstances++;
  nrOfActiveInstances--;
  if (isExtraScopeNeeded()) {
    ExecutionEntity temp=(ExecutionEntity)execution;
    execution=execution.getParent();
    temp.remove();
  }
  setLoopVariable(execution.getParent(),NUMBER_OF_COMPLETED_INSTANCES,nrOfCompletedInstances);
  setLoopVariable(execution.getParent(),NUMBER_OF_ACTIVE_INSTANCES,nrOfActiveInstances);
  logLoopDetails(execution,"instance completed",loopCounter,nrOfCompletedInstances,nrOfActiveInstances,nrOfInstances);
  execution.inactivate();
  ((ExecutionEntity)execution.getParent()).forceUpdate();
  List<ActivityExecution> joinedExecutions=execution.findInactiveConcurrentExecutions(execution.getActivity());
  if (joinedExecutions.size() == nrOfInstances || completionConditionSatisfied(execution)) {
    List<ExecutionEntity> executionsToRemove=new ArrayList<ExecutionEntity>();
    for (    ActivityExecution childExecution : execution.getParent().getExecutions()) {
      if (childExecution.isActive()) {
        executionsToRemove.add((ExecutionEntity)childExecution);
      }
    }
    for (    ExecutionEntity executionToRemove : executionsToRemove) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("Execution " + executionToRemove + " still active, "+ "but multi-instance is completed. Removing this execution.");
      }
      executionToRemove.inactivate();
      executionToRemove.deleteCascade("multi-instance completed");
    }
    execution.takeAll(execution.getActivity().getOutgoingTransitions(),joinedExecutions);
  }
}
