{
  int loopCounter=getLoopVariable(execution,LOOP_COUNTER);
  if (isSequential) {
    int numberOfInstances=getLoopVariable(execution,NUMBER_OF_INSTANCES);
    int numberOfCompletedInstances=getLoopVariable(execution,NUMBER_OF_COMPLETED_INSTANCES);
    if (loopCounter == numberOfInstances - 1) {
      super.leave(execution);
    }
 else {
      setLoopVariable(execution,LOOP_COUNTER,loopCounter + 1);
      setLoopVariable(execution,NUMBER_OF_COMPLETED_INSTANCES,numberOfCompletedInstances + 1);
      try {
        activityBehavior.execute(execution);
      }
 catch (      Exception e) {
        throw new ActivitiException("Could not execute inner activity behavior of multi instance behavior",e);
      }
    }
  }
 else {
    int numberOfInstances=getLoopVariable(execution,NUMBER_OF_INSTANCES);
    int numberOfCompletedInstances=getLoopVariable(execution,NUMBER_OF_COMPLETED_INSTANCES);
    execution.inactivate();
    ((ExecutionEntity)execution.getParent()).forceUpdate();
    List<ActivityExecution> joinedExecutions=execution.findInactiveConcurrentExecutions(execution.getActivity());
    if (joinedExecutions.size() == numberOfInstances) {
      execution.takeAll(execution.getActivity().getOutgoingTransitions(),joinedExecutions);
    }
 else {
      setLoopVariable(execution.getParent(),NUMBER_OF_COMPLETED_INSTANCES,numberOfCompletedInstances++);
    }
  }
}
