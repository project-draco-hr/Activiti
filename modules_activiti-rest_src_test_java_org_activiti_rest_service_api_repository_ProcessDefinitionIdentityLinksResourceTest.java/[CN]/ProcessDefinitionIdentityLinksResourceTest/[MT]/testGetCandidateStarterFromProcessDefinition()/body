{
  ProcessDefinition processDefinition=repositoryService.createProcessDefinitionQuery().singleResult();
  repositoryService.addCandidateStarterGroup(processDefinition.getId(),"admin");
  repositoryService.addCandidateStarterUser(processDefinition.getId(),"kermit");
  HttpGet httpGet=new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"users","kermit"));
  CloseableHttpResponse response=executeRequest(httpGet,HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals("kermit",responseNode.get("user").textValue());
  assertEquals("candidate",responseNode.get("type").textValue());
  assertTrue(responseNode.get("group").isNull());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"users","kermit")));
  httpGet=new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"groups","admin"));
  response=executeRequest(httpGet,HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals("admin",responseNode.get("group").textValue());
  assertEquals("candidate",responseNode.get("type").textValue());
  assertTrue(responseNode.get("user").isNull());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"groups","admin")));
}
