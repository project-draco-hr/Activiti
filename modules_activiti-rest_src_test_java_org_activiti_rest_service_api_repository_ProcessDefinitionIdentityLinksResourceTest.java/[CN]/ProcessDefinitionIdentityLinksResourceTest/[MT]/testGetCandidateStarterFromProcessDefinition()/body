{
  ProcessDefinition processDefinition=repositoryService.createProcessDefinitionQuery().singleResult();
  repositoryService.addCandidateStarterGroup(processDefinition.getId(),"admin");
  repositoryService.addCandidateStarterUser(processDefinition.getId(),"kermit");
  ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"users","kermit"));
  Representation response=client.get();
  assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
  JsonNode responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals("kermit",responseNode.get("user").textValue());
  assertEquals("candidate",responseNode.get("type").textValue());
  assertTrue(responseNode.get("group").isNull());
  assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,encode(processDefinition.getId()),"users","kermit")));
  client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,processDefinition.getId(),"groups","admin"));
  response=client.get();
  assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
  responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals("admin",responseNode.get("group").textValue());
  assertEquals("candidate",responseNode.get("type").textValue());
  assertTrue(responseNode.get("user").isNull());
  assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION_IDENTITYLINK,encode(processDefinition.getId()),"groups","admin")));
}
