{
  if (log.isDebugEnabled()) {
    log.debug("Leaving activity '{}'",execution.getActivity().getId());
  }
  String defaultSequenceFlow=(String)execution.getActivity().getProperty("default");
  List<PvmTransition> transitionsToTake=new ArrayList<PvmTransition>();
  List<PvmTransition> outgoingTransitions=execution.getActivity().getOutgoingTransitions();
  for (  PvmTransition outgoingTransition : outgoingTransitions) {
    Expression skipExpression=outgoingTransition.getSkipExpression();
    if (!SkipExpressionUtil.isSkipExpressionEnabled(execution,skipExpression)) {
      if (defaultSequenceFlow == null || !outgoingTransition.getId().equals(defaultSequenceFlow)) {
        Condition condition=(Condition)outgoingTransition.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
        if (condition == null || !checkConditions || condition.evaluate(execution)) {
          transitionsToTake.add(outgoingTransition);
        }
      }
    }
 else     if (SkipExpressionUtil.skipFlowElement(execution,skipExpression)) {
      transitionsToTake.add(outgoingTransition);
    }
  }
  if (transitionsToTake.size() == 1) {
    execution.take(transitionsToTake.get(0));
  }
 else   if (transitionsToTake.size() >= 1) {
    execution.inactivate();
    if (reusableExecutions == null || reusableExecutions.isEmpty()) {
      execution.takeAll(transitionsToTake,Arrays.asList(execution));
    }
 else {
      execution.takeAll(transitionsToTake,reusableExecutions);
    }
  }
 else {
    if (defaultSequenceFlow != null) {
      PvmTransition defaultTransition=execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
      if (defaultTransition != null) {
        execution.take(defaultTransition);
      }
 else {
        throw new ActivitiException("Default sequence flow '" + defaultSequenceFlow + "' could not be not found");
      }
    }
 else {
      Object isForCompensation=execution.getActivity().getProperty(BpmnParse.PROPERTYNAME_IS_FOR_COMPENSATION);
      if (isForCompensation != null && (Boolean)isForCompensation) {
        InterpretableExecution parentExecution=(InterpretableExecution)execution.getParent();
        ((InterpretableExecution)execution).remove();
        parentExecution.signal("compensationDone",null);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug("No outgoing sequence flow found for {}. Ending execution.",execution.getActivity().getId());
        }
        execution.end();
        if (throwExceptionIfExecutionStuck) {
          throw new ActivitiException("No outgoing sequence flow of the inclusive gateway '" + execution.getActivity().getId() + "' could be selected for continuing the process");
        }
      }
    }
  }
}
