{
  int start=0;
  List<JobEntity> jobs=fetchJobs(start);
  boolean refetchJobs=false;
  while (!jobs.isEmpty()) {
    int newJobCount=0;
    for (    JobEntity job : jobs) {
      try {
        if (!jobExecutor.isJobScheduledForExecution(job)) {
          jobExecutor.jobScheduledForExecution(job);
          jobExecutor.getThreadPoolExecutor().execute(new ExecuteJobsRunnable(jobExecutor,job));
          newJobCount++;
        }
      }
 catch (      RejectedExecutionException e) {
        jobExecutor.getRejectedJobsHandler().jobsRejected(jobExecutor,Arrays.asList(job.getId()));
      }
    }
    if (newJobCount == 0 && refetchJobs) {
      break;
    }
    start+=jobExecutor.getJobFetchBatchSize();
    jobs=fetchJobs(start);
    if (jobs.isEmpty()) {
      start=0;
      jobs=fetchJobs(start);
      refetchJobs=true;
    }
  }
}
