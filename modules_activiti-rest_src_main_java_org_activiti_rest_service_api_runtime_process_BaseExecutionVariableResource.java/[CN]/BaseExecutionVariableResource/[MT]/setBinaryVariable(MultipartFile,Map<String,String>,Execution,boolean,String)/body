{
  try {
    String variableScope=null;
    String variableName=null;
    String variableType=null;
    if (requestParams.containsKey("scope")) {
      variableScope=requestParams.get("scope");
    }
 else     if (requestParams.containsKey("name")) {
      variableName=requestParams.get("name");
    }
 else     if (requestParams.containsKey("type")) {
      variableType=requestParams.get("type");
    }
    if (file == null) {
      throw new ActivitiIllegalArgumentException("No file content was found in request body.");
    }
    if (variableName == null) {
      throw new ActivitiIllegalArgumentException("No variable name was found in request body.");
    }
    if (variableType != null) {
      if (!RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE.equals(variableType) && !RestResponseFactory.SERIALIZABLE_VARIABLE_TYPE.equals(variableType)) {
        throw new ActivitiIllegalArgumentException("Only 'binary' and 'serializable' are supported as variable type.");
      }
    }
 else {
      variableType=RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE;
    }
    RestVariableScope scope=RestVariableScope.LOCAL;
    if (variableScope != null) {
      scope=RestVariable.getScopeFromString(variableScope);
    }
    if (variableType.equals(RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE)) {
      ByteArrayOutputStream variableOutput=new ByteArrayOutputStream(((Long)file.getSize()).intValue());
      IOUtils.copy(file.getInputStream(),variableOutput);
      setVariable(execution,variableName,variableOutput.toByteArray(),scope,isNew);
    }
 else {
      ObjectInputStream stream=new ObjectInputStream(file.getInputStream());
      Object value=stream.readObject();
      setVariable(execution,variableName,value,scope,isNew);
      stream.close();
    }
    if (execution instanceof ProcessInstance && allowProcessInstanceUrl()) {
      return restResponseFactory.createBinaryRestVariable(variableName,scope,variableType,null,null,execution.getId(),serverRootUrl);
    }
 else {
      return restResponseFactory.createBinaryRestVariable(variableName,scope,variableType,null,execution.getId(),null,serverRootUrl);
    }
  }
 catch (  IOException ioe) {
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ioe);
  }
catch (  ClassNotFoundException ioe) {
    throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE.getCode(),"The provided body contains a serialized object for which the class is nog found: " + ioe.getMessage(),null,null);
  }
}
