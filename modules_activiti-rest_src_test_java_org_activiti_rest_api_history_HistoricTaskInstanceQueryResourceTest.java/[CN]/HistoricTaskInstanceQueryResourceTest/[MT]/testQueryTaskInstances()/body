{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess","myBusinessKey",processVariables);
  ClockUtil.setCurrentTime(new GregorianCalendar(2013,0,1).getTime());
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  Task finishedTaskProcess1=task;
  taskService.complete(task.getId());
  ClockUtil.setCurrentTime(null);
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"local","test");
  taskService.setOwner(task.getId(),"test");
  taskService.setDueDate(task.getId(),new GregorianCalendar(2013,0,1).getTime());
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task task2=taskService.createTaskQuery().processInstanceId(processInstance2.getId()).singleResult();
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_TASK_INSTANCE_QUERY);
  ObjectNode requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("processVariables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","intVar");
  variableNode.put("value",67891);
  variableNode.put("operation","lessThan");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","lessThan");
  assertResultsPresentInDataResponse(url,requestNode);
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","lessThanOrEquals");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","intVar");
  variableNode.put("value",67889);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","greaterThan");
  assertResultsPresentInDataResponse(url,requestNode);
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","greaterThanOrEquals");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","stringVar");
  variableNode.put("value","Azer%");
  variableNode.put("operation","like");
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  variableNode.put("name","local");
  variableNode.put("value","test");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  variableArray=objectMapper.createArrayNode();
  variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("taskVariables",variableArray);
  variableNode.put("name","local");
  variableNode.put("value","test");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  assertResultsPresentInDataResponse(url,requestNode,3,task.getId(),task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processInstanceId",processInstance.getId());
  assertResultsPresentInDataResponse(url,requestNode,2,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processInstanceId",processInstance2.getId());
  assertResultsPresentInDataResponse(url,requestNode,1,task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskAssignee","kermit");
  assertResultsPresentInDataResponse(url,requestNode,2,task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskAssigneeLike","%mit");
  assertResultsPresentInDataResponse(url,requestNode,2,task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskAssignee","fozzie");
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskOwner","test");
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskOwnerLike","t%");
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskInvolvedUser","test");
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("dueDateAfter",dateFormat.format(new GregorianCalendar(2010,0,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("dueDateAfter",dateFormat.format(new GregorianCalendar(2013,4,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("dueDateBefore",dateFormat.format(new GregorianCalendar(2010,0,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("dueDateBefore",dateFormat.format(new GregorianCalendar(2013,4,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,1,task.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskCompletedAfter",dateFormat.format(new GregorianCalendar(2010,0,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,1,finishedTaskProcess1.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskCompletedAfter",dateFormat.format(new GregorianCalendar(2013,4,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskCompletedBefore",dateFormat.format(new GregorianCalendar(2010,0,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskCompletedAfter",dateFormat.format(new GregorianCalendar(2010,3,1).getTime()));
  assertResultsPresentInDataResponse(url,requestNode,1,finishedTaskProcess1.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processBusinessKey","myBusinessKey");
  assertResultsPresentInDataResponse(url,requestNode,2,task.getId(),finishedTaskProcess1.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processBusinessKeyLike","myBusiness%");
  assertResultsPresentInDataResponse(url,requestNode,2,task.getId(),finishedTaskProcess1.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","someTaskProcess");
  assertResultsPresentInDataResponse(url,requestNode,0);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","oneTaskProcess");
  assertResultsPresentInDataResponse(url,requestNode,task.getId(),finishedTaskProcess1.getId(),task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKeyLike","oneTask%");
  assertResultsPresentInDataResponse(url,requestNode,task.getId(),finishedTaskProcess1.getId(),task2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKeyLike","some%");
  assertResultsPresentInDataResponse(url,requestNode);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskDefinitionKey","processTask");
  assertResultsPresentInDataResponse(url,requestNode,finishedTaskProcess1.getId(),task2.getId());
}
