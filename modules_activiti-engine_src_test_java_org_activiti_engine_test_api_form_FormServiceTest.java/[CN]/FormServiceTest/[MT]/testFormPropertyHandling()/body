{
  Map<String,String> properties=new HashMap<String,String>();
  properties.put("room","5b");
  properties.put("speaker","Mike");
  properties.put("duration","45");
  properties.put("free","true");
  properties.put("double","45.5");
  String procDefId=repositoryService.createProcessDefinitionQuery().singleResult().getId();
  String processInstanceId=formService.submitStartFormData(procDefId,properties).getId();
  Map<String,Object> expectedVariables=new HashMap<String,Object>();
  expectedVariables.put("room","5b");
  expectedVariables.put("SpeakerName","Mike");
  expectedVariables.put("duration",45l);
  expectedVariables.put("free",Boolean.TRUE);
  expectedVariables.put("double",45.5d);
  Map<String,Object> variables=runtimeService.getVariables(processInstanceId);
  assertEquals(expectedVariables,variables);
  Address address=new Address();
  address.setStreet("broadway");
  runtimeService.setVariable(processInstanceId,"address",address);
  runtimeService.signal(runtimeService.createExecutionQuery().processInstanceId(processInstanceId).singleResult().getId());
  String taskId=taskService.createTaskQuery().singleResult().getId();
  TaskFormData taskFormData=formService.getTaskFormData(taskId);
  List<FormProperty> formProperties=taskFormData.getFormProperties();
  FormProperty propertyRoom=formProperties.get(0);
  assertEquals("room",propertyRoom.getId());
  assertEquals("5b",propertyRoom.getValue());
  FormProperty propertyDuration=formProperties.get(1);
  assertEquals("duration",propertyDuration.getId());
  assertEquals("45",propertyDuration.getValue());
  FormProperty propertySpeaker=formProperties.get(2);
  assertEquals("speaker",propertySpeaker.getId());
  assertEquals("Mike",propertySpeaker.getValue());
  FormProperty propertyStreet=formProperties.get(3);
  assertEquals("street",propertyStreet.getId());
  assertEquals("broadway",propertyStreet.getValue());
  FormProperty propertyFree=formProperties.get(4);
  assertEquals("free",propertyFree.getId());
  assertEquals("true",propertyFree.getValue());
  FormProperty propertyDouble=formProperties.get(5);
  assertEquals("double",propertyDouble.getId());
  assertEquals("45.5",propertyDouble.getValue());
  assertEquals(6,formProperties.size());
  try {
    formService.submitTaskFormData(taskId,new HashMap<String,String>());
    fail("expected exception about required form property 'street'");
  }
 catch (  ActivitiException e) {
  }
  try {
    properties=new HashMap<String,String>();
    properties.put("speaker","its not allowed to update speaker!");
    formService.submitTaskFormData(taskId,properties);
    fail("expected exception about a non writable form property 'speaker'");
  }
 catch (  ActivitiException e) {
  }
  properties=new HashMap<String,String>();
  properties.put("street","rubensstraat");
  formService.submitTaskFormData(taskId,properties);
  expectedVariables=new HashMap<String,Object>();
  expectedVariables.put("room","5b");
  expectedVariables.put("SpeakerName","Mike");
  expectedVariables.put("duration",45l);
  expectedVariables.put("free",Boolean.TRUE);
  expectedVariables.put("double",45.5d);
  variables=runtimeService.getVariables(processInstanceId);
  address=(Address)variables.remove("address");
  assertEquals("rubensstraat",address.getStreet());
  assertEquals(expectedVariables,variables);
}
