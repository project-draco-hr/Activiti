{
  assertEquals(6l,parseNode("${4+2}").eval(bindings,null));
  assertEquals(8l,parseNode("${4*2}").eval(bindings,null));
  assertEquals(2d,parseNode("${4/2}").eval(bindings,null));
  assertEquals(0l,parseNode("${4%2}").eval(bindings,null));
  assertEquals(false,parseNode("${true && false}").eval(bindings,null));
  assertEquals(true,parseNode("${true || false}").eval(bindings,null));
  assertEquals(true,parseNode("${1 == 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 == 2}").eval(bindings,null));
  assertEquals(false,parseNode("${2 == 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 != 1}").eval(bindings,null));
  assertEquals(true,parseNode("${1 != 2}").eval(bindings,null));
  assertEquals(false,parseNode("${2 == 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 < 1}").eval(bindings,null));
  assertEquals(true,parseNode("${1 < 2}").eval(bindings,null));
  assertEquals(false,parseNode("${2 < 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 > 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 > 2}").eval(bindings,null));
  assertEquals(true,parseNode("${2 > 1}").eval(bindings,null));
  assertEquals(true,parseNode("${1 <= 1}").eval(bindings,null));
  assertEquals(true,parseNode("${1 <= 2}").eval(bindings,null));
  assertEquals(false,parseNode("${2 <= 1}").eval(bindings,null));
  assertEquals(true,parseNode("${1 >= 1}").eval(bindings,null));
  assertEquals(false,parseNode("${1 >= 2}").eval(bindings,null));
  assertEquals(true,parseNode("${2 >= 1}").eval(bindings,null));
}
