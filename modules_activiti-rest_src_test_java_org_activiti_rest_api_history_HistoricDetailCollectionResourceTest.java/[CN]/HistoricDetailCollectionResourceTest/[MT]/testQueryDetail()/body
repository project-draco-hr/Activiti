{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  processVariables.put("byteVar","test".getBytes());
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task.getId());
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"taskVariable","test");
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_DETAIL);
  assertResultsPresentInDataResponse(url + "?processInstanceId=" + processInstance.getId(),5,"stringVar","Azerty");
  assertResultsPresentInDataResponse(url + "?taskId=" + task.getId(),1,"taskVariable","test");
  assertResultsPresentInDataResponse(url + "?processInstanceId=" + processInstance2.getId(),4,"intVar",67890);
  assertResultsPresentInDataResponse(url + "?processInstanceId=" + processInstance2.getId()+ "&selectOnlyVariableUpdates=true",4,"booleanVar",false);
  ClientResource client=getAuthenticatedClient(url + "?processInstanceId=" + processInstance2.getId());
  Representation response=client.get();
  assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
  JsonNode dataNode=objectMapper.readTree(response.getStream()).get("data");
  boolean byteVarFound=false;
  Iterator<JsonNode> it=dataNode.iterator();
  while (it.hasNext()) {
    JsonNode variableNode=it.next().get("variable");
    String name=variableNode.get("name").textValue();
    if ("byteVar".equals(name)) {
      byteVarFound=true;
      String valueUrl=variableNode.get("valueUrl").textValue();
      client.release();
      client=new ClientResource(valueUrl);
      client.setChallengeResponse(ChallengeScheme.HTTP_BASIC,"kermit","kermit");
      response=client.get();
      assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
      byte[] varInput=IOUtils.toByteArray(response.getStream());
      assertEquals("test",new String(varInput));
      break;
    }
  }
  assertTrue(byteVarFound);
}
