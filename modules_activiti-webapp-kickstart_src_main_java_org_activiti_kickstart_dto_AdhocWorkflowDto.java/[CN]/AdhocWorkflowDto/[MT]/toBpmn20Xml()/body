{
  if (definitions != null) {
    return definitions;
  }
  definitions=new Definitions();
  definitions.setTargetNamespace("adhoc");
  String processName=getName().replace(" ","_");
  org.activiti.kickstart.bpmn20.model.Process process=new org.activiti.kickstart.bpmn20.model.Process();
  process.setId("adhoc_" + processName);
  process.setName(getName());
  Documentation processDocumentation=new Documentation();
  processDocumentation.setId(process.getId() + "_documentation");
  processDocumentation.setText(getDescription());
  process.getDocumentation().add(processDocumentation);
  definitions.getRootElement().add(process);
  BPMNDiagram diagram=new BPMNDiagram();
  diagram.setId(processName + "_diagram");
  definitions.getDiagram().add(diagram);
  BPMNPlane plane=new BPMNPlane();
  plane.setId(processName + "_plane");
  plane.setBpmnElement(process);
  diagram.setBPMNPlane(plane);
  StartEvent startEvent=new StartEvent();
  startEvent.setId(START_NAME);
  startEvent.setInitiator("initiator");
  process.getFlowElement().add(startEvent);
  List<List<UserTask>> UserTaskBlocks=new ArrayList<List<UserTask>>();
  int index=1;
  List<TaskBlock> taskBlocks=getTaskBlocks();
  for (  TaskBlock taskBlock : taskBlocks) {
    List<UserTask> UserTaskBlock=new ArrayList<UserTask>();
    UserTaskBlocks.add(UserTaskBlock);
    for (    TaskDto task : taskBlock.getTasks()) {
      UserTask userTask=new UserTask();
      userTask.setId("task_" + index++);
      userTask.setName(task.getName());
      if (task.getForm() != null) {
        userTask.setFormKey(task.generateDefaultFormName());
      }
      if (task.getAssignee() != null && !"".equals(task.getAssignee())) {
        HumanPerformer humanPerformer=new HumanPerformer();
        humanPerformer.setId(userTask.getId() + "_humanPerformer");
        ResourceAssignmentExpression assignmentExpression=new ResourceAssignmentExpression();
        assignmentExpression.setId(userTask.getId() + "_humanPerformer_assignmentExpression");
        FormalExpression formalExpression=new FormalExpression(task.getAssignee());
        formalExpression.setId(userTask.getId() + "_humanPerformer_formalExpressions");
        assignmentExpression.setExpression(formalExpression);
        humanPerformer.setResourceAssignmentExpression(assignmentExpression);
        userTask.getActivityResource().add(humanPerformer);
      }
      if (task.getGroups() != null && !"".equals(task.getGroups())) {
        PotentialOwner potentialOwner=new PotentialOwner();
        potentialOwner.setId(userTask.getId() + "_potentialOwner");
        ResourceAssignmentExpression assignmentExpression=new ResourceAssignmentExpression();
        assignmentExpression.setId(userTask.getId() + "_potentialOwner_assignmentExpression");
        StringBuilder groups=new StringBuilder();
        for (        String group : task.getGroups().split(",")) {
          groups.append(group + ",");
        }
        groups.deleteCharAt(groups.length() - 1);
        FormalExpression formalExpression=new FormalExpression(groups.toString());
        formalExpression.setId(userTask.getId() + "_potentialOwner_formalExpressions");
        assignmentExpression.setExpression(formalExpression);
        potentialOwner.setResourceAssignmentExpression(assignmentExpression);
        userTask.getActivityResource().add(potentialOwner);
      }
      Documentation taskDocumentation=new Documentation(ExpressionUtil.replaceWhiteSpaces(task.getDescription()));
      taskDocumentation.setId(userTask.getId() + "_documentation");
      userTask.getDocumentation().add(taskDocumentation);
      UserTaskBlock.add(userTask);
    }
  }
  AtomicInteger flowIndex=new AtomicInteger(1);
  AtomicInteger gatewayIndex=new AtomicInteger(1);
  List<FlowElement> lastFlowElementOfBlockStack=new ArrayList<FlowElement>();
  lastFlowElementOfBlockStack.add(startEvent);
  for (int i=0; i < taskBlocks.size(); i++) {
    convertTaskBlockToBpmn20(process,flowIndex,gatewayIndex,UserTaskBlocks.get(i),lastFlowElementOfBlockStack);
  }
  EndEvent endEvent=new EndEvent();
  endEvent.setId(END_NAME);
  process.getFlowElement().add(endEvent);
  createSequenceFlow(process,flowIndex,getLast(lastFlowElementOfBlockStack),endEvent);
  return definitions;
}
