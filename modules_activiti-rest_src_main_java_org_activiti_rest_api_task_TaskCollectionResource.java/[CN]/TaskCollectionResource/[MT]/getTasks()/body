{
  TaskQuery taskQuery=ActivitiUtil.getTaskService().createTaskQuery();
  Form query=getQuery();
  if (query.getNames().contains("name")) {
    taskQuery.taskName(getQueryParameter("name",query));
  }
  if (query.getNames().contains("nameLike")) {
    taskQuery.taskNameLike(getQueryParameter("nameLike",query));
  }
  if (query.getNames().contains("description")) {
    taskQuery.taskDescription(getQueryParameter("description",query));
  }
  if (query.getNames().contains("descriptionLike")) {
    taskQuery.taskDescriptionLike(getQueryParameter("descriptionLike",query));
  }
  if (query.getNames().contains("priority")) {
    taskQuery.taskPriority(getQueryParameterAsInt("priority",query));
  }
  if (query.getNames().contains("minimumPriority")) {
    taskQuery.taskMinPriority(getQueryParameterAsInt("minimumPriority",query));
  }
  if (query.getNames().contains("maximumPriority")) {
    taskQuery.taskMaxPriority(getQueryParameterAsInt("maximumPriority",query));
  }
  if (query.getNames().contains("assignee")) {
    taskQuery.taskAssignee(getQueryParameter("assignee",query));
  }
  if (query.getNames().contains("owner")) {
    taskQuery.taskOwner(getQueryParameter("owner",query));
  }
  if (query.getNames().contains("unassigned")) {
    Boolean unassigned=getQueryParameterAsBoolean("unassigned",query);
    if (unassigned != null && unassigned) {
      taskQuery.taskUnassigned();
    }
  }
  if (query.getNames().contains("delegationState")) {
    String delegationStateString=getQueryParameter("delegationState",query);
    DelegationState state=getDelegationState(delegationStateString);
    if (state != null) {
      taskQuery.taskDelegationState(state);
    }
  }
  if (query.getNames().contains("candidateUser")) {
    taskQuery.taskCandidateUser(getQueryParameter("candidateUser",query));
  }
  if (query.getNames().contains("involvedUser")) {
    taskQuery.taskInvolvedUser(getQueryParameter("involvedUser",query));
  }
  if (query.getNames().contains("candidateGroup")) {
    taskQuery.taskCandidateGroup(getQueryParameter("candidateGroup",query));
  }
  if (query.getNames().contains("processInstanceId")) {
    taskQuery.processInstanceId(getQueryParameter("processInstanceId",query));
  }
  if (query.getNames().contains("processInstanceBusinessKey")) {
    taskQuery.processInstanceBusinessKey(getQueryParameter("processInstanceBusinessKey",query));
  }
  if (query.getNames().contains("executionId")) {
    taskQuery.executionId(getQueryParameter("executionId",query));
  }
  if (query.getNames().contains("createdOn")) {
    taskQuery.taskCreatedOn(getQueryParameterAsDate("createdOn",query));
  }
  if (query.getNames().contains("createdBefore")) {
    taskQuery.taskCreatedBefore(getQueryParameterAsDate("createdBefore",query));
  }
  if (query.getNames().contains("createdAfter")) {
    taskQuery.taskCreatedAfter(getQueryParameterAsDate("createdAfter",query));
  }
  if (query.getNames().contains("excludeSubTasks")) {
    Boolean excludeSubTasks=getQueryParameterAsBoolean("excludeSubTasks",query);
    if (excludeSubTasks != null && excludeSubTasks) {
      taskQuery.excludeSubtasks();
    }
  }
  if (query.getNames().contains("taskDefinitionKey")) {
    taskQuery.taskDefinitionKey(getQueryParameter("taskDefinitionKey",query));
  }
  if (query.getNames().contains("taskDefinitionKeyLike")) {
    taskQuery.taskDefinitionKeyLike(getQueryParameter("taskDefinitionKeyLike",query));
  }
  if (query.getNames().contains("dueDate")) {
    taskQuery.dueDate(getQueryParameterAsDate("dueDate",query));
  }
  if (query.getNames().contains("dueBefore")) {
    taskQuery.dueBefore(getQueryParameterAsDate("dueBefore",query));
  }
  if (query.getNames().contains("dueAfter")) {
    taskQuery.dueAfter(getQueryParameterAsDate("dueAfter",query));
  }
  if (query.getNames().contains("active")) {
    Boolean active=getQueryParameterAsBoolean("active",query);
    if (active != null) {
      if (active) {
        taskQuery.active();
      }
 else {
        taskQuery.suspended();
      }
    }
  }
  return new TaskPaginateList(this).paginateList(query,taskQuery,"id",properties);
}
