{
  if (itemInfo == null || !(itemInfo instanceof FolderInfo)) {
    throw new IllegalArgumentException("No valid target folder chosen.");
  }
  String replacement=(String)param.get("input");
  FolderInfo targetFolder=(FolderInfo)itemInfo;
  RepositoryConnector svnconnector=targetFolder.getConnector();
  log.info("TargetFolder-Name: " + targetFolder.getName() + " - Path: "+ targetFolder.getPath());
  FileInfo srcFile=getFile();
  log.info("srcFile - Name:" + srcFile.getName() + " - Path:"+ srcFile.getPath());
  File file=new File(PATH_TO_JBPM_PROJECT_ZIP);
  FileInputStream fin=null;
  ZipInputStream zin=null;
  try {
    fin=new FileInputStream(file);
    zin=new ZipInputStream(fin);
    ZipEntry zipEntry=null;
    FolderInfo prevSubFolder=null;
    String prevFolderPath=null;
    while ((zipEntry=zin.getNextEntry()) != null) {
      String entryName=zipEntry.getName();
      String zipEntryPath="";
      String zipEntryFileName=entryName;
      if (entryName.lastIndexOf("/") > -1) {
        zipEntryPath=entryName.substring(0,entryName.lastIndexOf("/"));
        zipEntryFileName=entryName.substring(entryName.lastIndexOf("/") + 1);
      }
      if (zipEntry.isDirectory()) {
        FolderInfo subFolder=new FolderInfo(svnconnector);
        subFolder.setName(zipEntryPath);
        subFolder.setPath(targetFolder.getPath() + "/" + zipEntryPath);
        targetFolder.createFolder(subFolder);
        prevSubFolder=subFolder;
        prevFolderPath=zipEntryPath;
        log.info("Created folder: " + subFolder.getName() + " on "+ targetFolder.getName()+ " with path "+ subFolder.getPath());
      }
 else {
        FolderInfo fileParentFolder=null;
        FileInfo destFile=new FileInfo(svnconnector);
        if ("template.xml".equals(zipEntryFileName)) {
          SignavioConnector signavioConnector=(SignavioConnector)srcFile.getConnector();
          String jpdl4Representation=signavioConnector.getModelAsJpdl4Representation(srcFile);
          destFile.setName(srcFile.getName() + ".jpdl.xml");
          destFile.setTextContent(jpdl4Representation);
          log.info("destFile is processdefinition from Signavio with name " + destFile.getName());
        }
 else {
          destFile.setName(zipEntryFileName);
          log.info("destFile from ZIP with name " + destFile.getName());
          String textData=new String(IoUtils.readBytes(zin));
          if (replaceList.contains(destFile.getName().toLowerCase()) || replacement.length() == 0 || replacement != null) {
            destFile.setTextContent(textData.replaceAll(REPLACE_STRING,replacement));
          }
 else {
            destFile.setTextContent(textData);
          }
        }
        if (prevSubFolder == null || !prevFolderPath.equals(zipEntryPath)) {
          fileParentFolder=targetFolder;
        }
 else {
          fileParentFolder=prevSubFolder;
        }
        log.info("Create file " + destFile.getName() + " in folder "+ fileParentFolder.getName()+ " (Path = "+ fileParentFolder.getPath()+ ")");
        svnconnector.createNewFile(fileParentFolder,destFile);
      }
      zin.closeEntry();
    }
    log.info("Succesfully created JbpmProject!");
  }
 catch (  FileNotFoundException fnfe) {
    log.log(Level.SEVERE,"FileNotFoundException",fnfe);
  }
catch (  Exception e) {
    log.log(Level.SEVERE,"Error",e);
  }
 finally {
    try {
      if (fin != null) {
        fin.close();
      }
      if (zin != null) {
        zin.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
