{
  execution.inactivate();
  lockConcurrentRoot(execution);
  PvmActivity activity=execution.getActivity();
  if (!activeConcurrentExecutionsExist(execution)) {
    if (log.isDebugEnabled()) {
      log.debug("inclusive gateway '{}' activates",activity.getId());
    }
    List<ActivityExecution> joinedExecutions=execution.findInactiveConcurrentExecutions(activity);
    String defaultSequenceFlow=(String)execution.getActivity().getProperty("default");
    List<PvmTransition> transitionsToTake=new ArrayList<PvmTransition>();
    for (    PvmTransition outgoingTransition : execution.getActivity().getOutgoingTransitions()) {
      if (defaultSequenceFlow == null || !outgoingTransition.getId().equals(defaultSequenceFlow)) {
        Condition condition=(Condition)outgoingTransition.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
        if (condition == null || condition.evaluate(execution)) {
          transitionsToTake.add(outgoingTransition);
        }
      }
    }
    if (!transitionsToTake.isEmpty()) {
      execution.takeAll(transitionsToTake,joinedExecutions);
    }
 else {
      if (defaultSequenceFlow != null) {
        PvmTransition defaultTransition=execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
        if (defaultTransition != null) {
          execution.take(defaultTransition);
        }
 else {
          throw new ActivitiException("Default sequence flow '" + defaultSequenceFlow + "' could not be not found");
        }
      }
 else {
        throw new ActivitiException("No outgoing sequence flow of the inclusive gateway '" + execution.getActivity().getId() + "' could be selected for continuing the process");
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Inclusive gateway '{}' does not activate",activity.getId());
    }
  }
}
