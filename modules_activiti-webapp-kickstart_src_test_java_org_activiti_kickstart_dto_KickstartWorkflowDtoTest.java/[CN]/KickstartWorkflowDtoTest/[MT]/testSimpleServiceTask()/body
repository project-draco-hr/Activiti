{
  KickstartWorkflowDto dto=new KickstartWorkflowDto();
  dto.setName("One Service Task Workflow");
  dto.setDescription("Simple workflow definition containing one service task");
  ServiceTaskDto task=new ServiceTaskDto();
  task.setId("myId");
  task.setName("My First Service task");
  task.setDescription("Desc first Service task");
  task.setDelegateExpression("#{myDelegateExpression}");
  task.setClassName("de.test.MyClass");
  task.setExpression("#{my.favorite.expression}");
  dto.addTask(task);
  Definitions def=dto.toBpmn20Xml();
  BPMNPlane bpmnPlane=def.getDiagram().get(0).getBPMNPlane();
  List<FlowElement> flowElements=((Process)bpmnPlane.getBpmnElement()).getFlowElement();
  assertEquals(5,flowElements.size());
  int numberOfServiceTasks=0;
  ServiceTask serviceTask=null;
  for (  FlowElement flowElement : flowElements) {
    if (flowElement instanceof ServiceTask) {
      numberOfServiceTasks++;
      serviceTask=(ServiceTask)flowElement;
    }
  }
  assertEquals("Should contain exactly one service task",1,numberOfServiceTasks);
  assertEquals("#{myDelegateExpression}",serviceTask.getDelegateExpression());
  assertEquals("de.test.MyClass",serviceTask.getClassName());
  assertEquals("#{my.favorite.expression}",serviceTask.getExpression());
}
