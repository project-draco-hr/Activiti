{
  KickstartWorkflowDto dto=new KickstartWorkflowDto();
  dto.setName("One Service Task Workflow");
  dto.setDescription("Simple workflow definition containing one service task");
  ServiceTaskDto task1=new ServiceTaskDto();
  task1.setId("myFirstId");
  task1.setName("My First Service task");
  task1.setDescription("Desc first Service task");
  task1.setDelegateExpression("#{myFirstDelegateExpression}");
  task1.setClassName("de.test.MyFirstClass");
  task1.setExpression("#{my.favorite.first.expression}");
  dto.addTask(task1);
  ServiceTaskDto task2=new ServiceTaskDto();
  task2.setId("mySecondId");
  task2.setName("My Second Service task");
  task2.setDescription("Desc Second Service task");
  task2.setDelegateExpression("#{mySecondDelegateExpression}");
  task2.setClassName("de.test.MySecondClass");
  task2.setExpression("#{my.favorite.second.expression}");
  task2.setStartWithPrevious(true);
  dto.addTask(task2);
  Definitions def=dto.toBpmn20Xml();
  BPMNPlane bpmnPlane=def.getDiagram().get(0).getBPMNPlane();
  List<FlowElement> flowElements=((Process)bpmnPlane.getBpmnElement()).getFlowElement();
  assertEquals(12,flowElements.size());
  int numberOfServiceTasks=0;
  ServiceTask serviceTask1=null;
  ServiceTask serviceTask2=null;
  for (  FlowElement flowElement : flowElements) {
    if (flowElement instanceof ServiceTask) {
      numberOfServiceTasks++;
      if (serviceTask1 == null) {
        serviceTask1=(ServiceTask)flowElement;
      }
 else       if (serviceTask2 == null) {
        serviceTask2=(ServiceTask)flowElement;
      }
    }
  }
  assertEquals("Should contain exactly one service task",2,numberOfServiceTasks);
  assertEquals("#{myFirstDelegateExpression}",serviceTask1.getDelegateExpression());
  assertEquals("de.test.MyFirstClass",serviceTask1.getClassName());
  assertEquals("#{my.favorite.first.expression}",serviceTask1.getExpression());
  assertEquals("#{mySecondDelegateExpression}",serviceTask2.getDelegateExpression());
  assertEquals("de.test.MySecondClass",serviceTask2.getClassName());
  assertEquals("#{my.favorite.second.expression}",serviceTask2.getExpression());
}
