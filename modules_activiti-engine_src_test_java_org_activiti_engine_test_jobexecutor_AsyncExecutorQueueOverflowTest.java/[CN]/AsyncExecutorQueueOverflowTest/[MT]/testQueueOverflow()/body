{
  ProcessEngine processEngine=initProcessEngineWithJobQueueSize(100);
  Date startDate=new Date(1453273200000L);
  processEngine.getProcessEngineConfiguration().getClock().setCurrentTime(startDate);
  final RepositoryService repositoryService=processEngine.getRepositoryService();
  final RuntimeService runtimeService=processEngine.getRuntimeService();
  final HistoryService historyService=processEngine.getHistoryService();
  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/jobexecutor/AsyncExecutorQueueOverflowTest.bpmn20.xml").deploy();
  int nrOfProcessInstances=300;
  for (int i=0; i < nrOfProcessInstances; i++) {
    runtimeService.startProcessInstanceByKey("testAsyncExecutor");
  }
  Assert.assertEquals(nrOfProcessInstances,runtimeService.createProcessInstanceQuery().count());
  Date mondayMorningDate=new Date(1453280460000L);
  processEngine.getProcessEngineConfiguration().getClock().setCurrentTime(mondayMorningDate);
  boolean allJobsProcessed=false;
  Date waitTimeStartDate=new Date();
  while (!allJobsProcessed) {
    long count=historyService.createHistoricActivityInstanceQuery().activityId("theServiceTask").unfinished().count();
    allJobsProcessed=count == nrOfProcessInstances;
    if (!allJobsProcessed) {
      logger.info("Waiting a bit longer, not all jobs have been finished. Current count = " + count);
      Thread.sleep(1000L);
    }
    if (new Date().getTime() - waitTimeStartDate.getTime() > (5L * 60L * 1000L)) {
      Assert.fail("Wait time for executing jobs expired");
    }
  }
  Assert.assertEquals(nrOfProcessInstances,runtimeService.createProcessInstanceQuery().count());
  Assert.assertEquals(nrOfProcessInstances,historyService.createHistoricActivityInstanceQuery().activityId("theScriptTask").finished().count());
  Assert.assertEquals(nrOfProcessInstances,historyService.createHistoricActivityInstanceQuery().activityId("theServiceTask").unfinished().count());
  processEngine.close();
}
