{
  List<BoundaryEvent> boundaryEvents=process.findFlowElementsOfType(BoundaryEvent.class);
  HashMap<String,Integer> cancelBoundaryEventsCounts=new HashMap<String,Integer>();
  HashMap<String,Integer> compensateBoundaryEventsCounts=new HashMap<String,Integer>();
  for (int i=0; i < boundaryEvents.size(); i++) {
    BoundaryEvent boundaryEvent=boundaryEvents.get(i);
    if (boundaryEvent.getEventDefinitions() != null && boundaryEvent.getEventDefinitions().size() > 0) {
      EventDefinition eventDefinition=boundaryEvent.getEventDefinitions().get(0);
      if (!(eventDefinition instanceof TimerEventDefinition) && !(eventDefinition instanceof ErrorEventDefinition) && !(eventDefinition instanceof SignalEventDefinition)&& !(eventDefinition instanceof CancelEventDefinition)&& !(eventDefinition instanceof MessageEventDefinition)&& !(eventDefinition instanceof CompensateEventDefinition)) {
        addError(errors,Problems.BOUNDARY_EVENT_INVALID_EVENT_DEFINITION,process,boundaryEvent,"Invalid or unsupported event definition");
      }
      if (eventDefinition instanceof CancelEventDefinition) {
        FlowElement attachedToFlowElement=bpmnModel.getFlowElement(boundaryEvent.getAttachedToRefId());
        if (!(attachedToFlowElement instanceof Transaction)) {
          addError(errors,Problems.BOUNDARY_EVENT_CANCEL_ONLY_ON_TRANSACTION,process,boundaryEvent,"boundary event with cancelEventDefinition only supported on transaction subprocesses");
        }
 else {
          if (!cancelBoundaryEventsCounts.containsKey(attachedToFlowElement.getId())) {
            cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(),new Integer(0));
          }
          cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(),new Integer(cancelBoundaryEventsCounts.get(attachedToFlowElement.getId()) + 1));
        }
      }
 else       if (eventDefinition instanceof CompensateEventDefinition) {
        if (!compensateBoundaryEventsCounts.containsKey(boundaryEvent.getAttachedToRefId())) {
          compensateBoundaryEventsCounts.put(boundaryEvent.getAttachedToRefId(),new Integer(0));
        }
        compensateBoundaryEventsCounts.put(boundaryEvent.getAttachedToRefId(),compensateBoundaryEventsCounts.get(boundaryEvent.getAttachedToRefId()) + 1);
      }
 else       if (eventDefinition instanceof MessageEventDefinition) {
        for (int j=0; j < boundaryEvents.size(); j++) {
          if (j != i) {
            BoundaryEvent otherBoundaryEvent=boundaryEvents.get(j);
            if (otherBoundaryEvent.getAttachedToRefId() != null && otherBoundaryEvent.getAttachedToRefId().equals(boundaryEvent.getAttachedToRefId())) {
              if (otherBoundaryEvent.getEventDefinitions() != null && otherBoundaryEvent.getEventDefinitions().size() > 0) {
                EventDefinition otherEventDefinition=otherBoundaryEvent.getEventDefinitions().get(0);
                if (otherEventDefinition instanceof MessageEventDefinition) {
                  MessageEventDefinition currentMessageEventDefinition=(MessageEventDefinition)eventDefinition;
                  MessageEventDefinition otherMessageEventDefinition=(MessageEventDefinition)otherEventDefinition;
                  if (otherMessageEventDefinition.getMessageRef() != null && otherMessageEventDefinition.getMessageRef().equals(currentMessageEventDefinition.getMessageRef())) {
                    addError(errors,Problems.MESSAGE_EVENT_MULTIPLE_ON_BOUNDARY_SAME_MESSAGE_ID,process,boundaryEvent,"Multiple message events with same message id not supported");
                  }
                }
              }
            }
          }
        }
      }
    }
 else {
      addError(errors,Problems.BOUNDARY_EVENT_NO_EVENT_DEFINITION,process,boundaryEvent,"Event definition is missing from boundary event");
    }
  }
  for (  String elementId : cancelBoundaryEventsCounts.keySet()) {
    if (cancelBoundaryEventsCounts.get(elementId) > 1) {
      addError(errors,Problems.BOUNDARY_EVENT_MULTIPLE_CANCEL_ON_TRANSACTION,process,bpmnModel.getFlowElement(elementId),"multiple boundary events with cancelEventDefinition not supported on same transaction subprocess.");
    }
  }
  for (  String elementId : compensateBoundaryEventsCounts.keySet()) {
    if (compensateBoundaryEventsCounts.get(elementId) > 1) {
      addError(errors,Problems.COMPENSATE_EVENT_MULTIPLE_ON_BOUNDARY,process,bpmnModel.getFlowElement(elementId),"Multiple boundary events of type 'compensate' is invalid");
    }
  }
}
