{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("compensationProcess");
  assertNotNull(processInstance);
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  assertNotNull(task);
  taskService.complete(task.getId());
  assertEquals(2,listener.getEventsReceived().size());
  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiActivityEvent);
  ActivitiActivityEvent activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(0);
  assertEquals(ActivitiEventType.ACTIVITY_COMPENSATE,activityEvent.getType());
  assertEquals("compensate",activityEvent.getActivityId());
  assertFalse(processInstance.getId().equals(activityEvent.getExecutionId()));
  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());
  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());
  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiSignalEvent);
  ActivitiSignalEvent signalEvent=(ActivitiSignalEvent)listener.getEventsReceived().get(1);
  assertEquals(ActivitiEventType.ACTIVITY_SIGNALED,signalEvent.getType());
  assertEquals("throwCompensation",signalEvent.getActivityId());
  assertEquals(processInstance.getId(),signalEvent.getExecutionId());
  assertEquals(processInstance.getProcessInstanceId(),signalEvent.getProcessInstanceId());
  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());
  assertEquals("compensationDone",signalEvent.getSignalName());
  assertNull(signalEvent.getSignalData());
}
