{
  String connectorId=req.getMandatoryString("connectorId");
  String artifactId=req.getString("artifactId");
  String representationId=req.getString("representationId");
  RepositoryArtifact artifact=repositoryService.getRepositoryArtifact(connectorId,artifactId);
  try {
    model.put("connectorId",connectorId);
    model.put("artifactId",artifactId);
    ContentRepresentation contentRepresentation=artifact.getArtifactType().getContentRepresentation(representationId);
switch (contentRepresentation.getRenderInfo()) {
case IMAGE:
case HTML:
      break;
case HTML_REFERENCE:
case BINARY:
case CODE:
case TEXT_PLAIN:
    String content=repositoryService.getContent(connectorId,artifactId,contentRepresentation.getId()).asString();
  model.put("content",content);
}
model.put("renderInfo",contentRepresentation.getRenderInfo().name());
model.put("contentRepresentationId",contentRepresentation.getId());
model.put("contentType",contentRepresentation.getMimeType().getContentType());
}
 catch (TransformationException e) {
model.put("renderInfo",RenderInfo.HTML);
model.put("contentRepresentationId",representationId);
model.put("contentType",CycleDefaultMimeType.HTML.getContentType());
}
}
