{
  String cuid=req.getCurrentUserId();
  WebScriptRequest wsReq=req.getWebScriptRequest();
  HttpSession session=req.getHttpServletRequest().getSession(true);
  RepositoryConnector conn=SessionUtil.getRepositoryConnector(cuid,session);
  String artifactId=req.getString("artifactId");
  String representationId=req.getString("representationId");
  String restProxyUri=req.getString("restProxyUri");
  RepositoryArtifact artifact=conn.getRepositoryArtifact(artifactId);
  try {
    for (    ContentRepresentation contentRepresentation : artifact.getArtifactType().getContentRepresentations()) {
      if (contentRepresentation.getId().equals(representationId)) {
        if (contentRepresentation.getMimeType().startsWith("image/")) {
          String imageUrl=restProxyUri + "/content?artifactId=" + URLEncoder.encode(artifactId,"UTF-8")+ "&content-type="+ URLEncoder.encode(contentRepresentation.getMimeType(),"UTF-8");
          model.put("imageUrl",imageUrl);
        }
 else {
          String content=conn.getContent(artifactId,contentRepresentation.getId()).asString();
          model.put("content",content);
        }
        model.put("id",contentRepresentation.getId());
        break;
      }
    }
  }
 catch (  Exception ex) {
    log.log(Level.WARNING,"Exception while loading content representation",ex);
    StringWriter sw=new StringWriter();
    ex.printStackTrace(new PrintWriter(sw));
    String stackTrace="Exception while accessing content. Details:\n\n" + sw.toString();
    model.put("exception",stackTrace);
  }
}
