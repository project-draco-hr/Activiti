{
  EventCollector eventCollector=new EventCollector();
  PvmProcessDefinition processDefinition=new ProcessDefinitionBuilder("events").executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).createActivity("start").initial().behavior(new Automatic()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("embeddedsubprocess").endActivity().createActivity("embeddedsubprocess").scope().behavior(new EmbeddedSubProcess()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).createActivity("startInside").behavior(new Automatic()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).transition("endInside").endActivity().createActivity("endInside").behavior(new End()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).endActivity().transition("end").endActivity().createActivity("end").behavior(new End()).executionListener(ExecutionListener.EVENTNAME_START,eventCollector).executionListener(ExecutionListener.EVENTNAME_END,eventCollector).endActivity().buildProcessDefinition();
  PvmProcessInstance processInstance=processDefinition.createProcessInstance();
  processInstance.start();
  List<String> expectedEvents=new ArrayList<String>();
  expectedEvents.add("start on ProcessDefinition(events)");
  expectedEvents.add("start on Activity(start)");
  expectedEvents.add("end on Activity(start)");
  expectedEvents.add("start on Activity(embeddedsubprocess)");
  expectedEvents.add("start on Activity(startInside)");
  expectedEvents.add("end on Activity(startInside)");
  expectedEvents.add("start on Activity(endInside)");
  expectedEvents.add("end on Activity(endInside)");
  expectedEvents.add("end on Activity(embeddedsubprocess)");
  expectedEvents.add("start on Activity(end)");
  expectedEvents.add("end on Activity(end)");
  expectedEvents.add("end on ProcessDefinition(events)");
  assertEquals("expected " + expectedEvents + ", but was \n"+ eventCollector+ "\n",expectedEvents,eventCollector.events);
}
