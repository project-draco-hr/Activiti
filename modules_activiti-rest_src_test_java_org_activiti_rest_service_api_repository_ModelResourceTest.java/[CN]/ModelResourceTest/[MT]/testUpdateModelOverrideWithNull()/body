{
  Model model=null;
  try {
    Calendar createTime=Calendar.getInstance();
    createTime.set(Calendar.MILLISECOND,0);
    ClockUtil.setCurrentTime(createTime.getTime());
    model=repositoryService.newModel();
    model.setCategory("Model category");
    model.setKey("Model key");
    model.setMetaInfo("Model metainfo");
    model.setName("Model name");
    model.setTenantId("myTenant");
    model.setVersion(2);
    repositoryService.saveModel(model);
    Calendar updateTime=Calendar.getInstance();
    updateTime.set(Calendar.MILLISECOND,0);
    ClockUtil.setCurrentTime(updateTime.getTime());
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("name",(String)null);
    requestNode.put("category",(String)null);
    requestNode.put("key",(String)null);
    requestNode.put("metaInfo",(String)null);
    requestNode.put("deploymentId",(String)null);
    requestNode.put("version",(String)null);
    requestNode.put("tenantId",(String)null);
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_MODEL,model.getId()));
    Representation response=client.put(requestNode);
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertNotNull(responseNode);
    assertNull(responseNode.get("name").getTextValue());
    assertNull(responseNode.get("key").getTextValue());
    assertNull(responseNode.get("category").getTextValue());
    assertNull(responseNode.get("version").getTextValue());
    assertNull(responseNode.get("metaInfo").getTextValue());
    assertNull(responseNode.get("deploymentId").getTextValue());
    assertNull(responseNode.get("tenantId").getTextValue());
    assertEquals(model.getId(),responseNode.get("id").getTextValue());
    assertEquals(createTime.getTime().getTime(),getDateFromISOString(responseNode.get("createTime").getTextValue()).getTime());
    assertEquals(updateTime.getTime().getTime(),getDateFromISOString(responseNode.get("lastUpdateTime").getTextValue()).getTime());
    assertTrue(responseNode.get("url").getTextValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_MODEL,model.getId())));
    model=repositoryService.getModel(model.getId());
    assertNull(model.getName());
    assertNull(model.getKey());
    assertNull(model.getCategory());
    assertNull(model.getMetaInfo());
    assertNull(model.getDeploymentId());
    assertEquals("",model.getTenantId());
  }
  finally {
    try {
      repositoryService.deleteModel(model.getId());
    }
 catch (    Throwable ignore) {
    }
  }
}
