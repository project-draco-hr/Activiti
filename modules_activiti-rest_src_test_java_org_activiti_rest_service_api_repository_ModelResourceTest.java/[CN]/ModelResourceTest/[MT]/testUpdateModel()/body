{
  Model model=null;
  try {
    Calendar createTime=Calendar.getInstance();
    createTime.set(Calendar.MILLISECOND,0);
    processEngineConfiguration.getClock().setCurrentTime(createTime.getTime());
    model=repositoryService.newModel();
    model.setCategory("Model category");
    model.setKey("Model key");
    model.setMetaInfo("Model metainfo");
    model.setName("Model name");
    model.setVersion(2);
    repositoryService.saveModel(model);
    Calendar updateTime=Calendar.getInstance();
    updateTime.set(Calendar.MILLISECOND,0);
    updateTime.add(Calendar.HOUR,1);
    processEngineConfiguration.getClock().setCurrentTime(updateTime.getTime());
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("name","Updated name");
    requestNode.put("category","Updated category");
    requestNode.put("key","Updated key");
    requestNode.put("metaInfo","Updated metainfo");
    requestNode.put("deploymentId",deploymentId);
    requestNode.put("version",3);
    requestNode.put("tenantId","myTenant");
    HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_MODEL,model.getId()));
    httpPut.setEntity(new StringEntity(requestNode.toString()));
    HttpResponse response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("Updated name",responseNode.get("name").textValue());
    assertEquals("Updated key",responseNode.get("key").textValue());
    assertEquals("Updated category",responseNode.get("category").textValue());
    assertEquals(3,responseNode.get("version").intValue());
    assertEquals("Updated metainfo",responseNode.get("metaInfo").textValue());
    assertEquals(deploymentId,responseNode.get("deploymentId").textValue());
    assertEquals(model.getId(),responseNode.get("id").textValue());
    assertEquals("myTenant",responseNode.get("tenantId").textValue());
    assertEquals(createTime.getTime().getTime(),getDateFromISOString(responseNode.get("createTime").textValue()).getTime());
    assertEquals(updateTime.getTime().getTime(),getDateFromISOString(responseNode.get("lastUpdateTime").textValue()).getTime());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_MODEL,model.getId())));
    assertTrue(responseNode.get("deploymentUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_DEPLOYMENT,deploymentId)));
  }
  finally {
    try {
      repositoryService.deleteModel(model.getId());
    }
 catch (    Throwable ignore) {
    }
  }
}
