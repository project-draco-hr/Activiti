{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task.getId());
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_QUERY);
  ObjectNode requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("variables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",67890);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",false);
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","ghijkl");
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","intVar");
  variableNode.put("value",45678);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","booleanVar");
  variableNode.put("value",true);
  variableNode.put("operation","notEquals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","azeRTY");
  variableNode.put("operation","equalsIgnoreCase");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("name","stringVar");
  variableNode.put("value","HIJKLm");
  variableNode.put("operation","notEqualsIgnoreCase");
  assertErrorResult(url,requestNode,HttpStatus.SC_BAD_REQUEST);
  variableNode.removeAll();
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  variableNode.removeAll();
  variableNode.put("value","Azerty2");
  variableNode.put("operation","equals");
  assertResultsPresentInPostDataResponse(url,requestNode);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("finished",true);
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("finished",false);
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",processInstance.getProcessDefinitionId());
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","oneTaskProcess");
  assertResultsPresentInPostDataResponse(url,requestNode,processInstance.getId(),processInstance2.getId());
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","oneTaskProcess");
  HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + url + "?sort=startTime");
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_OK);
  JsonNode dataNode=objectMapper.readTree(response.getEntity().getContent()).get("data");
  assertEquals(2,dataNode.size());
  assertEquals(processInstance.getId(),dataNode.get(0).get("id").asText());
  assertEquals(processInstance2.getId(),dataNode.get(1).get("id").asText());
}
