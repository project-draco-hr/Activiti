{
  List<RepositoryArtifact> updatedOperationalModels=new ArrayList<RepositoryArtifact>();
  VirtualRepositoryFolder processesFolder=getProcessSolutionUtils().getProcessesFolder(event.getProcessSolution());
  VirtualRepositoryFolder implementationFolder=getProcessSolutionUtils().getImplementationFolder(event.getProcessSolution());
  List<RepositoryArtifact> processModels=getProcessSolutionUtils().getProcessModels(processesFolder);
  for (  RepositoryArtifact operationalProcessModel : processModels) {
    List<RepositoryArtifactLink> links=repositoryService.getArtifactLinks(operationalProcessModel.getConnectorId(),operationalProcessModel.getNodeId());
    for (    RepositoryArtifactLink repositoryArtifactLink : links) {
      if (!RepositoryArtifactLinkEntity.TYPE_IMPLEMENTS.equals(repositoryArtifactLink.getLinkType())) {
        continue;
      }
      RepositoryArtifact implementedProcessModel=repositoryArtifactLink.getTargetArtifact();
      RepositoryConnector operationalProcessModelConnector=RuntimeConnectorList.getMyConnectorById(operationalProcessModel.getConnectorId());
      if (!isEeSignavio(operationalProcessModelConnector)) {
        continue;
      }
      RepositoryConnector implementedProcessModelConnector=RuntimeConnectorList.getMyConnectorById(implementedProcessModel.getConnectorId());
      String operationalProcessModelBpmn=ActivitiCompliantBpmn20Provider.createBpmnXml(operationalProcessModelConnector,operationalProcessModel);
      Content implementedProcessModelBpmnContent=implementedProcessModelConnector.getContent(implementedProcessModel.getNodeId());
      String implementedProcessModelBpmn=implementedProcessModelBpmnContent.asString();
      if (implementedProcessModelBpmn.equals(operationalProcessModelBpmn)) {
        continue;
      }
      RepositoryFolder backupFolder=null;
      RepositoryNodeCollection childnodes=operationalProcessModelConnector.getChildren(operationalProcessModel.getMetadata().getParentFolderId());
      for (      RepositoryFolder potentialBackupFolder : childnodes.getFolderList()) {
        if ("backup".equals(potentialBackupFolder.getMetadata().getName())) {
          backupFolder=potentialBackupFolder;
          break;
        }
      }
      if (backupFolder == null) {
        backupFolder=operationalProcessModelConnector.createFolder(operationalProcessModel.getMetadata().getParentFolderId(),"backup");
      }
      Content content=operationalProcessModelConnector.getContent(operationalProcessModel.getNodeId());
      String backupModelName=operationalProcessModel.getMetadata().getName() + "_" + DateFormat.getDateTimeInstance().format(new Date());
      operationalProcessModelConnector.createArtifact(backupFolder.getNodeId(),backupModelName,null,content);
      operationalProcessModelConnector.deleteArtifact(operationalProcessModel.getNodeId());
      SignavioConnectorInterface signavioConnectorInterface=(SignavioConnectorInterface)operationalProcessModelConnector;
      String json=signavioConnectorInterface.transformBpmn20XmltoJson(implementedProcessModelBpmn);
      Content jsoncontent=new Content();
      jsoncontent.setValue(json);
      String parentfolderId=operationalProcessModel.getMetadata().getParentFolderId();
      RepositoryFolder parentFolder=operationalProcessModelConnector.getRepositoryFolder(parentfolderId);
      RepositoryArtifact newArtifact=operationalProcessModelConnector.createArtifact(parentFolder.getNodeId(),operationalProcessModel.getMetadata().getName(),null,jsoncontent);
      repositoryService.deleteLink(repositoryArtifactLink.getId());
      RepositoryArtifactLinkEntity newLink=new RepositoryArtifactLinkEntity();
      newLink.setSourceArtifact(newArtifact);
      newLink.setTargetArtifact(implementedProcessModel);
      newLink.setLinkType(RepositoryArtifactLinkEntity.TYPE_IMPLEMENTS);
      repositoryService.addArtifactLink(newLink);
      updatedOperationalModels.add(newArtifact);
    }
  }
  if (updatedOperationalModels.size() > 0) {
    sendEmailnotification(event.getProcessSolution(),updatedOperationalModels);
  }
}
