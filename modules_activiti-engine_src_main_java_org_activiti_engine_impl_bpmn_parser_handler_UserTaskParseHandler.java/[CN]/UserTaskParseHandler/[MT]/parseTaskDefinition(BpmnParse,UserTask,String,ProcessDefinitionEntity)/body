{
  TaskFormHandler taskFormHandler=new DefaultTaskFormHandler();
  taskFormHandler.parseConfiguration(userTask.getFormProperties(),userTask.getFormKey(),bpmnParse.getDeployment(),processDefinition);
  TaskDefinition taskDefinition=new TaskDefinition(taskFormHandler);
  taskDefinition.setKey(taskDefinitionKey);
  processDefinition.getTaskDefinitions().put(taskDefinitionKey,taskDefinition);
  ExpressionManager expressionManager=bpmnParse.getExpressionManager();
  if (StringUtils.isNotEmpty(userTask.getName())) {
    taskDefinition.setNameExpression(expressionManager.createExpression(userTask.getName()));
  }
  if (StringUtils.isNotEmpty(userTask.getDocumentation())) {
    taskDefinition.setDescriptionExpression(expressionManager.createExpression(userTask.getDocumentation()));
  }
  if (StringUtils.isNotEmpty(userTask.getAssignee())) {
    taskDefinition.setAssigneeExpression(expressionManager.createExpression(userTask.getAssignee()));
  }
  if (StringUtils.isNotEmpty(userTask.getOwner())) {
    taskDefinition.setOwnerExpression(expressionManager.createExpression(userTask.getOwner()));
  }
  for (  String candidateUser : userTask.getCandidateUsers()) {
    taskDefinition.addCandidateUserIdExpression(expressionManager.createExpression(candidateUser));
  }
  for (  String candidateGroup : userTask.getCandidateGroups()) {
    taskDefinition.addCandidateGroupIdExpression(expressionManager.createExpression(candidateGroup));
  }
  for (  ActivitiListener taskListener : userTask.getTaskListeners()) {
    taskDefinition.addTaskListener(taskListener.getEvent(),createTaskListener(bpmnParse,taskListener,userTask.getId()));
  }
  if (StringUtils.isNotEmpty(userTask.getDueDate())) {
    taskDefinition.setDueDateExpression(expressionManager.createExpression(userTask.getDueDate()));
  }
  if (StringUtils.isNotEmpty(userTask.getCategory())) {
    taskDefinition.setCategoryExpression(expressionManager.createExpression(userTask.getCategory()));
  }
  if (StringUtils.isNotEmpty(userTask.getPriority())) {
    taskDefinition.setPriorityExpression(expressionManager.createExpression(userTask.getPriority()));
  }
  if (StringUtils.isNotEmpty(userTask.getFormKey())) {
    taskDefinition.setFormKeyExpression(expressionManager.createExpression(userTask.getFormKey()));
  }
  for (  String customUserIdentityLinkType : userTask.getCustomUserIdentityLinks().keySet()) {
    Set<Expression> userIdentityLinkExpression=new HashSet<Expression>();
    for (    String userIdentityLink : userTask.getCustomUserIdentityLinks().get(customUserIdentityLinkType)) {
      userIdentityLinkExpression.add(expressionManager.createExpression(userIdentityLink));
    }
    taskDefinition.addCustomUserIdentityLinkExpression(customUserIdentityLinkType,userIdentityLinkExpression);
  }
  for (  String customGroupIdentityLinkType : userTask.getCustomGroupIdentityLinks().keySet()) {
    Set<Expression> groupIdentityLinkExpression=new HashSet<Expression>();
    for (    String groupIdentityLink : userTask.getCustomGroupIdentityLinks().get(customGroupIdentityLinkType)) {
      groupIdentityLinkExpression.add(expressionManager.createExpression(groupIdentityLink));
    }
    taskDefinition.addCustomGroupIdentityLinkExpression(customGroupIdentityLinkType,groupIdentityLinkExpression);
  }
  if (StringUtils.isNotEmpty(userTask.getSkipExpression())) {
    taskDefinition.setSkipExpression(expressionManager.createExpression(userTask.getSkipExpression()));
  }
  return taskDefinition;
}
