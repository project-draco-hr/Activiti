{
  ExclusiveGateway forkGateway=createExclusiveGateway(conversion);
  addSequenceFlow(conversion,conversion.getLastActivityId(),forkGateway.getId());
  conversion.setLastActivityId(forkGateway.getId());
  WorkflowDefinitionConversionFactory conversionFactory=conversion.getConversionFactory();
  List<FlowElement> endElements=new ArrayList<FlowElement>();
  for (  ListConditionStepDefinition<ChoiceStepsDefinition> stepListDefinition : choiceStepsDefinition.getStepList()) {
    StringBuilder conditionBuilder=new StringBuilder();
    for (    ConditionDefinition conditionDefintion : stepListDefinition.getConditions()) {
      if (conditionBuilder.length() > 0) {
        conditionBuilder.append(" && ");
      }
 else {
        conditionBuilder.append("${");
      }
      conditionBuilder.append(conditionDefintion.getLeftOperand());
      conditionBuilder.append(" ");
      conditionBuilder.append(conditionDefintion.getOperator());
      conditionBuilder.append(" ");
      conditionBuilder.append(conditionDefintion.getRightOperand());
    }
    for (int i=0; i < stepListDefinition.getSteps().size(); i++) {
      if (i == 0) {
        conversion.setSequenceflowGenerationEnabled(false);
      }
 else {
        conversion.setSequenceflowGenerationEnabled(true);
      }
      StepDefinition step=stepListDefinition.getSteps().get(i);
      FlowElement flowElement=(FlowElement)conversionFactory.getStepConverterFor(step).convertStepDefinition(step,conversion);
      if (i == 0) {
        if (conditionBuilder.length() > 0) {
          conditionBuilder.append("}");
          addSequenceFlow(conversion,forkGateway.getId(),flowElement.getId(),conditionBuilder.toString());
        }
 else {
          addSequenceFlow(conversion,forkGateway.getId(),flowElement.getId());
        }
      }
      if ((i + 1) == stepListDefinition.getSteps().size()) {
        endElements.add(flowElement);
      }
    }
  }
  conversion.setSequenceflowGenerationEnabled(false);
  ExclusiveGateway joinGateway=createExclusiveGateway(conversion);
  conversion.setLastActivityId(joinGateway.getId());
  conversion.setSequenceflowGenerationEnabled(true);
  for (  FlowElement endElement : endElements) {
    addSequenceFlow(conversion,endElement.getId(),joinGateway.getId());
  }
  return forkGateway;
}
