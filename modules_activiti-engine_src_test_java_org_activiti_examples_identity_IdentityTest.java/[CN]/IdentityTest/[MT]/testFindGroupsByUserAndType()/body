{
  Group sales=identityService.newGroup("sales");
  sales.setType("hierarchy");
  identityService.saveGroup(sales);
  Group development=identityService.newGroup("development");
  development.setType("hierarchy");
  identityService.saveGroup(development);
  Group admin=identityService.newGroup("admin");
  admin.setType("security-role");
  identityService.saveGroup(admin);
  Group user=identityService.newGroup("user");
  user.setType("security-role");
  identityService.saveGroup(user);
  User johndoe=identityService.newUser("johndoe");
  identityService.saveUser(johndoe);
  User joesmoe=identityService.newUser("joesmoe");
  identityService.saveUser(joesmoe);
  User jackblack=identityService.newUser("jackblack");
  identityService.saveUser(jackblack);
  identityService.createMembership("johndoe","sales");
  identityService.createMembership("johndoe","user");
  identityService.createMembership("johndoe","admin");
  identityService.createMembership("joesmoe","user");
  List<Group> groups=identityService.createGroupQuery().member("johndoe").type("security-role").list();
  Set<String> groupIds=getGroupIds(groups);
  Set<String> expectedGroupIds=new HashSet<String>();
  expectedGroupIds.add("user");
  expectedGroupIds.add("admin");
  assertEquals(expectedGroupIds,groupIds);
  groups=identityService.createGroupQuery().member("joesmoe").type("security-role").list();
  groupIds=getGroupIds(groups);
  expectedGroupIds=new HashSet<String>();
  expectedGroupIds.add("user");
  assertEquals(expectedGroupIds,groupIds);
  groups=identityService.createGroupQuery().member("jackblack").type("security-role").list();
  assertTrue(groups.isEmpty());
  identityService.deleteGroup("sales");
  identityService.deleteGroup("development");
  identityService.deleteGroup("admin");
  identityService.deleteGroup("user");
  identityService.deleteUser("johndoe");
  identityService.deleteUser("joesmoe");
  identityService.deleteUser("jackblack");
}
