{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    InputStream binaryContent=new ByteArrayInputStream("This is binary content".getBytes());
    Map<String,String> additionalFields=new HashMap<String,String>();
    additionalFields.put("name","An attachment");
    additionalFields.put("description","An attachment description");
    additionalFields.put("type","myType");
    Representation uploadRepresentation=new HttpMultipartRepresentation("value",binaryContent,additionalFields);
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT_COLLECTION,task.getId()));
    Representation response=client.post(uploadRepresentation);
    assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
    List<Attachment> attachments=taskService.getTaskAttachments(task.getId());
    assertEquals(1,attachments.size());
    Attachment binaryAttachment=attachments.get(0);
    assertEquals("This is binary content",IOUtils.toString(taskService.getAttachmentContent(binaryAttachment.getId())));
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertEquals(binaryAttachment.getId(),responseNode.get("id").textValue());
    assertEquals("myType",responseNode.get("type").textValue());
    assertEquals("An attachment",responseNode.get("name").textValue());
    assertEquals("An attachment description",responseNode.get("description").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),binaryAttachment.getId())));
    assertTrue(responseNode.get("contentUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT_DATA,task.getId(),binaryAttachment.getId())));
    assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId())));
    assertTrue(responseNode.get("externalUrl").isNull());
    assertTrue(responseNode.get("processInstanceUrl").isNull());
    assertFalse(responseNode.get("time").isNull());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
