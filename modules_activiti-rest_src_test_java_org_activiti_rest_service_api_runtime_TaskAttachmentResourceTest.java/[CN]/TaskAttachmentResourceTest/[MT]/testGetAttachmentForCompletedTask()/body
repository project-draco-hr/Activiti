{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    Attachment urlAttachment=taskService.createAttachment("simpleType",task.getId(),null,"Simple attachment","Simple attachment description","http://activiti.org");
    taskService.saveAttachment(urlAttachment);
    Attachment binaryAttachment=taskService.createAttachment("binaryType",task.getId(),null,"Binary attachment","Binary attachment description",new ByteArrayInputStream("This is binary content".getBytes()));
    taskService.saveAttachment(binaryAttachment);
    taskService.complete(task.getId());
    ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),urlAttachment.getId()));
    Representation response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    JsonNode responseNode=objectMapper.readTree(response.getStream());
    assertEquals(urlAttachment.getId(),responseNode.get("id").textValue());
    assertEquals("simpleType",responseNode.get("type").textValue());
    assertEquals("Simple attachment",responseNode.get("name").textValue());
    assertEquals("Simple attachment description",responseNode.get("description").textValue());
    assertEquals("http://activiti.org",responseNode.get("externalUrl").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),urlAttachment.getId())));
    assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId())));
    assertTrue(responseNode.get("contentUrl").isNull());
    assertTrue(responseNode.get("processInstanceUrl").isNull());
    assertFalse(responseNode.get("time").isNull());
    client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),binaryAttachment.getId()));
    response=client.get();
    assertEquals(Status.SUCCESS_OK,client.getResponse().getStatus());
    responseNode=objectMapper.readTree(response.getStream());
    assertEquals(binaryAttachment.getId(),responseNode.get("id").textValue());
    assertEquals("binaryType",responseNode.get("type").textValue());
    assertEquals("Binary attachment",responseNode.get("name").textValue());
    assertEquals("Binary attachment description",responseNode.get("description").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),binaryAttachment.getId())));
    assertTrue(responseNode.get("contentUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT_DATA,task.getId(),binaryAttachment.getId())));
    assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId())));
    assertTrue(responseNode.get("externalUrl").isNull());
    assertTrue(responseNode.get("processInstanceUrl").isNull());
  }
  finally {
    List<HistoricTaskInstance> tasks=historyService.createHistoricTaskInstanceQuery().list();
    for (    HistoricTaskInstance task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
