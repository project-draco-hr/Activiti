{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("name","Simple attachment");
    requestNode.put("description","Simple attachment description");
    requestNode.put("type","simpleType");
    requestNode.put("externalUrl","http://activiti.org");
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT_COLLECTION,task.getId()));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
    List<Attachment> attachments=taskService.getTaskAttachments(task.getId());
    assertEquals(1,attachments.size());
    Attachment urlAttachment=attachments.get(0);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertEquals(urlAttachment.getId(),responseNode.get("id").textValue());
    assertEquals("simpleType",responseNode.get("type").textValue());
    assertEquals("Simple attachment",responseNode.get("name").textValue());
    assertEquals("Simple attachment description",responseNode.get("description").textValue());
    assertEquals("http://activiti.org",responseNode.get("externalUrl").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_ATTACHMENT,task.getId(),urlAttachment.getId())));
    assertTrue(responseNode.get("taskUrl").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK,task.getId())));
    assertTrue(responseNode.get("contentUrl").isNull());
    assertTrue(responseNode.get("processInstanceUrl").isNull());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
