{
  ProcessEngineConfigurationImpl processEngineConfiguration=null;
  try {
    LogUtil.readJavaUtilLoggingConfigFromClasspath();
    if (args == null || args.length != 2) {
      throw new RuntimeException("exactly 2 arguments expected: database and releaseVersion");
    }
    String database=args[0];
    String releaseVersion=args[1];
    log.fine("database: " + database);
    log.fine("releaseVersion: " + releaseVersion);
    processEngineConfiguration=UpgradeTestCase.createProcessEngineConfiguration(database);
    log.fine("installing jdbc proxy driver delegating to " + processEngineConfiguration.getJdbcUrl());
    ProxyDriver.setUrl(processEngineConfiguration.getJdbcUrl());
    processEngineConfiguration.setJdbcUrl("proxy");
    DriverManager.registerDriver(new ProxyDriver());
    log.fine("building the process engine...");
    ProcessEngine processEngine=processEngineConfiguration.buildProcessEngine();
    log.fine("deploy processes and start process instances");
    UpgradeTestCase.setProcessEngine(processEngine);
    for (    UpgradeTestCase upgradeTestCase : upgradeTestCases) {
      log.fine("### Running test " + ClassNameUtil.getClassNameWithoutPackage(upgradeTestCase.getClass()) + " in the old version");
      upgradeTestCase.runInTheOldVersion();
    }
    log.fine("### Captured SQL");
    PrintWriter file=new PrintWriter("src/test/resources/org/activiti/db/" + releaseVersion + "/data/"+ database+ ".data.sql");
    System.err.println();
    System.err.println();
    for (    String statement : ProxyDriver.statements) {
      System.err.println(statement);
      System.err.println();
      file.println(statement);
      file.println();
    }
    file.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  dbSchemaDrop(processEngineConfiguration);
}
