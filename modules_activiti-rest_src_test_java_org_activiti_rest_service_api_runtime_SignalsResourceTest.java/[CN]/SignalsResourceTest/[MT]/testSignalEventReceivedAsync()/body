{
  org.activiti.engine.repository.Deployment tenantDeployment=repositoryService.createDeployment().addClasspathResource("org/activiti/rest/service/api/runtime/SignalsResourceTest.process-signal-start.bpmn20.xml").tenantId("my tenant").deploy();
  try {
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("signalName","The Signal");
    requestNode.put("async",true);
    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_SIGNALS));
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_ACCEPTED));
    assertEquals(1,managementService.createJobQuery().jobWithoutTenantId().count());
    requestNode.put("tenantId","my tenant");
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_ACCEPTED));
    assertEquals(1,managementService.createJobQuery().jobTenantId("my tenant").count());
    ArrayNode vars=requestNode.putArray("variables");
    ObjectNode var=vars.addObject();
    var.put("name","testVar");
    var.put("value","test");
    httpPost.setEntity(new StringEntity(requestNode.toString()));
    closeResponse(executeRequest(httpPost,HttpStatus.SC_BAD_REQUEST));
  }
  finally {
    if (tenantDeployment != null) {
      repositoryService.deleteDeployment(tenantDeployment.getId(),true);
    }
    List<Job> jobs=managementService.createJobQuery().list();
    for (    Job job : jobs) {
      managementService.deleteJob(job.getId());
    }
  }
}
