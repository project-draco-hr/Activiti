{
  try {
    boolean isSkipExpressionEnabled=SkipExpressionUtil.isSkipExpressionEnabled(execution,skipExpression);
    if (!isSkipExpressionEnabled || (isSkipExpressionEnabled && !SkipExpressionUtil.shouldSkipFlowElement(execution,skipExpression))) {
      if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {
        ObjectNode taskElementProperties=Context.getBpmnOverrideElementProperties(serviceTaskId,execution.getProcessDefinitionId());
        if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION)) {
          String overrideExpression=taskElementProperties.get(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION).asText();
          if (StringUtils.isNotEmpty(overrideExpression) && overrideExpression.equals(expression.getExpressionText()) == false) {
            expression=Context.getProcessEngineConfiguration().getExpressionManager().createExpression(overrideExpression);
          }
        }
      }
      Object delegate=DelegateExpressionUtil.resolveDelegateExpression(expression,execution,fieldDeclarations);
      if (delegate instanceof ActivityBehavior) {
        if (delegate instanceof AbstractBpmnActivityBehavior) {
          ((AbstractBpmnActivityBehavior)delegate).setMultiInstanceActivityBehavior(getMultiInstanceActivityBehavior());
        }
        Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new ActivityBehaviorInvocation((ActivityBehavior)delegate,execution));
      }
 else       if (delegate instanceof JavaDelegate) {
        Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new JavaDelegateInvocation((JavaDelegate)delegate,execution));
        leave(execution);
      }
 else {
        throw new ActivitiIllegalArgumentException("Delegate expression " + expression + " did neither resolve to an implementation of "+ ActivityBehavior.class+ " nor "+ JavaDelegate.class);
      }
    }
 else {
      leave(execution);
    }
  }
 catch (  Exception exc) {
    Throwable cause=exc;
    BpmnError error=null;
    while (cause != null) {
      if (cause instanceof BpmnError) {
        error=(BpmnError)cause;
        break;
      }
      cause=cause.getCause();
    }
    if (error != null) {
      ErrorPropagation.propagateError(error,execution);
    }
 else {
      throw exc;
    }
  }
}
