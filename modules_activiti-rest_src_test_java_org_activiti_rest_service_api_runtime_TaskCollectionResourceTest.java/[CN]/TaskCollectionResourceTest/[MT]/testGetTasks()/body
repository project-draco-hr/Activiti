{
  try {
    Calendar adhocTaskCreate=Calendar.getInstance();
    adhocTaskCreate.set(Calendar.MILLISECOND,0);
    Calendar processTaskCreate=Calendar.getInstance();
    processTaskCreate.add(Calendar.HOUR,2);
    processTaskCreate.set(Calendar.MILLISECOND,0);
    Calendar inBetweenTaskCreation=Calendar.getInstance();
    inBetweenTaskCreation.add(Calendar.HOUR,1);
    processEngineConfiguration.getClock().setCurrentTime(adhocTaskCreate.getTime());
    Task adhocTask=taskService.newTask();
    adhocTask.setAssignee("gonzo");
    adhocTask.setOwner("owner");
    adhocTask.setDelegationState(DelegationState.PENDING);
    adhocTask.setDescription("Description one");
    adhocTask.setName("Name one");
    adhocTask.setDueDate(adhocTaskCreate.getTime());
    adhocTask.setPriority(100);
    taskService.saveTask(adhocTask);
    taskService.addUserIdentityLink(adhocTask.getId(),"misspiggy",IdentityLinkType.PARTICIPANT);
    processEngineConfiguration.getClock().setCurrentTime(processTaskCreate.getTime());
    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess","myBusinessKey");
    Task processTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
    processTask.setParentTaskId(adhocTask.getId());
    processTask.setPriority(50);
    processTask.setDueDate(processTaskCreate.getTime());
    taskService.saveTask(processTask);
    String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION);
    assertResultsPresentInDataResponse(url,adhocTask.getId(),processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?name=" + encode("Name one");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?nameLike=" + encode("%one");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?description=" + encode("Description one");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?description=" + encode("Description two");
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?descriptionLike=" + encode("%one");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?descriptionLike=" + encode("%two");
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?priority=100";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?minimumPriority=70";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?maximumPriority=70";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?owner=owner";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?owner=kermit";
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?ownerLike=" + encode("%ner");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?ownerLike=" + encode("kerm%");
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?assignee=gonzo";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?assignee=kermit";
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?assigneeLike=" + encode("gon%");
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?assigneeLike=" + encode("kerm%");
    assertEmptyResultsPresentInDataResponse(url);
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?unassigned=true";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?delegationState=pending";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?candidateUser=kermit";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?candidateGroup=sales";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?involvedUser=misspiggy";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?processInstanceId=" + processInstance.getId();
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?executionId=" + processInstance.getId();
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?processInstanceBusinessKey=myBusinessKey";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?createdOn=" + getISODateString(adhocTaskCreate.getTime());
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?createdAfter=" + getISODateString(inBetweenTaskCreation.getTime());
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?createdBefore=" + getISODateString(inBetweenTaskCreation.getTime());
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?excludeSubTasks=true";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?taskDefinitionKey=processTask";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?taskDefinitionKeyLike=" + encode("process%");
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?dueDate=" + getISODateString(adhocTaskCreate.getTime());
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?dueAfter=" + getISODateString(inBetweenTaskCreation.getTime());
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?dueBefore=" + getISODateString(inBetweenTaskCreation.getTime());
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?withoutTenantId=true";
    assertResultsPresentInDataResponse(url,adhocTask.getId(),processTask.getId());
    managementService.executeCommand(new ChangeDeploymentTenantIdCmd(deploymentId,"myTenant"));
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?withoutTenantId=true";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?tenantId=myTenant";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?tenantIdLike=" + encode("%enant");
    assertResultsPresentInDataResponse(url,processTask.getId());
    runtimeService.suspendProcessInstanceById(processInstance.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?active=false";
    assertResultsPresentInDataResponse(url,processTask.getId());
    url=RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?active=true";
    assertResultsPresentInDataResponse(url,adhocTask.getId());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      if (task.getExecutionId() == null) {
        taskService.deleteTask(task.getId(),true);
      }
    }
  }
}
