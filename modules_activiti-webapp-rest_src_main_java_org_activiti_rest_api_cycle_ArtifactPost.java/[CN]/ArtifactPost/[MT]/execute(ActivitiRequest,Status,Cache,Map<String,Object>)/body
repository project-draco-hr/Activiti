{
  FormField file=null;
  try {
    file=((WebScriptServletRequest)req.getWebScriptRequest()).getFileField("file");
  }
 catch (  NullPointerException npe) {
  }
  ActivitiRequestObject obj=req.getBody();
  String connectorId=req.getMandatoryString(obj,"connectorId");
  String parentFolderId=req.getMandatoryString(obj,"parentFolderId");
  String artifactName=req.getMandatoryString(obj,"artifactName");
  String linkToNodeId=req.getOptionalString(obj,"linkToNodeId");
  String linkToConnectorId=req.getOptionalString(obj,"linkToConnectorId");
  String linkType=req.getOptionalString(obj,"linkType");
  String artifactType="";
  artifactName=getNonExistingArtifactName(artifactName,connectorId,parentFolderId);
  Content artifactContent=new Content();
  if (file != null) {
    artifactContent.setValue(file.getInputStream());
  }
  RepositoryArtifact createdArtifact=null;
  try {
    if (artifactContent.isNull()) {
      createdArtifact=repositoryService.createEmptyArtifact(connectorId,parentFolderId,artifactName,artifactType);
    }
 else {
      createdArtifact=repositoryService.createArtifact(connectorId,parentFolderId,artifactName,artifactType,artifactContent);
    }
    model.put("result",true);
    if (createdArtifact instanceof ProcessSolutionArtifact) {
      model.put("vFolderId",((ProcessSolutionArtifact)createdArtifact).getVirtualRepositoryFolder().getId());
    }
    model.put("artifact",createdArtifact);
    List<UrlActionDto> link=new ArrayList<UrlActionDto>();
    for (    RepositoryArtifactOpenLinkAction openLinkAction : pluginService.getArtifactOpenLinkActions(createdArtifact)) {
      link.add(new UrlActionDto(openLinkAction.getId(),openLinkAction.getUrl().toString()));
    }
    model.put("links",link);
    if (linkToNodeId != null && linkToNodeId.length() > 0 && !linkToNodeId.equals("undefined") && linkToConnectorId != null && linkToConnectorId.length() > 0 && !linkToConnectorId.equals("undefined")) {
      RepositoryArtifact targetArtifact=repositoryService.getRepositoryArtifact(linkToConnectorId,linkToNodeId);
      RepositoryArtifactLinkEntity newLink=new RepositoryArtifactLinkEntity();
      newLink.setLinkType(linkType);
      newLink.setSourceArtifact(createdArtifact);
      newLink.setTargetArtifact(targetArtifact);
      repositoryService.addArtifactLink(newLink);
    }
  }
 catch (  Exception e) {
    model.put("result",false);
  }
}
