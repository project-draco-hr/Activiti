{
  for (  String edgeId : edgeMap.keySet()) {
    ObjectNode edgeNode=edgeMap.get(edgeId);
    List<ObjectNode> sourceAndTargetList=sourceAndTargetMap.get(edgeId);
    xtw.writeStartElement(BPMNDI_PREFIX,"BPMNEdge",BPMNDI_NAMESPACE);
    xtw.writeAttribute("bpmnElement",edgeId);
    xtw.writeAttribute("id","BPMNEdge_" + edgeId);
    ObjectNode sourceRefNode=sourceAndTargetList.get(0);
    ObjectNode targetRefNode=sourceAndTargetList.get(1);
    JsonNode dockersNode=edgeNode.get(EDITOR_DOCKERS);
    double sourceDockersX=dockersNode.get(0).get(EDITOR_BOUNDS_X).getDoubleValue();
    double sourceDockersY=dockersNode.get(0).get(EDITOR_BOUNDS_Y).getDoubleValue();
    JsonNode sourceRefBoundsNode=sourceRefNode.get(EDITOR_BOUNDS);
    BoundsLocation sourceRefUpperLeftLocation=getLocation(EDITOR_BOUNDS_UPPER_LEFT,sourceRefBoundsNode);
    BoundsLocation sourceRefLowerRightLocation=getLocation(EDITOR_BOUNDS_LOWER_RIGHT,sourceRefBoundsNode);
    JsonNode targetRefBoundsNode=targetRefNode.get(EDITOR_BOUNDS);
    BoundsLocation targetRefUpperLeftLocation=getLocation(EDITOR_BOUNDS_UPPER_LEFT,targetRefBoundsNode);
    BoundsLocation targetRefLowerRightLocation=getLocation(EDITOR_BOUNDS_LOWER_RIGHT,targetRefBoundsNode);
    double sourceRefLineX=sourceRefUpperLeftLocation.x + sourceDockersX;
    double sourceRefLineY=sourceRefUpperLeftLocation.y + sourceDockersY;
    double nextPointInLineX;
    double nextPointInLineY;
    nextPointInLineX=dockersNode.get(1).get(EDITOR_BOUNDS_X).getDoubleValue();
    nextPointInLineY=dockersNode.get(1).get(EDITOR_BOUNDS_Y).getDoubleValue();
    if (dockersNode.size() == 2) {
      nextPointInLineX+=targetRefUpperLeftLocation.x;
      nextPointInLineY+=targetRefUpperLeftLocation.y;
    }
    Line2D firstLine=new Line2D(sourceRefLineX,sourceRefLineY,nextPointInLineX,nextPointInLineY);
    String sourceRefStencilId=getStencilId(sourceRefNode);
    String targetRefStencilId=getStencilId(targetRefNode);
    if (DI_CIRCLES.contains(sourceRefStencilId)) {
      Circle2D eventCircle=new Circle2D(sourceRefUpperLeftLocation.x + sourceDockersX,sourceRefUpperLeftLocation.y + sourceDockersY,sourceDockersX);
      Collection<Point2D> intersections=eventCircle.intersections(firstLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
 else     if (DI_RECTANGLES.contains(sourceRefStencilId)) {
      Polyline2D rectangle=createRectangle(sourceRefUpperLeftLocation,sourceRefLowerRightLocation);
      Collection<Point2D> intersections=rectangle.intersections(firstLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
 else     if (DI_GATEWAY.contains(sourceRefStencilId)) {
      Polyline2D gatewayRectangle=createGateway(sourceRefUpperLeftLocation,sourceRefLowerRightLocation);
      Collection<Point2D> intersections=gatewayRectangle.intersections(firstLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
    Line2D lastLine=null;
    if (dockersNode.size() > 2) {
      for (int i=1; i < dockersNode.size() - 1; i++) {
        double x=dockersNode.get(i).get(EDITOR_BOUNDS_X).getDoubleValue();
        double y=dockersNode.get(i).get(EDITOR_BOUNDS_Y).getDoubleValue();
        createWayPoint(x,y,xtw);
      }
      double startLastLineX=dockersNode.get(dockersNode.size() - 2).get(EDITOR_BOUNDS_X).getDoubleValue();
      double startLastLineY=dockersNode.get(dockersNode.size() - 2).get(EDITOR_BOUNDS_Y).getDoubleValue();
      double endLastLineX=dockersNode.get(dockersNode.size() - 1).get(EDITOR_BOUNDS_X).getDoubleValue();
      double endLastLineY=dockersNode.get(dockersNode.size() - 1).get(EDITOR_BOUNDS_Y).getDoubleValue();
      endLastLineX+=targetRefUpperLeftLocation.x;
      endLastLineY+=targetRefUpperLeftLocation.y;
      lastLine=new Line2D(startLastLineX,startLastLineY,endLastLineX,endLastLineY);
    }
 else {
      lastLine=firstLine;
    }
    if (DI_RECTANGLES.contains(targetRefStencilId)) {
      Polyline2D rectangle=createRectangle(targetRefUpperLeftLocation,targetRefLowerRightLocation);
      Collection<Point2D> intersections=rectangle.intersections(lastLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
 else     if (DI_CIRCLES.contains(targetRefStencilId)) {
      double targetDockersX=dockersNode.get(dockersNode.size() - 1).get(EDITOR_BOUNDS_X).getDoubleValue();
      double targetDockersY=dockersNode.get(dockersNode.size() - 1).get(EDITOR_BOUNDS_Y).getDoubleValue();
      Circle2D eventCircle=new Circle2D(targetRefUpperLeftLocation.x + targetDockersX,targetRefUpperLeftLocation.y + targetDockersY,targetDockersX);
      Collection<Point2D> intersections=eventCircle.intersections(lastLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
 else     if (DI_GATEWAY.contains(targetRefStencilId)) {
      Polyline2D gatewayRectangle=createGateway(targetRefUpperLeftLocation,targetRefLowerRightLocation);
      Collection<Point2D> intersections=gatewayRectangle.intersections(lastLine);
      Point2D intersection=intersections.iterator().next();
      createWayPoint(intersection.getX(),intersection.getY(),xtw);
    }
    xtw.writeEndElement();
  }
}
