{
  try {
    Task task=taskService.newTask();
    taskService.saveTask(task);
    taskService.setVariable(task.getId(),"var1",123);
    taskService.setVariable(task.getId(),"var2",456);
    taskService.setVariable(task.getId(),"var3",789);
    String tableName=managementService.getTableName(VariableInstanceEntity.class);
    CloseableHttpResponse response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TABLE_DATA,tableName)),HttpStatus.SC_OK);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals(3,responseNode.get("total").intValue());
    assertEquals(3,responseNode.get("size").intValue());
    assertEquals(0,responseNode.get("start").intValue());
    assertTrue(responseNode.get("order").isNull());
    assertTrue(responseNode.get("sort").isNull());
    ArrayNode rows=(ArrayNode)responseNode.get("data");
    assertNotNull(rows);
    assertEquals(3,rows.size());
    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TABLE_DATA,tableName) + "?orderAscendingColumn=LONG_"),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals(3,responseNode.get("total").intValue());
    assertEquals(3,responseNode.get("size").intValue());
    assertEquals(0,responseNode.get("start").intValue());
    assertEquals("asc",responseNode.get("order").textValue());
    assertEquals("LONG_",responseNode.get("sort").textValue());
    rows=(ArrayNode)responseNode.get("data");
    assertNotNull(rows);
    assertEquals(3,rows.size());
    assertEquals("var1",rows.get(0).get("NAME_").textValue());
    assertEquals("var2",rows.get(1).get("NAME_").textValue());
    assertEquals("var3",rows.get(2).get("NAME_").textValue());
    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TABLE_DATA,tableName) + "?orderDescendingColumn=LONG_"),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals(3,responseNode.get("total").intValue());
    assertEquals(3,responseNode.get("size").intValue());
    assertEquals(0,responseNode.get("start").intValue());
    assertEquals("desc",responseNode.get("order").textValue());
    assertEquals("LONG_",responseNode.get("sort").textValue());
    rows=(ArrayNode)responseNode.get("data");
    assertNotNull(rows);
    assertEquals(3,rows.size());
    assertEquals("var3",rows.get(0).get("NAME_").textValue());
    assertEquals("var2",rows.get(1).get("NAME_").textValue());
    assertEquals("var1",rows.get(2).get("NAME_").textValue());
    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_TABLE_DATA,tableName) + "?orderAscendingColumn=LONG_&start=1&size=1"),HttpStatus.SC_OK);
    responseNode=objectMapper.readTree(response.getEntity().getContent());
    closeResponse(response);
    assertNotNull(responseNode);
    assertEquals(3,responseNode.get("total").intValue());
    assertEquals(1,responseNode.get("size").intValue());
    assertEquals(1,responseNode.get("start").intValue());
    rows=(ArrayNode)responseNode.get("data");
    assertNotNull(rows);
    assertEquals(1,rows.size());
    assertEquals("var2",rows.get(0).get("NAME_").textValue());
  }
  finally {
    List<Task> tasks=taskService.createTaskQuery().list();
    for (    Task task : tasks) {
      taskService.deleteTask(task.getId(),true);
    }
  }
}
