{
  Date startTime=new Date();
  ProcessInstance pi=deployer.getProcessService().startProcessInstanceByKey("simpleSubProcessWithConcurrentTimer");
  TaskQuery taskQuery=deployer.getTaskService().createTaskQuery().processInstance(pi.getId()).orderAsc(TaskQuery.PROPERTY_NAME);
  Task subProcessTask=taskQuery.singleResult();
  assertEquals("Task in subprocess",subProcessTask.getName());
  ClockUtil.setCurrentTime(new Date(startTime.getTime() + (2 * 60 * 60* 1000) + 1000));
  new JobExecutorPoller(deployer.getJobExecutor(),deployer.getCommandExecutor()).waitForJobExecutorToProcessAllJobs(5000L,25L);
  List<Task> tasksAfterTimer=taskQuery.list();
  assertEquals(2,tasksAfterTimer.size());
  Task taskAfterTimer1=tasksAfterTimer.get(0);
  Task taskAfterTimer2=tasksAfterTimer.get(1);
  assertEquals("Task after timer 1",taskAfterTimer1.getName());
  assertEquals("Task after timer 2",taskAfterTimer2.getName());
  deployer.getTaskService().complete(taskAfterTimer1.getId());
  deployer.getTaskService().complete(taskAfterTimer2.getId());
  deployer.assertProcessEnded(pi.getId());
}
