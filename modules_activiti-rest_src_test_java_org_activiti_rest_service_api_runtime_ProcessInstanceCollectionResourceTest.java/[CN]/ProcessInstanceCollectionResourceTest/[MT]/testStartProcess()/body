{
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","processOne");
  HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION));
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  HttpResponse response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  ProcessInstance processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").textValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").textValue());
  assertFalse(responseNode.get("suspended").booleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,processInstance.getProcessDefinitionId())));
  runtimeService.deleteProcessInstance(processInstance.getId(),"testing");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",repositoryService.createProcessDefinitionQuery().processDefinitionKey("processOne").singleResult().getId());
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").textValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").textValue());
  assertFalse(responseNode.get("suspended").booleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,processInstance.getProcessDefinitionId())));
  runtimeService.deleteProcessInstance(processInstance.getId(),"testing");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("message","newInvoiceMessage");
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").textValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").textValue());
  assertFalse(responseNode.get("suspended").booleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,processInstance.getProcessDefinitionId())));
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",repositoryService.createProcessDefinitionQuery().processDefinitionKey("processOne").singleResult().getId());
  requestNode.put("businessKey","myBusinessKey");
  httpPost.setEntity(new StringEntity(requestNode.toString()));
  response=executeHttpRequest(httpPost,HttpStatus.SC_CREATED);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  assertNotNull(responseNode);
  assertEquals("myBusinessKey",responseNode.get("businessKey").textValue());
}
