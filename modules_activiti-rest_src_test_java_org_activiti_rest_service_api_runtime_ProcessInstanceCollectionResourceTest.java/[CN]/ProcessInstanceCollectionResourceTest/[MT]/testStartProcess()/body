{
  ClientResource client=getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION));
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionKey","processOne");
  Representation response=client.post(requestNode);
  assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
  ProcessInstance processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  JsonNode responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").getTextValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").getTextValue());
  assertFalse(responseNode.get("suspended").getBooleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,encode(processInstance.getProcessDefinitionId()))));
  runtimeService.deleteProcessInstance(processInstance.getId(),"testing");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",repositoryService.createProcessDefinitionQuery().processDefinitionKey("processOne").singleResult().getId());
  response=client.post(requestNode);
  assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
  processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").getTextValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").getTextValue());
  assertFalse(responseNode.get("suspended").getBooleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,encode(processInstance.getProcessDefinitionId()))));
  runtimeService.deleteProcessInstance(processInstance.getId(),"testing");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("message","newInvoiceMessage");
  response=client.post(requestNode);
  assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
  processInstance=runtimeService.createProcessInstanceQuery().singleResult();
  assertNotNull(processInstance);
  responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals(processInstance.getId(),responseNode.get("id").getTextValue());
  assertTrue(responseNode.get("businessKey").isNull());
  assertEquals("processTask",responseNode.get("activityId").getTextValue());
  assertFalse(responseNode.get("suspended").getBooleanValue());
  assertTrue(responseNode.get("url").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE,processInstance.getId())));
  assertTrue(responseNode.get("processDefinitionUrl").asText().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_DEFINITION,encode(processInstance.getProcessDefinitionId()))));
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processDefinitionId",repositoryService.createProcessDefinitionQuery().processDefinitionKey("processOne").singleResult().getId());
  requestNode.put("businessKey","myBusinessKey");
  response=client.post(requestNode);
  assertEquals(Status.SUCCESS_CREATED,client.getResponse().getStatus());
  responseNode=objectMapper.readTree(response.getStream());
  assertNotNull(responseNode);
  assertEquals("myBusinessKey",responseNode.get("businessKey").getTextValue());
}
