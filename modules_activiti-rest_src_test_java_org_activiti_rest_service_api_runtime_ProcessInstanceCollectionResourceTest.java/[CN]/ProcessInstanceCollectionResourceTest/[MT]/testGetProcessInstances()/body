{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("processOne","myBusinessKey");
  String id=processInstance.getId();
  runtimeService.addUserIdentityLink(id,"kermit","whatever");
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION);
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?id=" + id;
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?id=anotherId";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?businessKey=myBusinessKey";
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?businessKey=anotherBusinessKey";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?processDefinitionKey=processOne";
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?processDefinitionKey=processTwo";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?processDefinitionId=" + processInstance.getProcessDefinitionId();
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?processDefinitionId=anotherId";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?involvedUser=kermit";
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?involvedUser=gonzo";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?suspended=false";
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?suspended=true";
  assertResultsPresentInDataResponse(url);
  runtimeService.suspendProcessInstanceById(id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?suspended=true";
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?suspended=false";
  assertResultsPresentInDataResponse(url);
  runtimeService.activateProcessInstanceById(id);
  taskService.complete(taskService.createTaskQuery().processInstanceId(id).singleResult().getId());
  ProcessInstance subProcess=runtimeService.createProcessInstanceQuery().superProcessInstanceId(id).singleResult();
  assertNotNull(subProcess);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?superProcessInstanceId=" + id;
  assertResultsPresentInDataResponse(url,subProcess.getId());
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?superProcessInstanceId=anotherId";
  assertResultsPresentInDataResponse(url);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?subProcessInstanceId=" + subProcess.getId();
  assertResultsPresentInDataResponse(url,id);
  url=RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COLLECTION) + "?subProcessInstanceId=anotherId";
  assertResultsPresentInDataResponse(url);
}
