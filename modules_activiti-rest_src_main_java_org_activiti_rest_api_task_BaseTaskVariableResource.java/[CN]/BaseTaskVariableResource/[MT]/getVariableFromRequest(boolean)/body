{
  String taskId=getAttribute("taskId");
  if (taskId == null) {
    throw new ActivitiIllegalArgumentException("The taskId cannot be null");
  }
  String variableName=getAttribute("variableName");
  if (variableName == null) {
    throw new ActivitiIllegalArgumentException("The variableName cannot be null");
  }
  boolean variableFound=false;
  Object value=null;
  RestVariableScope variableScope=RestVariable.getScopeFromString(getQueryParameter("scope",getQuery()));
  if (variableScope == null) {
    if (ActivitiUtil.getTaskService().hasVariable(taskId,variableName)) {
      value=ActivitiUtil.getTaskService().getVariable(taskId,variableName);
      variableScope=RestVariableScope.LOCAL;
      variableFound=true;
    }
 else {
      Task task=ActivitiUtil.getTaskService().createTaskQuery().taskId(taskId).singleResult();
      if (task.getExecutionId() != null && ActivitiUtil.getRuntimeService().hasVariable(task.getExecutionId(),variableName)) {
        value=ActivitiUtil.getRuntimeService().getVariable(task.getExecutionId(),variableName);
        variableScope=RestVariableScope.GLOBAL;
        variableFound=true;
      }
    }
  }
 else   if (variableScope == RestVariableScope.GLOBAL) {
    Task task=ActivitiUtil.getTaskService().createTaskQuery().taskId(taskId).singleResult();
    if (task.getExecutionId() != null && ActivitiUtil.getRuntimeService().hasVariable(task.getExecutionId(),variableName)) {
      value=ActivitiUtil.getRuntimeService().getVariable(task.getExecutionId(),variableName);
      variableFound=true;
    }
  }
 else   if (variableScope == RestVariableScope.LOCAL) {
    if (ActivitiUtil.getTaskService().hasVariableLocal(taskId,variableName)) {
      value=ActivitiUtil.getTaskService().getVariableLocal(taskId,variableName);
      variableFound=true;
    }
  }
  if (!variableFound) {
    throw new ActivitiObjectNotFoundException("Task '" + taskId + "' doesn't have a variable with name: '"+ variableName+ "'.",VariableInstanceEntity.class);
  }
  return getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory().createRestVariable(this,variableName,value,variableScope,taskId,null,includeBinary);
}
