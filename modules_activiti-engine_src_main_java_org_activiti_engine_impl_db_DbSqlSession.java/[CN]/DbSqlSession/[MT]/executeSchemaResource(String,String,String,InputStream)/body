{
  log.info("performing {} on {} with resource {}",operation,component,resourceName);
  String sqlStatement=null;
  String exceptionSqlStatement=null;
  try {
    Connection connection=sqlSession.getConnection();
    Exception exception=null;
    byte[] bytes=IoUtil.readInputStream(inputStream,resourceName);
    String ddlStatements=new String(bytes);
    try {
      String databaseType=dbSqlSessionFactory.getDatabaseType();
      if (databaseType.equals("mysql")) {
        DatabaseMetaData databaseMetaData=connection.getMetaData();
        int majorVersion=databaseMetaData.getDatabaseMajorVersion();
        int minorVersion=databaseMetaData.getDatabaseMinorVersion();
        log.info("Found MySQL: majorVersion=" + majorVersion + " minorVersion="+ minorVersion);
        if (majorVersion <= 5 && minorVersion < 6) {
          ddlStatements=updateDdlForMySqlVersionLowerThan56(ddlStatements);
        }
      }
    }
 catch (    Exception e) {
      log.info("Could not get database metadata",e);
    }
    BufferedReader reader=new BufferedReader(new StringReader(ddlStatements));
    String line=readNextTrimmedLine(reader);
    while (line != null) {
      if (line.startsWith("# ")) {
        log.debug(line.substring(2));
      }
 else       if (line.startsWith("-- ")) {
        log.debug(line.substring(3));
      }
 else       if (line.startsWith("execute java ")) {
        String upgradestepClassName=line.substring(13).trim();
        DbUpgradeStep dbUpgradeStep=null;
        try {
          dbUpgradeStep=(DbUpgradeStep)ReflectUtil.instantiate(upgradestepClassName);
        }
 catch (        ActivitiException e) {
          throw new ActivitiException("database update java class '" + upgradestepClassName + "' can't be instantiated: "+ e.getMessage(),e);
        }
        try {
          log.debug("executing upgrade step java class {}",upgradestepClassName);
          dbUpgradeStep.execute(this);
        }
 catch (        Exception e) {
          throw new ActivitiException("error while executing database update java class '" + upgradestepClassName + "': "+ e.getMessage(),e);
        }
      }
 else       if (line.length() > 0) {
        if (line.endsWith(";")) {
          sqlStatement=addSqlStatementPiece(sqlStatement,line.substring(0,line.length() - 1));
          Statement jdbcStatement=connection.createStatement();
          try {
            log.debug("SQL: {}",sqlStatement);
            jdbcStatement.execute(sqlStatement);
            jdbcStatement.close();
          }
 catch (          Exception e) {
            if (exception == null) {
              exception=e;
              exceptionSqlStatement=sqlStatement;
            }
            log.error("problem during schema {}, statement {}",operation,sqlStatement,e);
          }
 finally {
            sqlStatement=null;
          }
        }
 else {
          sqlStatement=addSqlStatementPiece(sqlStatement,line);
        }
      }
      line=readNextTrimmedLine(reader);
    }
    if (exception != null) {
      throw exception;
    }
    log.debug("activiti db schema {} for component {} successful",operation,component);
  }
 catch (  Exception e) {
    throw new ActivitiException("couldn't " + operation + " db schema: "+ exceptionSqlStatement,e);
  }
}
