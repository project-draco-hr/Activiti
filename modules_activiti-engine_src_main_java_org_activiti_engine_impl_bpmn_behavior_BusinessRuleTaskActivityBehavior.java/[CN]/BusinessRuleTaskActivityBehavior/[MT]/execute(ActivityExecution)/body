{
  String processDefinitionID=execution.getActivity().getProcessDefinition().getId();
  ProcessDefinitionEntity definitionEntity=CommandContext.getCurrent().getRepositorySession().findDeployedProcessDefinitionById(processDefinitionID);
  String deploymentID=definitionEntity.getDeploymentId();
  DeploymentEntity deploymentEntity=CommandContext.getCurrent().getRepositorySession().findDeploymentById(deploymentID);
  KnowledgeBase knowledgeBase=RulesHelper.findLatestKnowledgeBaseByDeploymentName(deploymentEntity.getName());
  StatefulKnowledgeSession ksession=knowledgeBase.newStatefulKnowledgeSession();
  if (variablesInputExpressions != null) {
    Iterator<Expression> itVariable=variablesInputExpressions.iterator();
    while (itVariable.hasNext()) {
      Expression variable=itVariable.next();
      ksession.insert(variable.getValue(execution));
    }
  }
  if (rulesExpressions.size() > 0) {
    RulesAgendaFilter filter=new RulesAgendaFilter();
    Iterator<Expression> itRuleNames=rulesExpressions.iterator();
    while (itRuleNames.hasNext()) {
      Expression ruleName=itRuleNames.next();
      filter.addSuffic(ruleName.getValue(execution).toString());
    }
    filter.setAccept(exclude);
    ksession.fireAllRules(filter);
  }
 else {
    ksession.fireAllRules();
  }
  Collection<Object> ruleOutputObjects=ksession.getObjects();
  if (ruleOutputObjects != null && ruleOutputObjects.size() > 0) {
    Collection<Object> outputVariables=new ArrayList<Object>();
    for (    Object object : ruleOutputObjects) {
      outputVariables.add(object);
    }
    execution.setVariable(resultVariable,outputVariables);
  }
  ksession.dispose();
  leave(execution);
}
