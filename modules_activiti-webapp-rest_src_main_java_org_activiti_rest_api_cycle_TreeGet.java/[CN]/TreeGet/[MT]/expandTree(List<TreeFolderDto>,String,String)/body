{
  TreeFolderDto connectorRootNode=null;
  for (  TreeFolderDto treeFolderDto : tree) {
    if (treeFolderDto.getConnectorId().equals(connectorId)) {
      connectorRootNode=treeFolderDto;
      connectorRootNode.setExpanded(String.valueOf(Boolean.TRUE));
      break;
    }
  }
  expandNode(connectorRootNode,false,connectorId);
  if (!nodeId.equals(connectorRootNode.getArtifactId())) {
    RepositoryNode node=repositoryService.getRepositoryNode(connectorId,nodeId);
    TreeNodeDto treeNodeDtoForTheCurrentNode=getTreeNodeDto(node,false);
    if (treeNodeDtoForTheCurrentNode instanceof TreeFolderDto) {
      expandNode((TreeFolderDto)treeNodeDtoForTheCurrentNode,false,connectorId);
    }
    String parentId=node.getMetadata().getParentFolderId();
    while (parentId != null && parentId.length() > 0 && parentId != connectorRootNode.getArtifactId()) {
      RepositoryNode parentNode=repositoryService.getRepositoryNode(connectorId,parentId);
      TreeFolderDto parentTreeNode=(TreeFolderDto)getTreeNodeDto(parentNode,true);
      expandNode(parentTreeNode,false,connectorId);
      parentTreeNode.replaceNode(treeNodeDtoForTheCurrentNode);
      treeNodeDtoForTheCurrentNode=parentTreeNode;
      parentId=parentNode.getMetadata().getParentFolderId();
    }
    connectorRootNode.replaceNode(treeNodeDtoForTheCurrentNode);
  }
}
