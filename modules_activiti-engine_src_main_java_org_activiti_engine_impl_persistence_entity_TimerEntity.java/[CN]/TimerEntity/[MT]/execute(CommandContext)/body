{
  super.execute(commandContext);
  if (jobHandlerType.equalsIgnoreCase(TimerExecuteNestedActivityJobHandler.TYPE)) {
    JSONObject cfgJson=new JSONObject(jobHandlerConfiguration);
    String nestedActivityId=(String)cfgJson.get(TimerExecuteNestedActivityJobHandler.PROPERTYNAME_TIMER_ACTIVITY_ID);
    if (cfgJson.has(TimerExecuteNestedActivityJobHandler.PROPERTYNAME_END_DATE_EXPRESSION)) {
      String endDateExpressionString=(String)cfgJson.get(TimerExecuteNestedActivityJobHandler.PROPERTYNAME_END_DATE_EXPRESSION);
      Expression endDateExpression=Context.getProcessEngineConfiguration().getExpressionManager().createExpression(endDateExpressionString);
      String endDateString=null;
      BusinessCalendar businessCalendar=Context.getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(CycleBusinessCalendar.NAME);
      VariableScope executionEntity=commandContext.getExecutionEntityManager().findExecutionById(this.getExecutionId());
      if (executionEntity == null) {
        executionEntity=NoExecutionVariableScope.getSharedInstance();
      }
      if (endDateExpression != null) {
        Object endDateValue=endDateExpression.getValue(executionEntity);
        if (endDateValue instanceof String) {
          endDateString=(String)endDateValue;
        }
 else         if (endDateValue instanceof Date) {
          endDate=(Date)endDateValue;
        }
 else {
          throw new ActivitiException("Timer '" + ((ExecutionEntity)executionEntity).getActivityId() + "' was not configured with a valid duration/time, either hand in a java.util.Date or a String in format 'yyyy-MM-dd'T'hh:mm:ss'");
        }
        if (endDate == null) {
          endDate=businessCalendar.resolveEndDate(endDateString);
        }
      }
    }
  }
  if (repeat == null) {
    if (log.isDebugEnabled()) {
      log.debug("Timer {} fired. Deleting timer.",getId());
    }
    delete();
  }
 else {
    delete();
    int repeatValue=calculateRepeatValue();
    if (repeatValue != 0) {
      if (repeatValue > 0) {
        setNewRepeat(repeatValue);
      }
      Date newTimer=calculateRepeat();
      if (newTimer != null && isValidTime(newTimer)) {
        TimerEntity te=new TimerEntity(this);
        te.setDuedate(newTimer);
        Context.getCommandContext().getJobEntityManager().schedule(te);
      }
    }
  }
}
