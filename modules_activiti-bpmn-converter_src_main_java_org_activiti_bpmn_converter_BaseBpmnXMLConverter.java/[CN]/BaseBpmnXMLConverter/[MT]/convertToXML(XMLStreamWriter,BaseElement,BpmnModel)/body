{
  this.model=model;
  xtw.writeStartElement(getXMLElementName());
  boolean didWriteExtensionStartElement=false;
  writeDefaultAttribute(ATTRIBUTE_ID,baseElement.getId(),xtw);
  if (baseElement instanceof FlowElement) {
    writeDefaultAttribute(ATTRIBUTE_NAME,((FlowElement)baseElement).getName(),xtw);
  }
  if (baseElement instanceof Activity) {
    final Activity activity=(Activity)baseElement;
    if (activity.isAsynchronous()) {
      writeQualifiedAttribute(ATTRIBUTE_ACTIVITY_ASYNCHRONOUS,ATTRIBUTE_VALUE_TRUE,xtw);
    }
    if (activity.isNotExclusive()) {
      writeQualifiedAttribute(ATTRIBUTE_ACTIVITY_EXCLUSIVE,ATTRIBUTE_VALUE_FALSE,xtw);
    }
    if (StringUtils.isNotEmpty(activity.getDefaultFlow())) {
      FlowElement defaultFlowElement=model.getFlowElement(activity.getDefaultFlow());
      if (defaultFlowElement != null && defaultFlowElement instanceof SequenceFlow) {
        writeDefaultAttribute(ATTRIBUTE_DEFAULT,activity.getDefaultFlow(),xtw);
      }
    }
  }
  if (baseElement instanceof Gateway) {
    final Gateway gateway=(Gateway)baseElement;
    if (StringUtils.isNotEmpty(gateway.getDefaultFlow())) {
      FlowElement defaultFlowElement=model.getFlowElement(gateway.getDefaultFlow());
      if (defaultFlowElement != null && defaultFlowElement instanceof SequenceFlow) {
        writeDefaultAttribute(ATTRIBUTE_DEFAULT,gateway.getDefaultFlow(),xtw);
      }
    }
  }
  writeAdditionalAttributes(baseElement,xtw);
  if (baseElement instanceof FlowElement) {
    final FlowElement flowElement=(FlowElement)baseElement;
    if (StringUtils.isNotEmpty(flowElement.getDocumentation())) {
      xtw.writeStartElement(ELEMENT_DOCUMENTATION);
      xtw.writeCharacters(flowElement.getDocumentation());
      xtw.writeEndElement();
    }
  }
  didWriteExtensionStartElement=writeExtensionChildElements(baseElement,didWriteExtensionStartElement,xtw);
  didWriteExtensionStartElement=writeListeners(baseElement,didWriteExtensionStartElement,xtw);
  didWriteExtensionStartElement=BpmnXMLUtil.writeExtensionElements(baseElement,didWriteExtensionStartElement,xtw);
  if (didWriteExtensionStartElement) {
    xtw.writeEndElement();
  }
  if (baseElement instanceof Activity) {
    final Activity activity=(Activity)baseElement;
    MultiInstanceExport.writeMultiInstance(activity,xtw);
  }
  writeAdditionalChildElements(baseElement,xtw);
  xtw.writeEndElement();
}
