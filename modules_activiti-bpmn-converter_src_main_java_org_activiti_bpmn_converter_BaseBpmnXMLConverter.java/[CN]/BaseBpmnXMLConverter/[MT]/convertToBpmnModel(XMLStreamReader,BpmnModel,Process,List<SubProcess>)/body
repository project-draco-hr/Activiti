{
  String elementId=xtr.getAttributeValue(null,ATTRIBUTE_ID);
  String elementName=xtr.getAttributeValue(null,ATTRIBUTE_NAME);
  boolean async=parseAsync(xtr);
  boolean notExclusive=parseNotExclusive(xtr);
  String defaultFlow=xtr.getAttributeValue(null,ATTRIBUTE_DEFAULT);
  boolean isForCompensation=parseForCompensation(xtr);
  BaseElement parsedElement=convertXMLToElement(xtr,model);
  if (parsedElement instanceof Artifact) {
    Artifact currentArtifact=(Artifact)parsedElement;
    currentArtifact.setId(elementId);
    if (isInSubProcess(activeSubProcessList)) {
      final SubProcess currentSubProcess=activeSubProcessList.get(activeSubProcessList.size() - 2);
      currentSubProcess.addArtifact(currentArtifact);
    }
 else {
      activeProcess.addArtifact(currentArtifact);
    }
  }
  if (parsedElement instanceof FlowElement) {
    FlowElement currentFlowElement=(FlowElement)parsedElement;
    currentFlowElement.setId(elementId);
    currentFlowElement.setName(elementName);
    if (currentFlowElement instanceof Activity) {
      Activity activity=(Activity)currentFlowElement;
      activity.setAsynchronous(async);
      activity.setNotExclusive(notExclusive);
      activity.setForCompensation(isForCompensation);
      if (StringUtils.isNotEmpty(defaultFlow)) {
        activity.setDefaultFlow(defaultFlow);
      }
    }
    if (currentFlowElement instanceof Gateway) {
      Gateway gateway=(Gateway)currentFlowElement;
      if (StringUtils.isNotEmpty(defaultFlow)) {
        gateway.setDefaultFlow(defaultFlow);
      }
      gateway.setAsynchronous(async);
      gateway.setNotExclusive(notExclusive);
    }
    if (currentFlowElement instanceof DataObject) {
      if (!activeSubProcessList.isEmpty()) {
        activeSubProcessList.get(activeSubProcessList.size() - 1).getDataObjects().add((ValuedDataObject)parsedElement);
      }
 else {
        activeProcess.getDataObjects().add((ValuedDataObject)parsedElement);
      }
    }
    if (!activeSubProcessList.isEmpty()) {
      activeSubProcessList.get(activeSubProcessList.size() - 1).addFlowElement(currentFlowElement);
    }
 else {
      activeProcess.addFlowElement(currentFlowElement);
    }
  }
}
