{
  int minX=Integer.MAX_VALUE;
  int maxX=0;
  for (int i=2; i < waypoints.length; i+=2) {
    if (i < waypoints.length - 2) {
      processDiagramCanvas.drawSequenceflowWithoutArrow(waypoints[i - 2],waypoints[i - 1],waypoints[i],waypoints[i + 1],false);
    }
 else {
      processDiagramCanvas.drawSequenceflow(waypoints[i - 2],waypoints[i - 1],waypoints[i],waypoints[i + 1],false);
    }
    if (waypoints[i - 2] < minX || waypoints[i] < minX) {
      minX=Math.min(waypoints[i - 2],waypoints[i]);
    }
    if (waypoints[i - 2] > maxX || waypoints[i] > maxX) {
      maxX=Math.max(waypoints[i - 2],waypoints[i]);
    }
  }
  currentWidth+=maxX - minX;
  BPMNEdge edge=new BPMNEdge();
  edge.setId(sequenceFlow.getId() + "_edge");
  edge.setBpmnElement(sequenceFlow);
  for (int i=0; i < waypoints.length; i+=2) {
    edge.getWaypoint().add(new Point(waypoints[i],waypoints[i + 1]));
  }
  plane.getDiagramElement().add(edge);
}
