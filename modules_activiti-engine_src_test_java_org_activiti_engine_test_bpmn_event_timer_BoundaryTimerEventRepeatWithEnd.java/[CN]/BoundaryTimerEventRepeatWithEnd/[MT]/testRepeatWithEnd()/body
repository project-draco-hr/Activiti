{
  Calendar calendar=Calendar.getInstance();
  Date baseTime=calendar.getTime();
  calendar.add(Calendar.MINUTE,20);
  DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
  DateTime dt=new DateTime(calendar.getTime());
  String dateStr=fmt.print(dt);
  Calendar nextTimeCal=Calendar.getInstance();
  nextTimeCal.setTime(baseTime);
  processEngineConfiguration.getClock().setCurrentTime(nextTimeCal.getTime());
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("repeatWithEnd");
  runtimeService.setVariable(processInstance.getId(),"EndDateForBoundary",dateStr);
  List<Task> tasks=taskService.createTaskQuery().list();
  assertEquals(1,tasks.size());
  Task task=tasks.get(0);
  assertEquals("Task A",task.getName());
  taskService.complete(task.getId());
  List<Job> jobs=managementService.createJobQuery().list();
  assertEquals(1,jobs.size());
  try {
    waitForJobExecutorToProcessAllJobs(2000,200);
    fail("a new job must be prepared because there are 20 repeats 2 seconds interval");
  }
 catch (  Exception ex) {
  }
  nextTimeCal.add(Calendar.MINUTE,15);
  processEngineConfiguration.getClock().setCurrentTime(nextTimeCal.getTime());
  try {
    waitForJobExecutorToProcessAllJobs(2000,200);
    fail("a new job must be prepared because there are 20 repeats 2 seconds interval");
  }
 catch (  Exception ex) {
  }
  nextTimeCal.add(Calendar.MINUTE,5);
  nextTimeCal.add(Calendar.SECOND,1);
  processEngineConfiguration.getClock().setCurrentTime(nextTimeCal.getTime());
  try {
    waitForJobExecutorToProcessAllJobs(2000,200);
  }
 catch (  Exception ex) {
    fail("Should not have any other jobs because the endDate is reached");
  }
  tasks=taskService.createTaskQuery().list();
  task=tasks.get(0);
  assertEquals("Task B",task.getName());
  assertEquals(1,tasks.size());
  taskService.complete(task.getId());
  try {
    waitForJobExecutorToProcessAllJobs(2000,500);
  }
 catch (  Exception e) {
    fail("No jobs should be active here.");
  }
}
