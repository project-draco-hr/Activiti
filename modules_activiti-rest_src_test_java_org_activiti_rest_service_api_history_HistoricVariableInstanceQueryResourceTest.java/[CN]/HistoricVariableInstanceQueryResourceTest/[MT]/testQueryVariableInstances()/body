{
  HashMap<String,Object> processVariables=new HashMap<String,Object>();
  processVariables.put("stringVar","Azerty");
  processVariables.put("intVar",67890);
  processVariables.put("booleanVar",false);
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.complete(task.getId());
  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
  taskService.setVariableLocal(task.getId(),"taskVariable","test");
  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("oneTaskProcess",processVariables);
  String url=RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_VARIABLE_INSTANCE_QUERY);
  ObjectNode requestNode=objectMapper.createObjectNode();
  requestNode.put("variableName","stringVar");
  assertResultsPresentInDataResponse(url,requestNode,2,"stringVar","Azerty");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("variableName","booleanVar");
  assertResultsPresentInDataResponse(url,requestNode,2,"booleanVar",false);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("variableName","booleanVar2");
  assertResultsPresentInDataResponse(url,requestNode,0,null,null);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processInstanceId",processInstance.getId());
  assertResultsPresentInDataResponse(url,requestNode,4,"taskVariable","test");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processInstanceId",processInstance.getId());
  requestNode.put("excludeTaskVariables",true);
  assertResultsPresentInDataResponse(url,requestNode,3,"intVar",67890);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("processInstanceId",processInstance2.getId());
  assertResultsPresentInDataResponse(url,requestNode,3,"stringVar","Azerty");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskId",task.getId());
  assertResultsPresentInDataResponse(url,requestNode,1,"taskVariable","test");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("taskId",task.getId());
  requestNode.put("variableName","booleanVar");
  assertResultsPresentInDataResponse(url,requestNode,0,null,null);
  requestNode=objectMapper.createObjectNode();
  requestNode.put("variableNameLike","%Var");
  assertResultsPresentInDataResponse(url,requestNode,6,"stringVar","Azerty");
  requestNode=objectMapper.createObjectNode();
  requestNode.put("variableNameLike","%Var2");
  assertResultsPresentInDataResponse(url,requestNode,0,null,null);
  requestNode=objectMapper.createObjectNode();
  ArrayNode variableArray=objectMapper.createArrayNode();
  ObjectNode variableNode=objectMapper.createObjectNode();
  variableArray.add(variableNode);
  requestNode.put("variables",variableArray);
  variableNode.put("name","stringVar");
  variableNode.put("value","Azerty");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,2,"stringVar","Azerty");
  variableNode.removeAll();
  requestNode.put("variables",variableArray);
  variableNode.put("name","taskVariable");
  variableNode.put("value","test");
  variableNode.put("operation","equals");
  assertResultsPresentInDataResponse(url,requestNode,1,"taskVariable","test");
  variableNode.removeAll();
  requestNode.put("variables",variableArray);
  variableNode.put("name","taskVariable");
  variableNode.put("value","test");
  variableNode.put("operation","notEquals");
  assertErrorResult(url,requestNode,HttpStatus.SC_BAD_REQUEST);
}
