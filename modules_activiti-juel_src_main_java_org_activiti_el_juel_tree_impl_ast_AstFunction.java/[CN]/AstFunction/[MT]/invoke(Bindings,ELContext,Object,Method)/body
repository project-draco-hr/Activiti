{
  Class<?>[] types=method.getParameterTypes();
  Object[] params=null;
  if (types.length > 0) {
    params=new Object[types.length];
    if (varargs && method.isVarArgs()) {
      for (int i=0; i < params.length - 1; i++) {
        Object param=getParam(i).eval(bindings,context);
        if (param != null || types[i].isPrimitive()) {
          params[i]=bindings.convert(param,types[i]);
        }
      }
      int varargIndex=types.length - 1;
      Class<?> varargType=types[varargIndex].getComponentType();
      int length=getParamCount() - varargIndex;
      Object array=null;
      if (length == 1) {
        Object param=getParam(varargIndex).eval(bindings,context);
        if (param != null && param.getClass().isArray()) {
          if (types[varargIndex].isInstance(param)) {
            array=param;
          }
 else {
            length=Array.getLength(param);
            array=Array.newInstance(varargType,length);
            for (int i=0; i < length; i++) {
              Object elem=Array.get(param,i);
              if (elem != null || varargType.isPrimitive()) {
                Array.set(array,i,bindings.convert(elem,varargType));
              }
            }
          }
        }
 else {
          array=Array.newInstance(varargType,1);
          if (param != null || varargType.isPrimitive()) {
            Array.set(array,0,bindings.convert(param,varargType));
          }
        }
      }
 else {
        array=Array.newInstance(varargType,length);
        for (int i=0; i < length; i++) {
          Object param=getParam(varargIndex + i).eval(bindings,context);
          if (param != null || varargType.isPrimitive()) {
            Array.set(array,i,bindings.convert(param,varargType));
          }
        }
      }
      params[varargIndex]=array;
    }
 else {
      for (int i=0; i < params.length; i++) {
        Object param=getParam(i).eval(bindings,context);
        if (param != null || types[i].isPrimitive()) {
          params[i]=bindings.convert(param,types[i]);
        }
      }
    }
  }
  return method.invoke(base,params);
}
