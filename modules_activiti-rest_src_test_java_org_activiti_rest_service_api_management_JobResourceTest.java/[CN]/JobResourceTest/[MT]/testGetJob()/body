{
  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("timerProcess");
  Job timerJob=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();
  assertNotNull(timerJob);
  Calendar now=Calendar.getInstance();
  now.set(Calendar.MILLISECOND,0);
  processEngineConfiguration.getClock().setCurrentTime(now.getTime());
  CloseableHttpResponse response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB,timerJob.getId())),HttpStatus.SC_OK);
  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals(timerJob.getId(),responseNode.get("id").textValue());
  assertEquals(timerJob.getExceptionMessage(),responseNode.get("exceptionMessage").textValue());
  assertEquals(timerJob.getExecutionId(),responseNode.get("executionId").textValue());
  assertEquals(timerJob.getProcessDefinitionId(),responseNode.get("processDefinitionId").textValue());
  assertEquals(timerJob.getProcessInstanceId(),responseNode.get("processInstanceId").textValue());
  assertEquals(timerJob.getRetries(),responseNode.get("retries").intValue());
  assertEquals(timerJob.getDuedate(),getDateFromISOString(responseNode.get("dueDate").textValue()));
  assertEquals(responseNode.get("tenantId").textValue(),"");
  managementService.executeCommand(new ChangeDeploymentTenantIdCmd(deploymentId,"myTenant"));
  response=executeRequest(new HttpGet(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB,timerJob.getId())),HttpStatus.SC_OK);
  responseNode=objectMapper.readTree(response.getEntity().getContent());
  closeResponse(response);
  assertNotNull(responseNode);
  assertEquals("myTenant",responseNode.get("tenantId").textValue());
}
