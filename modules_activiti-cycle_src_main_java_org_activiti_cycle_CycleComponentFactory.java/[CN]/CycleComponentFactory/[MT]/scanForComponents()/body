{
  AnnotationDB db=new AnnotationDB();
  URL[] urls=null;
  if (servletContext == null) {
    urls=ClasspathUrlFinder.findClassPaths();
    logger.log(Level.INFO,"Activiti Cycle Plugin finder uses normal classpath");
  }
 else {
    urls=WarUrlFinder.findWebInfLibClasspaths(servletContext);
  }
  try {
    db.scanArchives(urls);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,"Cannot scan for components: " + e.getMessage(),e);
    return;
  }
  Set<String> componentClassNames=db.getAnnotationIndex().get(CycleComponent.class.getName());
  if (componentClassNames == null || componentClassNames.size() == 0) {
    logger.log(Level.WARNING,"Cannot find any Cycle plugins having annotation " + CycleComponent.class.getName());
  }
 else {
    for (    String componentClassName : componentClassNames) {
      Class<?> cycleComponentClass;
      try {
        cycleComponentClass=this.getClass().getClassLoader().loadClass(componentClassName);
        registerComponent(cycleComponentClass);
      }
 catch (      ClassNotFoundException e) {
        logger.log(Level.WARNING,"Cannot find class for '" + componentClassName + "': "+ e.getMessage(),e);
      }
    }
  }
}
