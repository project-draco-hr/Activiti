{
  Set<Class> interfaces=new HashSet<Class>();
  Class<?> superClass=instanceToDecorate.getClass();
  while (superClass != null && !superClass.equals(Object.class)) {
    interfaces.addAll(Arrays.asList(superClass.getInterfaces()));
    superClass=superClass.getSuperclass();
  }
  if (interfaces.size() == 0) {
    throw new RuntimeException("Cannot decorate instance '" + instanceToDecorate + "'. Implements no interfaces.");
  }
  Interceptor[] interceptorInstances=new Interceptor[interceptorClasses.length];
  for (int i=0; i < interceptorClasses.length; i++) {
    Class<? extends Interceptor> interceptorClass=interceptorClasses[i];
    Interceptor interceptorInstance=interceptorClass.newInstance();
    interceptorInstances[i]=interceptorInstance;
  }
  InvocationHandler invocationHandler=new CycleComponentInvocationHandler(instanceToDecorate,interceptorInstances);
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  return Proxy.newProxyInstance(classLoader,interfaces.toArray(new Class<?>[0]),invocationHandler);
}
