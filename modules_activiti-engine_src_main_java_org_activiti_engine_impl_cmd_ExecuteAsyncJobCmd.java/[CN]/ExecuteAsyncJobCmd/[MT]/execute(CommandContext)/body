{
  if (job == null) {
    throw new ActivitiIllegalArgumentException("job is null");
  }
  if (log.isDebugEnabled()) {
    log.debug("Executing async job {}",job.getId());
  }
  String processInstanceId=null;
  if (job.isExclusive()) {
    try {
      ExecutionEntity execution=commandContext.getExecutionEntityManager().findExecutionById(job.getExecutionId());
      if (execution != null) {
        processInstanceId=execution.getProcessInstanceId();
        commandContext.getExecutionEntityManager().updateProcessInstanceLockTime(processInstanceId);
      }
    }
 catch (    ActivitiOptimisticLockingException optimisticLockingException) {
      if (log.isDebugEnabled()) {
        log.debug("Optimistic locking exception during exclusive job acquisition. If you have multiple job executors running against the same database, " + "this exception means that this thread tried to acquire an exclusive job, which already was changed by another async executor thread." + "This is expected behavior in a clustered environment. "+ "You can ignore this message if you indeed have multiple job executor acquisition threads running against the same database. "+ "Exception message: {}",optimisticLockingException.getMessage());
      }
      commandContext.getJobEntityManager().retryAsyncJob(job);
    }
  }
  try {
    job.execute(commandContext);
    if (commandContext.getEventDispatcher().isEnabled()) {
      commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_EXECUTION_SUCCESS,job));
    }
    if (job.isExclusive() && processInstanceId != null) {
      try {
        commandContext.getExecutionEntityManager().clearProcessInstanceLockTime(processInstanceId);
      }
 catch (      Throwable t) {
        log.error("Process instance lock could not be released!" + "Exception message: {}",t.getMessage());
      }
    }
  }
 catch (  Throwable exception) {
    CommandExecutor commandExecutor=Context.getProcessEngineConfiguration().getCommandExecutor();
    commandContext.getTransactionContext().addTransactionListener(TransactionState.ROLLED_BACK,new FailedJobListener(commandExecutor,job.getId(),exception));
    if (commandContext.getEventDispatcher().isEnabled()) {
      try {
        commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityExceptionEvent(ActivitiEventType.JOB_EXECUTION_FAILURE,job,exception));
      }
 catch (      Throwable ignore) {
        log.warn("Exception occured while dispatching job failure event, ignoring.",ignore);
      }
    }
    throw new ActivitiException("Job " + job.getId() + " failed",exception);
  }
  return null;
}
