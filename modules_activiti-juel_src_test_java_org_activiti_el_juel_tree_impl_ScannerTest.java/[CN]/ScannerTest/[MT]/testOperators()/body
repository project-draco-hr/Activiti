{
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,MUL,END_EVAL},symbols("${*}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,DIV,END_EVAL},symbols("${/}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,MOD,END_EVAL},symbols("${%}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,PLUS,END_EVAL},symbols("${+}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,MINUS,END_EVAL},symbols("${-}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,QUESTION,END_EVAL},symbols("${?}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,COLON,END_EVAL},symbols("${:}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LBRACK,END_EVAL},symbols("${[}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,RBRACK,END_EVAL},symbols("${]}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LPAREN,END_EVAL},symbols("${(}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,RPAREN,END_EVAL},symbols("${)}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,COMMA,END_EVAL},symbols("${,}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,DOT,END_EVAL},symbols("${.}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,AND,END_EVAL},symbols("${&&}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,OR,END_EVAL},symbols("${||}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,NOT,END_EVAL},symbols("${!}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LE,END_EVAL},symbols("${<=}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LT,END_EVAL},symbols("${<}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,EQ,END_EVAL},symbols("${==}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,NE,END_EVAL},symbols("${!=}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,GE,END_EVAL},symbols("${>=}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,GT,END_EVAL},symbols("${>}"));
  try {
    symbols("${&)");
    fail();
  }
 catch (  ScanException e) {
  }
  try {
    symbols("${|)");
    fail();
  }
 catch (  ScanException e) {
  }
  try {
    symbols("${=)");
    fail();
  }
 catch (  ScanException e) {
  }
}
