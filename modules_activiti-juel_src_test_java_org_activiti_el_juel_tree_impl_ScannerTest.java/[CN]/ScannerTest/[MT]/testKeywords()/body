{
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,NULL,END_EVAL},symbols("${null}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,TRUE,END_EVAL},symbols("${true}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,FALSE,END_EVAL},symbols("${false}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,EMPTY,END_EVAL},symbols("${empty}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,DIV,END_EVAL},symbols("${div}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,MOD,END_EVAL},symbols("${mod}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,NOT,END_EVAL},symbols("${not}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,AND,END_EVAL},symbols("${and}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,OR,END_EVAL},symbols("${or}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LE,END_EVAL},symbols("${le}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,LT,END_EVAL},symbols("${lt}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,EQ,END_EVAL},symbols("${eq}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,NE,END_EVAL},symbols("${ne}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,GE,END_EVAL},symbols("${ge}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,GT,END_EVAL},symbols("${gt}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,INSTANCEOF,END_EVAL},symbols("${instanceof}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,IDENTIFIER,END_EVAL},symbols("${xnull}"));
  assertEquals(new Symbol[]{START_EVAL_DYNAMIC,IDENTIFIER,END_EVAL},symbols("${nullx}"));
}
