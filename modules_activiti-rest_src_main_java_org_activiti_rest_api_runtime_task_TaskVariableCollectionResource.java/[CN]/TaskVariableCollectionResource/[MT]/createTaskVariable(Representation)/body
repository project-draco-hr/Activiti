{
  if (authenticate() == false)   return null;
  Task task=getTaskFromRequest();
  Object result=null;
  if (MediaType.MULTIPART_FORM_DATA.isCompatible(representation.getMediaType())) {
    result=setBinaryVariable(representation,task,true);
  }
 else {
    try {
      List<RestVariable> variables=new ArrayList<RestVariable>();
      result=variables;
      RestVariable[] restVariables=getConverterService().toObject(representation,RestVariable[].class,this);
      if (restVariables == null || restVariables.length == 0) {
        throw new ActivitiIllegalArgumentException("Request didn't cantain a list of variables to create.");
      }
      RestVariableScope sharedScope=null;
      RestVariableScope varScope=null;
      Map<String,Object> variablesToSet=new HashMap<String,Object>();
      RestResponseFactory factory=getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory();
      for (      RestVariable var : restVariables) {
        varScope=var.getVariableScope();
        if (var.getName() == null) {
          throw new ActivitiIllegalArgumentException("Variable name is required");
        }
        if (varScope == null) {
          varScope=RestVariableScope.LOCAL;
        }
        if (sharedScope == null) {
          sharedScope=varScope;
        }
        if (varScope != sharedScope) {
          throw new ActivitiIllegalArgumentException("Only allowed to update multiple variables in the same scope.");
        }
        if (hasVariableOnScope(task,var.getName(),varScope)) {
          throw new ResourceException(new Status(Status.CLIENT_ERROR_CONFLICT.getCode(),"Variable '" + var.getName() + "' is already present on task '"+ task.getId()+ "'.",null,null));
        }
        Object actualVariableValue=getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory().getVariableValue(var);
        variablesToSet.put(var.getName(),actualVariableValue);
        variables.add(factory.createRestVariable(this,var.getName(),actualVariableValue,varScope,task.getId(),RestResponseFactory.VARIABLE_TASK,false));
      }
      if (variablesToSet.size() > 0) {
        if (sharedScope == RestVariableScope.LOCAL) {
          ActivitiUtil.getTaskService().setVariablesLocal(task.getId(),variablesToSet);
        }
 else {
          if (task.getExecutionId() != null) {
            ActivitiUtil.getRuntimeService().setVariables(task.getExecutionId(),variablesToSet);
          }
 else {
            throw new ActivitiIllegalArgumentException("Cannot set global variables on task '" + task.getId() + "', task is not part of process.");
          }
        }
      }
    }
 catch (    IOException ioe) {
      throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,ioe);
    }
  }
  setStatus(Status.SUCCESS_CREATED);
  return result;
}
