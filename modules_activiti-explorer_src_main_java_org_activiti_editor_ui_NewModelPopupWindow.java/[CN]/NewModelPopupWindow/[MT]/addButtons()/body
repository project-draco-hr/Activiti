{
  Button createButton=new Button(i18nManager.getMessage(Messages.PROCESS_NEW_POPUP_CREATE_BUTTON));
  createButton.setWidth("200px");
  createButton.addListener(new ClickListener(){
    private static final long serialVersionUID=1L;
    public void buttonClick(    ClickEvent event){
      if (StringUtils.isEmpty((String)nameTextField.getValue())) {
        nameTextField.setComponentError(new UserError("The name field is required."));
        return;
      }
      if (selectEditorComponent.isModelerPreferred()) {
        try {
          ObjectMapper objectMapper=new ObjectMapper();
          ObjectNode editorNode=objectMapper.createObjectNode();
          editorNode.put("id","canvas");
          editorNode.put("resourceId","canvas");
          ObjectNode stencilSetNode=objectMapper.createObjectNode();
          stencilSetNode.put("namespace","http://b3mn.org/stencilset/bpmn2.0#");
          editorNode.put("stencilset",stencilSetNode);
          Model modelData=repositoryService.newModel();
          ObjectNode modelObjectNode=objectMapper.createObjectNode();
          modelObjectNode.put(MODEL_NAME,(String)nameTextField.getValue());
          modelObjectNode.put(MODEL_REVISION,1);
          String description=null;
          if (StringUtils.isNotEmpty((String)descriptionTextArea.getValue())) {
            description=(String)descriptionTextArea.getValue();
          }
 else {
            description="";
          }
          modelObjectNode.put(MODEL_DESCRIPTION,description);
          modelData.setMetaInfo(modelObjectNode.toString());
          modelData.setName((String)nameTextField.getValue());
          repositoryService.saveModel(modelData);
          repositoryService.addModelEditorSource(modelData.getId(),editorNode.toString().getBytes("utf-8"));
          close();
          ExplorerApp.get().getViewManager().showEditorProcessDefinitionPage(modelData.getId());
          URL explorerURL=ExplorerApp.get().getURL();
          URL url=new URL(explorerURL.getProtocol(),explorerURL.getHost(),explorerURL.getPort(),explorerURL.getPath().replace("/ui","") + "modeler.html?modelId=" + modelData.getId());
          ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
        }
 catch (        Exception e) {
          notificationManager.showErrorNotification("error",e);
        }
      }
 else {
        close();
        ExplorerApp.get().getViewManager().showSimpleTableProcessEditor((String)nameTextField.getValue(),(String)descriptionTextArea.getValue());
      }
    }
  }
);
  HorizontalLayout buttonLayout=new HorizontalLayout();
  buttonLayout.setSpacing(true);
  buttonLayout.addComponent(createButton);
  addComponent(buttonLayout);
  windowLayout.setComponentAlignment(buttonLayout,Alignment.MIDDLE_CENTER);
}
