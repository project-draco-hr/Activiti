{
  try {
    Group testGroup=identityService.newGroup("testgroup");
    testGroup.setName("Test group");
    testGroup.setType("Test type");
    identityService.saveGroup(testGroup);
    ObjectNode requestNode=objectMapper.createObjectNode();
    requestNode.put("name","Updated group");
    requestNode.put("type","Updated type");
    HttpPut httpPut=new HttpPut(SERVER_URL_PREFIX + RestUrls.createRelativeResourceUrl(RestUrls.URL_GROUP,"testgroup"));
    httpPut.setEntity(new StringEntity(requestNode.toString()));
    HttpResponse response=executeHttpRequest(httpPut,HttpStatus.SC_OK);
    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());
    assertNotNull(responseNode);
    assertEquals("testgroup",responseNode.get("id").textValue());
    assertEquals("Updated group",responseNode.get("name").textValue());
    assertEquals("Updated type",responseNode.get("type").textValue());
    assertTrue(responseNode.get("url").textValue().endsWith(RestUrls.createRelativeResourceUrl(RestUrls.URL_GROUP,testGroup.getId())));
    Group createdGroup=identityService.createGroupQuery().groupId("testgroup").singleResult();
    assertNotNull(createdGroup);
    assertEquals("Updated group",createdGroup.getName());
    assertEquals("Updated type",createdGroup.getType());
  }
  finally {
    try {
      identityService.deleteGroup("testgroup");
    }
 catch (    Throwable ignore) {
    }
  }
}
