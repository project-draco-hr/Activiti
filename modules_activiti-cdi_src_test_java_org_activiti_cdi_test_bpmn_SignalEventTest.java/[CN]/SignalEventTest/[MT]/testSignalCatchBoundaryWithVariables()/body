{
  HashMap<String,Object> variables1=new HashMap<String,Object>();
  variables1.put("processName","catchSignal");
  ProcessInstance piCatchSignal=runtimeService.startProcessInstanceByKey("catchSignal",variables1);
  HashMap<String,Object> variables2=new HashMap<String,Object>();
  variables2.put("processName","throwSignal");
  variables2.put("signalProcessInstanceId",piCatchSignal.getProcessInstanceId());
  ProcessInstance piThrowSignal=runtimeService.startProcessInstanceByKey("throwSignal",variables2);
  assertEquals(1,runtimeService.createExecutionQuery().processInstanceId(piCatchSignal.getProcessInstanceId()).activityId("receiveTask").count());
  assertEquals(1,runtimeService.createExecutionQuery().processInstanceId(piThrowSignal.getProcessInstanceId()).activityId("receiveTask").count());
  assertEquals("catchSignal-visited (was catchSignal)",runtimeService.getVariable(piCatchSignal.getId(),"processName"));
  assertEquals("throwSignal-visited (was throwSignal)",runtimeService.getVariable(piThrowSignal.getId(),"processName"));
  runtimeService.signal(piCatchSignal.getId());
  runtimeService.signal(piThrowSignal.getId());
}
