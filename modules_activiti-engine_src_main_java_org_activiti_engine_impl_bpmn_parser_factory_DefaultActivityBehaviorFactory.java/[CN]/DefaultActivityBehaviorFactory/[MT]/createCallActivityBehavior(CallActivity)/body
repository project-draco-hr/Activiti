{
  String expressionRegex="\\$+\\{+.+\\}";
  CallActivityBehavior callActivityBehaviour=null;
  if (StringUtils.isNotEmpty(callActivity.getCalledElement()) && callActivity.getCalledElement().matches(expressionRegex)) {
    callActivityBehaviour=new CallActivityBehavior(expressionManager.createExpression(callActivity.getCalledElement()),callActivity.getMapExceptions());
  }
 else {
    callActivityBehaviour=new CallActivityBehavior(callActivity.getCalledElement(),callActivity.getMapExceptions());
  }
  for (  IOParameter ioParameter : callActivity.getInParameters()) {
    if (StringUtils.isNotEmpty(ioParameter.getSourceExpression())) {
      Expression expression=expressionManager.createExpression(ioParameter.getSourceExpression().trim());
      callActivityBehaviour.addDataInputAssociation(new SimpleDataInputAssociation(expression,ioParameter.getTarget()));
    }
 else {
      callActivityBehaviour.addDataInputAssociation(new SimpleDataInputAssociation(ioParameter.getSource(),ioParameter.getTarget()));
    }
  }
  for (  IOParameter ioParameter : callActivity.getOutParameters()) {
    if (StringUtils.isNotEmpty(ioParameter.getSourceExpression())) {
      Expression expression=expressionManager.createExpression(ioParameter.getSourceExpression().trim());
      callActivityBehaviour.addDataOutputAssociation(new MessageImplicitDataOutputAssociation(ioParameter.getTarget(),expression));
    }
 else {
      callActivityBehaviour.addDataOutputAssociation(new MessageImplicitDataOutputAssociation(ioParameter.getTarget(),ioParameter.getSource()));
    }
  }
  return callActivityBehaviour;
}
