{
  BpmnModel bpmnModel=bpmnParse.getBpmnModel();
  ActivityImpl nestedActivity=null;
  EventDefinition eventDefinition=null;
  if (event.getEventDefinitions().size() > 0) {
    eventDefinition=event.getEventDefinitions().get(0);
  }
  if (eventDefinition == null) {
    nestedActivity=createActivityOnCurrentScope(bpmnParse,event,BpmnXMLConstants.ELEMENT_EVENT_CATCH);
  }
 else {
    ScopeImpl scope=bpmnParse.getCurrentScope();
    String eventBasedGatewayId=getPrecedingEventBasedGateway(bpmnParse,event);
    if (eventBasedGatewayId != null) {
      ActivityImpl gatewayActivity=scope.findActivity(eventBasedGatewayId);
      nestedActivity=createActivityOnScope(bpmnParse,event,BpmnXMLConstants.ELEMENT_EVENT_CATCH,gatewayActivity);
    }
 else {
      nestedActivity=createActivityOnScope(bpmnParse,event,BpmnXMLConstants.ELEMENT_EVENT_CATCH,scope);
    }
    nestedActivity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createIntermediateCatchEventActivityBehavior(event));
    if (eventDefinition instanceof TimerEventDefinition || eventDefinition instanceof SignalEventDefinition || eventDefinition instanceof MessageEventDefinition) {
      bpmnParse.getBpmnParserHandlers().parseElement(bpmnParse,eventDefinition);
    }
 else {
      logger.warn("Unsupported intermediate catch event type for event " + event.getId());
    }
  }
}
